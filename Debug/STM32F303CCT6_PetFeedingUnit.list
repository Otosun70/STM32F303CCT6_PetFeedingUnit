
STM32F303CCT6_PetFeedingUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d7c  08008344  08008344  00018344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090c0  080090c0  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  080090c0  080090c0  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080090c0  080090c0  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090c4  080090c4  000190c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080090c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  2000018c  08009254  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  08009254  00020a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2ce  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035ae  00000000  00000000  0003b48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  0003ea38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001278  00000000  00000000  0003fe70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e1a0  00000000  00000000  000410e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001367c  00000000  00000000  0005f288  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9060  00000000  00000000  00072904  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b964  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f0  00000000  00000000  0011b9e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800832c 	.word	0x0800832c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800832c 	.word	0x0800832c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fe4f 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f849 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fb53 	bl	8000928 <MX_GPIO_Init>
  MX_DMA_Init();
 8000282:	f000 fb33 	bl	80008ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000286:	f000 f8b3 	bl	80003f0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800028a:	f000 f921 	bl	80004d0 <MX_ADC2_Init>
  MX_I2C1_Init();
 800028e:	f000 f97d 	bl	800058c <MX_I2C1_Init>
  MX_RTC_Init();
 8000292:	f000 f9bb 	bl	800060c <MX_RTC_Init>
  MX_TIM3_Init();
 8000296:	f000 fa1d 	bl	80006d4 <MX_TIM3_Init>
  MX_TIM15_Init();
 800029a:	f000 fa95 	bl	80007c8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800029e:	f005 ff03 	bl	80060a8 <OLED_Init>
   Build_Menu();
 80002a2:	f007 f909 	bl	80074b8 <Build_Menu>
   displaySelectKey=GIRIS_EKRANI;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <main+0x88>)
 80002a8:	22a0      	movs	r2, #160	; 0xa0
 80002aa:	701a      	strb	r2, [r3, #0]
   kayitOnayDurum=false;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <main+0x8c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]

   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80002b2:	2108      	movs	r1, #8
 80002b4:	4812      	ldr	r0, [pc, #72]	; (8000300 <main+0x90>)
 80002b6:	f005 f8b5 	bl	8005424 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  displaySelect();
 80002ba:	f006 fe33 	bl	8006f24 <displaySelect>
	  pilGoster();
 80002be:	f005 febf 	bl	8006040 <pilGoster>
	  OLED_SetCursor(0, 0);
 80002c2:	2100      	movs	r1, #0
 80002c4:	2000      	movs	r0, #0
 80002c6:	f006 f9a9 	bl	800661c <OLED_SetCursor>
	  sprintf(keyYer, "%3d", deger[1]);
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <main+0x94>)
 80002cc:	885b      	ldrh	r3, [r3, #2]
 80002ce:	461a      	mov	r2, r3
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <main+0x98>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f007 fc1b 	bl	8007b10 <siprintf>
	  OLED_WriteString(keyYer, Font_7x10, White);
 80002da:	4a0c      	ldr	r2, [pc, #48]	; (800030c <main+0x9c>)
 80002dc:	1d38      	adds	r0, r7, #4
 80002de:	2301      	movs	r3, #1
 80002e0:	ca06      	ldmia	r2, {r1, r2}
 80002e2:	f006 f975 	bl	80065d0 <OLED_WriteString>
	  OLED_UpdateScreen();
 80002e6:	f006 f863 	bl	80063b0 <OLED_UpdateScreen>
	  ADC_DMA_degerOkuma();
 80002ea:	f005 fe95 	bl	8006018 <ADC_DMA_degerOkuma>
	  alarmDeneme(T1DEGER);
 80002ee:	20d0      	movs	r0, #208	; 0xd0
 80002f0:	f006 ff12 	bl	8007118 <alarmDeneme>
	  displaySelect();
 80002f4:	e7e1      	b.n	80002ba <main+0x4a>
 80002f6:	bf00      	nop
 80002f8:	20000a4a 	.word	0x20000a4a
 80002fc:	20000a48 	.word	0x20000a48
 8000300:	20000808 	.word	0x20000808
 8000304:	2000089c 	.word	0x2000089c
 8000308:	08008344 	.word	0x08008344
 800030c:	2000000c 	.word	0x2000000c

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b09e      	sub	sp, #120	; 0x78
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f007 fbee 	bl	8007b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000334:	463b      	mov	r3, r7
 8000336:	223c      	movs	r2, #60	; 0x3c
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f007 fbe0 	bl	8007b00 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000340:	f003 f80a 	bl	8003358 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <SystemClock_Config+0xd8>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a27      	ldr	r2, [pc, #156]	; (80003e8 <SystemClock_Config+0xd8>)
 800034a:	f023 0318 	bic.w	r3, r3, #24
 800034e:	6213      	str	r3, [r2, #32]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000350:	2307      	movs	r3, #7
 8000352:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000358:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000366:	2310      	movs	r3, #16
 8000368:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036a:	2302      	movs	r3, #2
 800036c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000372:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000374:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000378:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800037e:	4618      	mov	r0, r3
 8000380:	f002 fffa 	bl	8003378 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800038a:	f000 fb33 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a8:	2101      	movs	r1, #1
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 feec 	bl	8004188 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003b6:	f000 fb1d 	bl	80009f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <SystemClock_Config+0xdc>)
 80003bc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003c2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80003c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003cc:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4618      	mov	r0, r3
 80003d2:	f004 f8bf 	bl	8004554 <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80003dc:	f000 fb0a 	bl	80009f4 <Error_Handler>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3778      	adds	r7, #120	; 0x78
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	000100a0 	.word	0x000100a0

080003f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08a      	sub	sp, #40	; 0x28
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003f6:	f107 031c 	add.w	r3, r7, #28
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000420:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000426:	4b29      	ldr	r3, [pc, #164]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800042c:	4b27      	ldr	r3, [pc, #156]	; (80004cc <MX_ADC1_Init+0xdc>)
 800042e:	2200      	movs	r2, #0
 8000430:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043a:	4b24      	ldr	r3, [pc, #144]	; (80004cc <MX_ADC1_Init+0xdc>)
 800043c:	2200      	movs	r2, #0
 800043e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000442:	2201      	movs	r2, #1
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000446:	4b21      	ldr	r3, [pc, #132]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800044c:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_ADC1_Init+0xdc>)
 800044e:	2201      	movs	r2, #1
 8000450:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000454:	2200      	movs	r2, #0
 8000456:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <MX_ADC1_Init+0xdc>)
 800045c:	2204      	movs	r2, #4
 800045e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000462:	2200      	movs	r2, #0
 8000464:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000468:	2200      	movs	r2, #0
 800046a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800046c:	4817      	ldr	r0, [pc, #92]	; (80004cc <MX_ADC1_Init+0xdc>)
 800046e:	f000 fdd7 	bl	8001020 <HAL_ADC_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000478:	f000 fabc 	bl	80009f4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000480:	f107 031c 	add.w	r3, r7, #28
 8000484:	4619      	mov	r1, r3
 8000486:	4811      	ldr	r0, [pc, #68]	; (80004cc <MX_ADC1_Init+0xdc>)
 8000488:	f001 fc0e 	bl	8001ca8 <HAL_ADCEx_MultiModeConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000492:	f000 faaf 	bl	80009f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000496:	2301      	movs	r3, #1
 8000498:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800049a:	2301      	movs	r3, #1
 800049c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <MX_ADC1_Init+0xdc>)
 80004b4:	f001 f90c 	bl	80016d0 <HAL_ADC_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004be:	f000 fa99 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	3728      	adds	r7, #40	; 0x28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000084c 	.word	0x2000084c

080004d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	463b      	mov	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
 80004e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80004e6:	4b27      	ldr	r3, [pc, #156]	; (8000584 <MX_ADC2_Init+0xb4>)
 80004e8:	4a27      	ldr	r2, [pc, #156]	; (8000588 <MX_ADC2_Init+0xb8>)
 80004ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004ec:	4b25      	ldr	r3, [pc, #148]	; (8000584 <MX_ADC2_Init+0xb4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004f2:	4b24      	ldr	r3, [pc, #144]	; (8000584 <MX_ADC2_Init+0xb4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004f8:	4b22      	ldr	r3, [pc, #136]	; (8000584 <MX_ADC2_Init+0xb4>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <MX_ADC2_Init+0xb4>)
 8000500:	2200      	movs	r2, #0
 8000502:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <MX_ADC2_Init+0xb4>)
 8000506:	2200      	movs	r2, #0
 8000508:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <MX_ADC2_Init+0xb4>)
 800050e:	2200      	movs	r2, #0
 8000510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_ADC2_Init+0xb4>)
 8000514:	2201      	movs	r2, #1
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_ADC2_Init+0xb4>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_ADC2_Init+0xb4>)
 8000520:	2201      	movs	r2, #1
 8000522:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_ADC2_Init+0xb4>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_ADC2_Init+0xb4>)
 800052e:	2204      	movs	r2, #4
 8000530:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_ADC2_Init+0xb4>)
 8000534:	2200      	movs	r2, #0
 8000536:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <MX_ADC2_Init+0xb4>)
 800053a:	2200      	movs	r2, #0
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800053e:	4811      	ldr	r0, [pc, #68]	; (8000584 <MX_ADC2_Init+0xb4>)
 8000540:	f000 fd6e 	bl	8001020 <HAL_ADC_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800054a:	f000 fa53 	bl	80009f4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800054e:	2301      	movs	r3, #1
 8000550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000552:	2301      	movs	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <MX_ADC2_Init+0xb4>)
 800056c:	f001 f8b0 	bl	80016d0 <HAL_ADC_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000576:	f000 fa3d 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000648 	.word	0x20000648
 8000588:	50000100 	.word	0x50000100

0800058c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_I2C1_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_I2C1_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_I2C1_Init+0x74>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MX_I2C1_Init+0x7c>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_I2C1_Init+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c8:	f002 fac2 	bl	8002b50 <HAL_I2C_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d2:	f000 fa0f 	bl	80009f4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <MX_I2C1_Init+0x74>)
 80005da:	f002 fe25 	bl	8003228 <HAL_I2CEx_ConfigAnalogFilter>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 fa06 	bl	80009f4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_I2C1_Init+0x74>)
 80005ec:	f002 fe67 	bl	80032be <HAL_I2CEx_ConfigDigitalFilter>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 f9fd 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000698 	.word	0x20000698
 8000604:	40005400 	.word	0x40005400
 8000608:	2000090e 	.word	0x2000090e

0800060c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_RTC_Init+0xc0>)
 8000626:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <MX_RTC_Init+0xc4>)
 8000628:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_RTC_Init+0xc0>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_RTC_Init+0xc0>)
 8000632:	227f      	movs	r2, #127	; 0x7f
 8000634:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_RTC_Init+0xc0>)
 8000638:	22ff      	movs	r2, #255	; 0xff
 800063a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_RTC_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_RTC_Init+0xc0>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_RTC_Init+0xc0>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800064e:	481f      	ldr	r0, [pc, #124]	; (80006cc <MX_RTC_Init+0xc0>)
 8000650:	f004 f930 	bl	80048b4 <HAL_RTC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800065a:	f000 f9cb 	bl	80009f4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800065e:	2300      	movs	r3, #0
 8000660:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000662:	2300      	movs	r3, #0
 8000664:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000666:	2300      	movs	r3, #0
 8000668:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2201      	movs	r2, #1
 8000676:	4619      	mov	r1, r3
 8000678:	4814      	ldr	r0, [pc, #80]	; (80006cc <MX_RTC_Init+0xc0>)
 800067a:	f004 f9ac 	bl	80049d6 <HAL_RTC_SetTime>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000684:	f000 f9b6 	bl	80009f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000688:	2301      	movs	r3, #1
 800068a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800068c:	2301      	movs	r3, #1
 800068e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000690:	2301      	movs	r3, #1
 8000692:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000694:	2300      	movs	r3, #0
 8000696:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2201      	movs	r2, #1
 800069c:	4619      	mov	r1, r3
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <MX_RTC_Init+0xc0>)
 80006a0:	f004 fab4 	bl	8004c0c <HAL_RTC_SetDate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80006aa:	f000 f9a3 	bl	80009f4 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_RTC_Init+0xc0>)
 80006b4:	f004 fdf7 	bl	80052a6 <HAL_RTCEx_SetWakeUpTimer>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80006be:	f000 f999 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000990 	.word	0x20000990
 80006d0:	40002800 	.word	0x40002800

080006d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <MX_TIM3_Init+0xec>)
 80006fa:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <MX_TIM3_Init+0xf0>)
 80006fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_TIM3_Init+0xec>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <MX_TIM3_Init+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800070a:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <MX_TIM3_Init+0xec>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_TIM3_Init+0xec>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_TIM3_Init+0xec>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800071c:	4828      	ldr	r0, [pc, #160]	; (80007c0 <MX_TIM3_Init+0xec>)
 800071e:	f004 fe56 	bl	80053ce <HAL_TIM_PWM_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000728:	f000 f964 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4821      	ldr	r0, [pc, #132]	; (80007c0 <MX_TIM3_Init+0xec>)
 800073c:	f005 fb6e 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000746:	f000 f955 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074a:	2360      	movs	r3, #96	; 0x60
 800074c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <MX_TIM3_Init+0xec>)
 8000762:	f004 feb7 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800076c:	f000 f942 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	2204      	movs	r2, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_TIM3_Init+0xec>)
 8000778:	f004 feac 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000782:	f000 f937 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	2208      	movs	r2, #8
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_TIM3_Init+0xec>)
 800078e:	f004 fea1 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000798:	f000 f92c 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	220c      	movs	r2, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <MX_TIM3_Init+0xec>)
 80007a4:	f004 fe96 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80007ae:	f000 f921 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007b2:	4803      	ldr	r0, [pc, #12]	; (80007c0 <MX_TIM3_Init+0xec>)
 80007b4:	f000 fa92 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000808 	.word	0x20000808
 80007c4:	40000400 	.word	0x40000400

080007c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b096      	sub	sp, #88	; 0x58
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	222c      	movs	r2, #44	; 0x2c
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 f983 	bl	8007b00 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80007fa:	4b3a      	ldr	r3, [pc, #232]	; (80008e4 <MX_TIM15_Init+0x11c>)
 80007fc:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <MX_TIM15_Init+0x120>)
 80007fe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000800:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <MX_TIM15_Init+0x11c>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <MX_TIM15_Init+0x11c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 800080c:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <MX_TIM15_Init+0x11c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <MX_TIM15_Init+0x11c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <MX_TIM15_Init+0x11c>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <MX_TIM15_Init+0x11c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000824:	482f      	ldr	r0, [pc, #188]	; (80008e4 <MX_TIM15_Init+0x11c>)
 8000826:	f004 fdd2 	bl	80053ce <HAL_TIM_PWM_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM15_Init+0x6c>
  {
    Error_Handler();
 8000830:	f000 f8e0 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800083c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000840:	4619      	mov	r1, r3
 8000842:	4828      	ldr	r0, [pc, #160]	; (80008e4 <MX_TIM15_Init+0x11c>)
 8000844:	f005 faea 	bl	8005e1c <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 800084e:	f000 f8d1 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000852:	2360      	movs	r3, #96	; 0x60
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	481b      	ldr	r0, [pc, #108]	; (80008e4 <MX_TIM15_Init+0x11c>)
 8000878:	f004 fe2c 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM15_Init+0xbe>
  {
    Error_Handler();
 8000882:	f000 f8b7 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800088a:	2204      	movs	r2, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4815      	ldr	r0, [pc, #84]	; (80008e4 <MX_TIM15_Init+0x11c>)
 8000890:	f004 fe20 	bl	80054d4 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 800089a:	f000 f8ab 	bl	80009f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_TIM15_Init+0x11c>)
 80008c6:	f005 fb29 	bl	8005f1c <HAL_TIMEx_ConfigBreakDeadTime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM15_Init+0x10c>
  {
    Error_Handler();
 80008d0:	f000 f890 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <MX_TIM15_Init+0x11c>)
 80008d6:	f000 fa01 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3758      	adds	r7, #88	; 0x58
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200006e4 	.word	0x200006e4
 80008e8:	40014000 	.word	0x40014000

080008ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA_Init+0x38>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <MX_DMA_Init+0x38>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_DMA_Init+0x38>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200b      	movs	r0, #11
 8000910:	f001 fd69 	bl	80023e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000914:	200b      	movs	r0, #11
 8000916:	f001 fd82 	bl	800241e <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000944:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_GPIO_Init+0xc4>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a24      	ldr	r2, [pc, #144]	; (80009ec <MX_GPIO_Init+0xc4>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000960:	6153      	str	r3, [r2, #20]
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_GPIO_Init+0xc4>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <MX_GPIO_Init+0xc4>)
 800098c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000990:	6153      	str	r3, [r2, #20]
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_GPIO_Init+0xc4>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSLEEP_Pin|SERVO_POWER_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f248 0120 	movw	r1, #32800	; 0x8020
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f002 f8ba 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSLEEP_Pin SERVO_POWER_Pin */
  GPIO_InitStruct.Pin = NSLEEP_Pin|SERVO_POWER_Pin;
 80009ac:	f248 0320 	movw	r3, #32800	; 0x8020
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 ff30 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : NFAULT_Pin KEY_1_Pin KEY_2_Pin KEY_3_Pin 
                           KEY_4_Pin KEY_5_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin 
 80009cc:	23fc      	movs	r3, #252	; 0xfc
 80009ce:	617b      	str	r3, [r7, #20]
                          |KEY_4_Pin|KEY_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0xc8>)
 80009e0:	f001 ff24 	bl	800282c <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000400 	.word	0x48000400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x44>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x44>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x44>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a6c:	d156      	bne.n	8000b1c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a6e:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <HAL_ADC_MspInit+0x140>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a45      	ldr	r2, [pc, #276]	; (8000b8c <HAL_ADC_MspInit+0x140>)
 8000a76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a78:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <HAL_ADC_MspInit+0x140>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10b      	bne.n	8000a98 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a80:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6153      	str	r3, [r2, #20]
 8000a8c:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa2:	6153      	str	r3, [r2, #20]
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f001 feb1 	bl	800282c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000acc:	4a32      	ldr	r2, [pc, #200]	; (8000b98 <HAL_ADC_MspInit+0x14c>)
 8000ace:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000adc:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000afe:	4825      	ldr	r0, [pc, #148]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000b00:	f001 fca7 	bl	8002452 <HAL_DMA_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000b0a:	f7ff ff73 	bl	80009f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38
 8000b14:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HAL_ADC_MspInit+0x148>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b1a:	e032      	b.n	8000b82 <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_ADC_MspInit+0x150>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12d      	bne.n	8000b82 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_ADC_MspInit+0x140>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_ADC_MspInit+0x140>)
 8000b2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_ADC_MspInit+0x140>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10b      	bne.n	8000b50 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b42:	6153      	str	r3, [r2, #20]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5a:	6153      	str	r3, [r2, #20]
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_ADC_MspInit+0x144>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b68:	2310      	movs	r3, #16
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f001 fe55 	bl	800282c <HAL_GPIO_Init>
}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001a8 	.word	0x200001a8
 8000b90:	40021000 	.word	0x40021000
 8000b94:	20000948 	.word	0x20000948
 8000b98:	40020008 	.word	0x40020008
 8000b9c:	50000100 	.word	0x50000100

08000ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_I2C_MspInit+0x7c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d128      	bne.n	8000c14 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bcc:	6153      	str	r3, [r2, #20]
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bec:	2304      	movs	r3, #4
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480b      	ldr	r0, [pc, #44]	; (8000c24 <HAL_I2C_MspInit+0x84>)
 8000bf8:	f001 fe18 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c06:	61d3      	str	r3, [r2, #28]
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_I2C_MspInit+0x80>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000400 	.word	0x48000400

08000c28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_RTC_MspInit+0x44>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d111      	bne.n	8000c5e <HAL_RTC_MspInit+0x36>
 8000c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c3e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c48:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c4a:	fab3 f383 	clz	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_RTC_MspInit+0x48>)
 8000c54:	4413      	add	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40002800 	.word	0x40002800
 8000c70:	10908100 	.word	0x10908100

08000c74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10c      	bne.n	8000ca0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x60>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x60>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	61d3      	str	r3, [r2, #28]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x60>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000c9e:	e010      	b.n	8000cc2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <HAL_TIM_PWM_MspInit+0x64>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x60>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x60>)
 8000cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x60>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40014000 	.word	0x40014000

08000cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a31      	ldr	r2, [pc, #196]	; (8000dc0 <HAL_TIM_MspPostInit+0xe4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d139      	bne.n	8000d72 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a30      	ldr	r2, [pc, #192]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	6153      	str	r3, [r2, #20]
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23c0      	movs	r3, #192	; 0xc0
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f001 fd6e 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d50:	2303      	movs	r3, #3
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d60:	2302      	movs	r3, #2
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <HAL_TIM_MspPostInit+0xec>)
 8000d6c:	f001 fd5e 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000d70:	e021      	b.n	8000db6 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM15)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_TIM_MspPostInit+0xf0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d11c      	bne.n	8000db6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d86:	6153      	str	r3, [r2, #20]
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_TIM_MspPostInit+0xe8>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000d94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8000da6:	2301      	movs	r3, #1
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_TIM_MspPostInit+0xec>)
 8000db2:	f001 fd3b 	bl	800282c <HAL_GPIO_Init>
}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	40014000 	.word	0x40014000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f8be 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA1_Channel1_IRQHandler+0x10>)
 8000e32:	f001 fbed 	bl	8002610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000948 	.word	0x20000948

08000e40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x50>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <_sbrk+0x16>
		heap_end = &end;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <_sbrk+0x50>)
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <_sbrk+0x54>)
 8000e54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <_sbrk+0x50>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <_sbrk+0x50>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	466a      	mov	r2, sp
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d907      	bls.n	8000e7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e6a:	f006 fe1f 	bl	8007aac <__errno>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	230c      	movs	r3, #12
 8000e72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295
 8000e78:	e006      	b.n	8000e88 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <_sbrk+0x50>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <_sbrk+0x50>)
 8000e84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001ac 	.word	0x200001ac
 8000e94:	20000a78 	.word	0x20000a78

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <SystemInit+0x28>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <SystemInit+0x28>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SystemInit+0x28>)
 8000eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ec8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eca:	e003      	b.n	8000ed4 <LoopCopyDataInit>

08000ecc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ece:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ed0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ed2:	3104      	adds	r1, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ed8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000edc:	d3f6      	bcc.n	8000ecc <CopyDataInit>
	ldr	r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ee0:	e002      	b.n	8000ee8 <LoopFillZerobss>

08000ee2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ee2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ee4:	f842 3b04 	str.w	r3, [r2], #4

08000ee8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <LoopForever+0x16>)
	cmp	r2, r3
 8000eea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000eec:	d3f9      	bcc.n	8000ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eee:	f7ff ffd3 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f006 fde1 	bl	8007ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef6:	f7ff f9bb 	bl	8000270 <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000efc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000f00:	080090c8 	.word	0x080090c8
	ldr	r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f08:	2000018c 	.word	0x2000018c
	ldr	r2, =_sbss
 8000f0c:	2000018c 	.word	0x2000018c
	ldr	r3, = _ebss
 8000f10:	20000a78 	.word	0x20000a78

08000f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_2_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x28>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x28>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f001 fa51 	bl	80023d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fd66 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40022000 	.word	0x40022000

08000f44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fa69 	bl	800243a <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f001 fa31 	bl	80023e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000a70 	.word	0x20000a70

08000fcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000a70 	.word	0x20000a70

08000fe4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09a      	sub	sp, #104	; 0x68
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e1c9      	b.n	80013d4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d176      	bne.n	8001140 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d152      	bne.n	8001100 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fce9 	bl	8000a4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d13b      	bne.n	8001100 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 ffc3 	bl	8002014 <ADC_Disable>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	d12f      	bne.n	8001100 <HAL_ADC_Init+0xe0>
 80010a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d12b      	bne.n	8001100 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b0:	f023 0302 	bic.w	r3, r3, #2
 80010b4:	f043 0202 	orr.w	r2, r3, #2
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010dc:	4b86      	ldr	r3, [pc, #536]	; (80012f8 <HAL_ADC_Init+0x2d8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a86      	ldr	r2, [pc, #536]	; (80012fc <HAL_ADC_Init+0x2dc>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0c9a      	lsrs	r2, r3, #18
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010f2:	e002      	b.n	80010fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f9      	bne.n	80010f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800111c:	d110      	bne.n	8001140 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f023 0312 	bic.w	r3, r3, #18
 8001126:	f043 0210 	orr.w	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	f040 8136 	bne.w	80013ba <HAL_ADC_Init+0x39a>
 800114e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 8131 	bne.w	80013ba <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 8129 	bne.w	80013ba <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001170:	f043 0202 	orr.w	r2, r3, #2
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001180:	d004      	beq.n	800118c <HAL_ADC_Init+0x16c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a5e      	ldr	r2, [pc, #376]	; (8001300 <HAL_ADC_Init+0x2e0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_ADC_Init+0x170>
 800118c:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_ADC_Init+0x2e4>)
 800118e:	e000      	b.n	8001192 <HAL_ADC_Init+0x172>
 8001190:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_ADC_Init+0x2e8>)
 8001192:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119c:	d102      	bne.n	80011a4 <HAL_ADC_Init+0x184>
 800119e:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_ADC_Init+0x2e0>)
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	e01a      	b.n	80011da <HAL_ADC_Init+0x1ba>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a55      	ldr	r2, [pc, #340]	; (8001300 <HAL_ADC_Init+0x2e0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d103      	bne.n	80011b6 <HAL_ADC_Init+0x196>
 80011ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	e011      	b.n	80011da <HAL_ADC_Init+0x1ba>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a54      	ldr	r2, [pc, #336]	; (800130c <HAL_ADC_Init+0x2ec>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d102      	bne.n	80011c6 <HAL_ADC_Init+0x1a6>
 80011c0:	4b53      	ldr	r3, [pc, #332]	; (8001310 <HAL_ADC_Init+0x2f0>)
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e009      	b.n	80011da <HAL_ADC_Init+0x1ba>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a51      	ldr	r2, [pc, #324]	; (8001310 <HAL_ADC_Init+0x2f0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d102      	bne.n	80011d6 <HAL_ADC_Init+0x1b6>
 80011d0:	4b4e      	ldr	r3, [pc, #312]	; (800130c <HAL_ADC_Init+0x2ec>)
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e001      	b.n	80011da <HAL_ADC_Init+0x1ba>
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d108      	bne.n	80011fa <HAL_ADC_Init+0x1da>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Init+0x1da>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_ADC_Init+0x1dc>
 80011fa:	2300      	movs	r3, #0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d11c      	bne.n	800123a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001200:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001202:	2b00      	cmp	r3, #0
 8001204:	d010      	beq.n	8001228 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_ADC_Init+0x202>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Init+0x202>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_ADC_Init+0x204>
 8001222:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001224:	2b00      	cmp	r3, #0
 8001226:	d108      	bne.n	800123a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	431a      	orrs	r2, r3
 8001236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001238:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7e5b      	ldrb	r3, [r3, #25]
 800123e:	035b      	lsls	r3, r3, #13
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001244:	2a01      	cmp	r2, #1
 8001246:	d002      	beq.n	800124e <HAL_ADC_Init+0x22e>
 8001248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800124c:	e000      	b.n	8001250 <HAL_ADC_Init+0x230>
 800124e:	2200      	movs	r2, #0
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4313      	orrs	r3, r2
 800125e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001260:	4313      	orrs	r3, r2
 8001262:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d11b      	bne.n	80012a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e5b      	ldrb	r3, [r3, #25]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	3b01      	subs	r3, #1
 800127c:	045a      	lsls	r2, r3, #17
 800127e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001280:	4313      	orrs	r3, r2
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	663b      	str	r3, [r7, #96]	; 0x60
 8001288:	e00d      	b.n	80012a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001292:	f043 0220 	orr.w	r2, r3, #32
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d03a      	beq.n	8001324 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_ADC_Init+0x2ec>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d004      	beq.n	80012c2 <HAL_ADC_Init+0x2a2>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_ADC_Init+0x2f0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d128      	bne.n	8001314 <HAL_ADC_Init+0x2f4>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80012ca:	d012      	beq.n	80012f2 <HAL_ADC_Init+0x2d2>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d4:	d00a      	beq.n	80012ec <HAL_ADC_Init+0x2cc>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80012de:	d002      	beq.n	80012e6 <HAL_ADC_Init+0x2c6>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	e018      	b.n	8001318 <HAL_ADC_Init+0x2f8>
 80012e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ea:	e015      	b.n	8001318 <HAL_ADC_Init+0x2f8>
 80012ec:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80012f0:	e012      	b.n	8001318 <HAL_ADC_Init+0x2f8>
 80012f2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80012f6:	e00f      	b.n	8001318 <HAL_ADC_Init+0x2f8>
 80012f8:	20000000 	.word	0x20000000
 80012fc:	431bde83 	.word	0x431bde83
 8001300:	50000100 	.word	0x50000100
 8001304:	50000300 	.word	0x50000300
 8001308:	50000700 	.word	0x50000700
 800130c:	50000400 	.word	0x50000400
 8001310:	50000500 	.word	0x50000500
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800131c:	4313      	orrs	r3, r2
 800131e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001320:	4313      	orrs	r3, r2
 8001322:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d114      	bne.n	800135c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001340:	f023 0302 	bic.w	r3, r3, #2
 8001344:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7e1b      	ldrb	r3, [r3, #24]
 800134a:	039a      	lsls	r2, r3, #14
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4313      	orrs	r3, r2
 8001356:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001358:	4313      	orrs	r3, r2
 800135a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_ADC_Init+0x3bc>)
 8001364:	4013      	ands	r3, r2
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800136c:	430b      	orrs	r3, r1
 800136e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d10c      	bne.n	8001392 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f023 010f 	bic.w	r1, r3, #15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
 8001390:	e007      	b.n	80013a2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 020f 	bic.w	r2, r2, #15
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f023 0303 	bic.w	r3, r3, #3
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
 80013b8:	e00a      	b.n	80013d0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f023 0312 	bic.w	r3, r3, #18
 80013c2:	f043 0210 	orr.w	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80013ca:	2301      	movs	r3, #1
 80013cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3768      	adds	r7, #104	; 0x68
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	fff0c007 	.word	0xfff0c007

080013e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 80f7 	bne.w	80015ee <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_ADC_Start_DMA+0x2e>
 800140a:	2302      	movs	r3, #2
 800140c:	e0f2      	b.n	80015f4 <HAL_ADC_Start_DMA+0x214>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141e:	d004      	beq.n	800142a <HAL_ADC_Start_DMA+0x4a>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a75      	ldr	r2, [pc, #468]	; (80015fc <HAL_ADC_Start_DMA+0x21c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d109      	bne.n	800143e <HAL_ADC_Start_DMA+0x5e>
 800142a:	4b75      	ldr	r3, [pc, #468]	; (8001600 <HAL_ADC_Start_DMA+0x220>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	e008      	b.n	8001450 <HAL_ADC_Start_DMA+0x70>
 800143e:	4b71      	ldr	r3, [pc, #452]	; (8001604 <HAL_ADC_Start_DMA+0x224>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	2b00      	cmp	r3, #0
 8001448:	bf0c      	ite	eq
 800144a:	2301      	moveq	r3, #1
 800144c:	2300      	movne	r3, #0
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80c5 	beq.w	80015e0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 fd7e 	bl	8001f58 <ADC_Enable>
 800145c:	4603      	mov	r3, r0
 800145e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 80b7 	bne.w	80015d6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001484:	d004      	beq.n	8001490 <HAL_ADC_Start_DMA+0xb0>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a5c      	ldr	r2, [pc, #368]	; (80015fc <HAL_ADC_Start_DMA+0x21c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d106      	bne.n	800149e <HAL_ADC_Start_DMA+0xbe>
 8001490:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <HAL_ADC_Start_DMA+0x220>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	2b00      	cmp	r3, #0
 800149a:	d010      	beq.n	80014be <HAL_ADC_Start_DMA+0xde>
 800149c:	e005      	b.n	80014aa <HAL_ADC_Start_DMA+0xca>
 800149e:	4b59      	ldr	r3, [pc, #356]	; (8001604 <HAL_ADC_Start_DMA+0x224>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_ADC_Start_DMA+0xde>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b2:	d004      	beq.n	80014be <HAL_ADC_Start_DMA+0xde>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a53      	ldr	r2, [pc, #332]	; (8001608 <HAL_ADC_Start_DMA+0x228>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d115      	bne.n	80014ea <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d036      	beq.n	8001546 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014e8:	e02d      	b.n	8001546 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fe:	d004      	beq.n	800150a <HAL_ADC_Start_DMA+0x12a>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a3d      	ldr	r2, [pc, #244]	; (80015fc <HAL_ADC_Start_DMA+0x21c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d10a      	bne.n	8001520 <HAL_ADC_Start_DMA+0x140>
 800150a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf14      	ite	ne
 8001518:	2301      	movne	r3, #1
 800151a:	2300      	moveq	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	e008      	b.n	8001532 <HAL_ADC_Start_DMA+0x152>
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_ADC_Start_DMA+0x228>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800153e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001552:	d106      	bne.n	8001562 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f023 0206 	bic.w	r2, r3, #6
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	645a      	str	r2, [r3, #68]	; 0x44
 8001560:	e002      	b.n	8001568 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001574:	4a25      	ldr	r2, [pc, #148]	; (800160c <HAL_ADC_Start_DMA+0x22c>)
 8001576:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157c:	4a24      	ldr	r2, [pc, #144]	; (8001610 <HAL_ADC_Start_DMA+0x230>)
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001584:	4a23      	ldr	r2, [pc, #140]	; (8001614 <HAL_ADC_Start_DMA+0x234>)
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	221c      	movs	r2, #28
 800158e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0210 	orr.w	r2, r2, #16
 800159e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3340      	adds	r3, #64	; 0x40
 80015ba:	4619      	mov	r1, r3
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f000 ff8e 	bl	80024e0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0204 	orr.w	r2, r2, #4
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e00d      	b.n	80015f2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015de:	e008      	b.n	80015f2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015ec:	e001      	b.n	80015f2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015ee:	2302      	movs	r3, #2
 80015f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	50000100 	.word	0x50000100
 8001600:	50000300 	.word	0x50000300
 8001604:	50000700 	.word	0x50000700
 8001608:	50000400 	.word	0x50000400
 800160c:	08001e8d 	.word	0x08001e8d
 8001610:	08001f07 	.word	0x08001f07
 8001614:	08001f23 	.word	0x08001f23

08001618 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_ADC_Stop_DMA+0x1a>
 800162e:	2302      	movs	r3, #2
 8001630:	e04a      	b.n	80016c8 <HAL_ADC_Stop_DMA+0xb0>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800163a:	216c      	movs	r1, #108	; 0x6c
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fd49 	bl	80020d4 <ADC_ConversionStop>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d138      	bne.n	80016be <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	4618      	mov	r0, r3
 8001662:	f000 ff9c 	bl	800259e <HAL_DMA_Abort>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0210 	bic.w	r2, r2, #16
 800168a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fcbe 	bl	8002014 <ADC_Disable>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e002      	b.n	80016a4 <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fcb8 	bl	8002014 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b09b      	sub	sp, #108	; 0x6c
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x22>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e2cb      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x5ba>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 82af 	bne.w	8001c68 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b04      	cmp	r3, #4
 8001710:	d81c      	bhi.n	800174c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	461a      	mov	r2, r3
 8001726:	231f      	movs	r3, #31
 8001728:	4093      	lsls	r3, r2
 800172a:	43db      	mvns	r3, r3
 800172c:	4019      	ands	r1, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa00 f203 	lsl.w	r2, r0, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
 800174a:	e063      	b.n	8001814 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b09      	cmp	r3, #9
 8001752:	d81e      	bhi.n	8001792 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	3b1e      	subs	r3, #30
 8001768:	221f      	movs	r2, #31
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	4019      	ands	r1, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3b1e      	subs	r3, #30
 8001784:	fa00 f203 	lsl.w	r2, r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
 8001790:	e040      	b.n	8001814 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b0e      	cmp	r3, #14
 8001798:	d81e      	bhi.n	80017d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	3b3c      	subs	r3, #60	; 0x3c
 80017ae:	221f      	movs	r2, #31
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4019      	ands	r1, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	3b3c      	subs	r3, #60	; 0x3c
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38
 80017d6:	e01d      	b.n	8001814 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	3b5a      	subs	r3, #90	; 0x5a
 80017ec:	221f      	movs	r2, #31
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	4019      	ands	r1, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	3b5a      	subs	r3, #90	; 0x5a
 8001808:	fa00 f203 	lsl.w	r2, r0, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 80e5 	bne.w	80019ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b09      	cmp	r3, #9
 800182a:	d91c      	bls.n	8001866 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6999      	ldr	r1, [r3, #24]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	3b1e      	subs	r3, #30
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6898      	ldr	r0, [r3, #8]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	3b1e      	subs	r3, #30
 8001858:	fa00 f203 	lsl.w	r2, r0, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	619a      	str	r2, [r3, #24]
 8001864:	e019      	b.n	800189a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6959      	ldr	r1, [r3, #20]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	2207      	movs	r2, #7
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	4019      	ands	r1, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6898      	ldr	r0, [r3, #8]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	08db      	lsrs	r3, r3, #3
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d84f      	bhi.n	800195c <HAL_ADC_ConfigChannel+0x28c>
 80018bc:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80018be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c2:	bf00      	nop
 80018c4:	080018d5 	.word	0x080018d5
 80018c8:	080018f7 	.word	0x080018f7
 80018cc:	08001919 	.word	0x08001919
 80018d0:	0800193b 	.word	0x0800193b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018da:	4b9f      	ldr	r3, [pc, #636]	; (8001b58 <HAL_ADC_ConfigChannel+0x488>)
 80018dc:	4013      	ands	r3, r2
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	0691      	lsls	r1, r2, #26
 80018e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018e6:	430a      	orrs	r2, r1
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018f2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018f4:	e07e      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018fc:	4b96      	ldr	r3, [pc, #600]	; (8001b58 <HAL_ADC_ConfigChannel+0x488>)
 80018fe:	4013      	ands	r3, r2
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	0691      	lsls	r1, r2, #26
 8001906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001908:	430a      	orrs	r2, r1
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001914:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001916:	e06d      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800191e:	4b8e      	ldr	r3, [pc, #568]	; (8001b58 <HAL_ADC_ConfigChannel+0x488>)
 8001920:	4013      	ands	r3, r2
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	0691      	lsls	r1, r2, #26
 8001928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800192a:	430a      	orrs	r2, r1
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001936:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001938:	e05c      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001940:	4b85      	ldr	r3, [pc, #532]	; (8001b58 <HAL_ADC_ConfigChannel+0x488>)
 8001942:	4013      	ands	r3, r2
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	0691      	lsls	r1, r2, #26
 800194a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800194c:	430a      	orrs	r2, r1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001958:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800195a:	e04b      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	069b      	lsls	r3, r3, #26
 800196c:	429a      	cmp	r2, r3
 800196e:	d107      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800197e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	069b      	lsls	r3, r3, #26
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019a2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	069b      	lsls	r3, r3, #26
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d107      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019c6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	069b      	lsls	r3, r3, #26
 80019d8:	429a      	cmp	r2, r3
 80019da:	d10a      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80019ec:	e001      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80019ee:	bf00      	nop
 80019f0:	e000      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80019f2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d108      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x344>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x344>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x346>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 8131 	bne.w	8001c7e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d00f      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a42:	e049      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	d91c      	bls.n	8001aa0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6999      	ldr	r1, [r3, #24]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	3b1b      	subs	r3, #27
 8001a78:	2207      	movs	r2, #7
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4019      	ands	r1, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6898      	ldr	r0, [r3, #8]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b1b      	subs	r3, #27
 8001a92:	fa00 f203 	lsl.w	r2, r0, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	e01b      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6959      	ldr	r1, [r3, #20]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4019      	ands	r1, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6898      	ldr	r0, [r3, #8]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae0:	d004      	beq.n	8001aec <HAL_ADC_ConfigChannel+0x41c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_ADC_ConfigChannel+0x48c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x420>
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_ADC_ConfigChannel+0x490>)
 8001aee:	e000      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x422>
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_ADC_ConfigChannel+0x494>)
 8001af2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b0c:	2b11      	cmp	r3, #17
 8001b0e:	d105      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00b      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b20:	2b12      	cmp	r3, #18
 8001b22:	f040 80ac 	bne.w	8001c7e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80a5 	bne.w	8001c7e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b3c:	d102      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x474>
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_ADC_ConfigChannel+0x48c>)
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e023      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4bc>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_ADC_ConfigChannel+0x48c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10c      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x498>
 8001b4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e01a      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4bc>
 8001b56:	bf00      	nop
 8001b58:	83fff000 	.word	0x83fff000
 8001b5c:	50000100 	.word	0x50000100
 8001b60:	50000300 	.word	0x50000300
 8001b64:	50000700 	.word	0x50000700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d102      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x4a8>
 8001b72:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_ADC_ConfigChannel+0x5cc>)
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	e009      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4bc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a47      	ldr	r2, [pc, #284]	; (8001c9c <HAL_ADC_ConfigChannel+0x5cc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d102      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x4b8>
 8001b82:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <HAL_ADC_ConfigChannel+0x5c8>)
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e001      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4bc>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x4dc>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x4dc>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_ADC_ConfigChannel+0x4de>
 8001bac:	2300      	movs	r3, #0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d150      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d010      	beq.n	8001bda <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x504>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x504>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x506>
 8001bd4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d13c      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d11d      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x54e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bea:	d118      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_ADC_ConfigChannel+0x5d4>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9a      	lsrs	r2, r3, #18
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c0e:	e002      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c1c:	e02e      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b11      	cmp	r3, #17
 8001c24:	d10b      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x56e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2e:	d106      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c3a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c3c:	e01e      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	d11a      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c50:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c52:	e013      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c66:	e00a      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f043 0220 	orr.w	r2, r3, #32
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c7a:	e000      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c7c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	376c      	adds	r7, #108	; 0x6c
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	50000400 	.word	0x50000400
 8001c9c:	50000500 	.word	0x50000500
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	431bde83 	.word	0x431bde83

08001ca8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b099      	sub	sp, #100	; 0x64
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc0:	d102      	bne.n	8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	; (8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	e01a      	b.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6a      	ldr	r2, [pc, #424]	; (8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d103      	bne.n	8001cda <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001cd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	e011      	b.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d102      	bne.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	e009      	b.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a64      	ldr	r2, [pc, #400]	; (8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d102      	bne.n	8001cfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001cf4:	4b61      	ldr	r3, [pc, #388]	; (8001e7c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	e001      	b.n	8001cfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0b0      	b.n	8001e6a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e0a9      	b.n	8001e6a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 808d 	bne.w	8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 8086 	bne.w	8001e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d44:	d004      	beq.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a4b      	ldr	r2, [pc, #300]	; (8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001d52:	e000      	b.n	8001d56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001d56:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d040      	beq.n	8001de2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d72:	035b      	lsls	r3, r3, #13
 8001d74:	430b      	orrs	r3, r1
 8001d76:	431a      	orrs	r2, r3
 8001d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d7a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d108      	bne.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d15c      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001dbe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d14b      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001dcc:	f023 030f 	bic.w	r3, r3, #15
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	6811      	ldr	r1, [r2, #0]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	6892      	ldr	r2, [r2, #8]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dde:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001de0:	e03c      	b.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d108      	bne.n	8001e0e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d123      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001e30:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d112      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001e36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e3e:	f023 030f 	bic.w	r3, r3, #15
 8001e42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e44:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e46:	e009      	b.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f043 0220 	orr.w	r2, r3, #32
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e5a:	e000      	b.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e5c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3764      	adds	r7, #100	; 0x64
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	50000100 	.word	0x50000100
 8001e7c:	50000400 	.word	0x50000400
 8001e80:	50000500 	.word	0x50000500
 8001e84:	50000300 	.word	0x50000300
 8001e88:	50000700 	.word	0x50000700

08001e8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d126      	bne.n	8001ef4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d115      	bne.n	8001eec <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d111      	bne.n	8001eec <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff f879 	bl	8000fe4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ef2:	e004      	b.n	8001efe <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff f86f 	bl	8000ff8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	f043 0204 	orr.w	r2, r3, #4
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff f85f 	bl	800100c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <ADC_Enable+0x2c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <ADC_Enable+0x2c>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <ADC_Enable+0x2e>
 8001f84:	2300      	movs	r3, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d13c      	bne.n	8002004 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <ADC_Enable+0xb8>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f043 0210 	orr.w	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e028      	b.n	8002006 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001fc4:	f7ff f802 	bl	8000fcc <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fca:	e014      	b.n	8001ff6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fcc:	f7fe fffe 	bl	8000fcc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d90d      	bls.n	8001ff6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e007      	b.n	8002006 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d1e3      	bne.n	8001fcc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	8000003f 	.word	0x8000003f

08002014 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d108      	bne.n	8002040 <ADC_Disable+0x2c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <ADC_Disable+0x2c>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <ADC_Disable+0x2e>
 8002040:	2300      	movs	r3, #0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d040      	beq.n	80020c8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 030d 	and.w	r3, r3, #13
 8002050:	2b01      	cmp	r3, #1
 8002052:	d10f      	bne.n	8002074 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0202 	orr.w	r2, r2, #2
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2203      	movs	r2, #3
 800206a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800206c:	f7fe ffae 	bl	8000fcc <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002072:	e022      	b.n	80020ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0210 	orr.w	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e01c      	b.n	80020ca <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002090:	f7fe ff9c 	bl	8000fcc <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d90d      	bls.n	80020ba <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d0e3      	beq.n	8002090 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8093 	beq.w	8002220 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002108:	d12a      	bne.n	8002160 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800210e:	2b01      	cmp	r3, #1
 8002110:	d126      	bne.n	8002160 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002116:	2b01      	cmp	r3, #1
 8002118:	d122      	bne.n	8002160 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800211a:	230c      	movs	r3, #12
 800211c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800211e:	e014      	b.n	800214a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4a42      	ldr	r2, [pc, #264]	; (800222c <ADC_ConversionStop+0x158>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d90d      	bls.n	8002144 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e06e      	b.n	8002222 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	3301      	adds	r3, #1
 8002148:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d1e3      	bne.n	8002120 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2240      	movs	r2, #64	; 0x40
 800215e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b60      	cmp	r3, #96	; 0x60
 8002164:	d015      	beq.n	8002192 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d10e      	bne.n	8002192 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0210 	orr.w	r2, r2, #16
 8002190:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d015      	beq.n	80021c4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d10e      	bne.n	80021c4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b60      	cmp	r3, #96	; 0x60
 80021c8:	d004      	beq.n	80021d4 <ADC_ConversionStop+0x100>
 80021ca:	2b6c      	cmp	r3, #108	; 0x6c
 80021cc:	d105      	bne.n	80021da <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021ce:	230c      	movs	r3, #12
 80021d0:	617b      	str	r3, [r7, #20]
        break;
 80021d2:	e005      	b.n	80021e0 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021d4:	2308      	movs	r3, #8
 80021d6:	617b      	str	r3, [r7, #20]
        break;
 80021d8:	e002      	b.n	80021e0 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021da:	2304      	movs	r3, #4
 80021dc:	617b      	str	r3, [r7, #20]
        break;
 80021de:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021e0:	f7fe fef4 	bl	8000fcc <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80021e6:	e014      	b.n	8002212 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021e8:	f7fe fef0 	bl	8000fcc <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b0b      	cmp	r3, #11
 80021f4:	d90d      	bls.n	8002212 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f043 0210 	orr.w	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e007      	b.n	8002222 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e3      	bne.n	80021e8 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	000993ff 	.word	0x000993ff

08002230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800224c:	4013      	ands	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002262:	4a04      	ldr	r2, [pc, #16]	; (8002274 <__NVIC_SetPriorityGrouping+0x44>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	60d3      	str	r3, [r2, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <__NVIC_GetPriorityGrouping+0x18>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0307 	and.w	r3, r3, #7
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	db0b      	blt.n	80022be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4907      	ldr	r1, [pc, #28]	; (80022cc <__NVIC_EnableIRQ+0x38>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2001      	movs	r0, #1
 80022b6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100

080022d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db0a      	blt.n	80022fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	490c      	ldr	r1, [pc, #48]	; (800231c <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f8:	e00a      	b.n	8002310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	0112      	lsls	r2, r2, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	440b      	add	r3, r1
 800230e:	761a      	strb	r2, [r3, #24]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f1c3 0307 	rsb	r3, r3, #7
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf28      	it	cs
 8002342:	2304      	movcs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3304      	adds	r3, #4
 800234a:	2b06      	cmp	r3, #6
 800234c:	d902      	bls.n	8002354 <NVIC_EncodePriority+0x30>
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3b03      	subs	r3, #3
 8002352:	e000      	b.n	8002356 <NVIC_EncodePriority+0x32>
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	f04f 32ff 	mov.w	r2, #4294967295
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	401a      	ands	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43d9      	mvns	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239c:	d301      	bcc.n	80023a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239e:	2301      	movs	r3, #1
 80023a0:	e00f      	b.n	80023c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <SysTick_Config+0x40>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023aa:	210f      	movs	r1, #15
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7ff ff8e 	bl	80022d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SysTick_Config+0x40>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SysTick_Config+0x40>)
 80023bc:	2207      	movs	r2, #7
 80023be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	e000e010 	.word	0xe000e010

080023d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff29 	bl	8002230 <__NVIC_SetPriorityGrouping>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b086      	sub	sp, #24
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f8:	f7ff ff3e 	bl	8002278 <__NVIC_GetPriorityGrouping>
 80023fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f7ff ff8e 	bl	8002324 <NVIC_EncodePriority>
 8002408:	4602      	mov	r2, r0
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff5d 	bl	80022d0 <__NVIC_SetPriority>
}
 8002416:	bf00      	nop
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff31 	bl	8002294 <__NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffa2 	bl	800238c <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e037      	b.n	80024d8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800247e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002482:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800248c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f97a 	bl	80027b4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}  
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_DMA_Start_IT+0x20>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e04a      	b.n	8002596 <HAL_DMA_Start_IT+0xb6>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800250e:	2b01      	cmp	r3, #1
 8002510:	d13a      	bne.n	8002588 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f90d 	bl	8002756 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 020e 	orr.w	r2, r2, #14
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e00f      	b.n	8002576 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 020a 	orr.w	r2, r2, #10
 8002564:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0204 	bic.w	r2, r2, #4
 8002574:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e005      	b.n	8002594 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002594:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d008      	beq.n	80025c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2204      	movs	r2, #4
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e020      	b.n	8002604 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 020e 	bic.w	r2, r2, #14
 80025d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2204      	movs	r2, #4
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d024      	beq.n	8002682 <HAL_DMA_IRQHandler+0x72>
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01f      	beq.n	8002682 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	2104      	movs	r1, #4
 800266a:	fa01 f202 	lsl.w	r2, r1, r2
 800266e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d06a      	beq.n	800274e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002680:	e065      	b.n	800274e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2202      	movs	r2, #2
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d02c      	beq.n	80026ec <HAL_DMA_IRQHandler+0xdc>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d027      	beq.n	80026ec <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10b      	bne.n	80026c2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 020a 	bic.w	r2, r2, #10
 80026b8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	2102      	movs	r1, #2
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d035      	beq.n	800274e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80026ea:	e030      	b.n	800274e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2208      	movs	r2, #8
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d028      	beq.n	800274e <HAL_DMA_IRQHandler+0x13e>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d023      	beq.n	800274e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 020e 	bic.w	r2, r2, #14
 8002714:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f202 	lsl.w	r2, r1, r2
 8002724:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
    }
  }
}  
 800274c:	e7ff      	b.n	800274e <HAL_DMA_IRQHandler+0x13e>
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b10      	cmp	r3, #16
 8002782:	d108      	bne.n	8002796 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002794:	e007      	b.n	80027a6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	60da      	str	r2, [r3, #12]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <DMA_CalcBaseAndBitshift+0x60>)
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d80f      	bhi.n	80027e8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <DMA_CalcBaseAndBitshift+0x64>)
 80027d0:	4413      	add	r3, r2
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <DMA_CalcBaseAndBitshift+0x68>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	009a      	lsls	r2, r3, #2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <DMA_CalcBaseAndBitshift+0x6c>)
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80027e6:	e00e      	b.n	8002806 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <DMA_CalcBaseAndBitshift+0x70>)
 80027f0:	4413      	add	r3, r2
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <DMA_CalcBaseAndBitshift+0x68>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <DMA_CalcBaseAndBitshift+0x74>)
 8002804:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40020407 	.word	0x40020407
 8002818:	bffdfff8 	.word	0xbffdfff8
 800281c:	cccccccd 	.word	0xcccccccd
 8002820:	40020000 	.word	0x40020000
 8002824:	bffdfbf8 	.word	0xbffdfbf8
 8002828:	40020400 	.word	0x40020400

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283a:	e154      	b.n	8002ae6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8146 	beq.w	8002ae0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x38>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b12      	cmp	r3, #18
 8002862:	d123      	bne.n	80028ac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	6939      	ldr	r1, [r7, #16]
 80028a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d00b      	beq.n	8002900 <HAL_GPIO_Init+0xd4>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d007      	beq.n	8002900 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b12      	cmp	r3, #18
 80028fe:	d130      	bne.n	8002962 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002936:	2201      	movs	r2, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0201 	and.w	r2, r3, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80a0 	beq.w	8002ae0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a0:	4b58      	ldr	r3, [pc, #352]	; (8002b04 <HAL_GPIO_Init+0x2d8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <HAL_GPIO_Init+0x2d8>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x2d8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029b8:	4a53      	ldr	r2, [pc, #332]	; (8002b08 <HAL_GPIO_Init+0x2dc>)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029e2:	d019      	beq.n	8002a18 <HAL_GPIO_Init+0x1ec>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <HAL_GPIO_Init+0x2e0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <HAL_GPIO_Init+0x1e8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_GPIO_Init+0x2e4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00d      	beq.n	8002a10 <HAL_GPIO_Init+0x1e4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <HAL_GPIO_Init+0x1e0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a46      	ldr	r2, [pc, #280]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_GPIO_Init+0x1dc>
 8002a04:	2304      	movs	r3, #4
 8002a06:	e008      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a08:	2305      	movs	r3, #5
 8002a0a:	e006      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e004      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e002      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_GPIO_Init+0x1ee>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	f002 0203 	and.w	r2, r2, #3
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4093      	lsls	r3, r2
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a2a:	4937      	ldr	r1, [pc, #220]	; (8002b08 <HAL_GPIO_Init+0x2dc>)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5c:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a86:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8c:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ada:	4a10      	ldr	r2, [pc, #64]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f47f aea3 	bne.w	800283c <HAL_GPIO_Init+0x10>
  }
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	48000800 	.word	0x48000800
 8002b14:	48000c00 	.word	0x48000c00
 8002b18:	48001000 	.word	0x48001000
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e081      	b.n	8002c66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe f812 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	e006      	b.n	8002bd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d104      	bne.n	8002bea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	ea42 0103 	orr.w	r1, r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	021a      	lsls	r2, r3, #8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69d9      	ldr	r1, [r3, #28]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	817b      	strh	r3, [r7, #10]
 8002c82:	460b      	mov	r3, r1
 8002c84:	813b      	strh	r3, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	f040 80f9 	bne.w	8002e8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_I2C_Mem_Write+0x34>
 8002c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0ed      	b.n	8002e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2C_Mem_Write+0x4e>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e0e6      	b.n	8002e8c <HAL_I2C_Mem_Write+0x21c>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cc6:	f7fe f981 	bl	8000fcc <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2319      	movs	r3, #25
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f955 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0d1      	b.n	8002e8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2221      	movs	r2, #33	; 0x21
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2240      	movs	r2, #64	; 0x40
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a3a      	ldr	r2, [r7, #32]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d10:	88f8      	ldrh	r0, [r7, #6]
 8002d12:	893a      	ldrh	r2, [r7, #8]
 8002d14:	8979      	ldrh	r1, [r7, #10]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f8b9 	bl	8002e98 <I2C_RequestMemoryWrite>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0a9      	b.n	8002e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2bff      	cmp	r3, #255	; 0xff
 8002d40:	d90e      	bls.n	8002d60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa37 	bl	80031cc <I2C_TransferConfig>
 8002d5e:	e00f      	b.n	8002d80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa26 	bl	80031cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f93f 	bl	8003008 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e07b      	b.n	8002e8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d034      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x1c8>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d130      	bne.n	8002e38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f8d1 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e04d      	b.n	8002e8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2bff      	cmp	r3, #255	; 0xff
 8002df8:	d90e      	bls.n	8002e18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	22ff      	movs	r2, #255	; 0xff
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	8979      	ldrh	r1, [r7, #10]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f9db 	bl	80031cc <I2C_TransferConfig>
 8002e16:	e00f      	b.n	8002e38 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	8979      	ldrh	r1, [r7, #10]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f9ca 	bl	80031cc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d19e      	bne.n	8002d80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f91e 	bl	8003088 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e01a      	b.n	8002e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_I2C_Mem_Write+0x224>)
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	fe00e800 	.word	0xfe00e800

08002e98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	817b      	strh	r3, [r7, #10]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	813b      	strh	r3, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	8979      	ldrh	r1, [r7, #10]
 8002eb8:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <I2C_RequestMemoryWrite+0xa4>)
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f983 	bl	80031cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f89c 	bl	8003008 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e02c      	b.n	8002f34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee0:	893b      	ldrh	r3, [r7, #8]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8002eea:	e015      	b.n	8002f18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002eec:	893b      	ldrh	r3, [r7, #8]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f882 	bl	8003008 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e012      	b.n	8002f34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0e:	893b      	ldrh	r3, [r7, #8]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f830 	bl	8002f88 <I2C_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	80002000 	.word	0x80002000

08002f40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d103      	bne.n	8002f5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d007      	beq.n	8002f7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	619a      	str	r2, [r3, #24]
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f98:	e022      	b.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d01e      	beq.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fe f813 	bl	8000fcc <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d113      	bne.n	8002fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e00f      	b.n	8003000 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d0cd      	beq.n	8002f9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003014:	e02c      	b.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f870 	bl	8003100 <I2C_IsAcknowledgeFailed>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e02a      	b.n	8003080 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d01e      	beq.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7fd ffcb 	bl	8000fcc <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e007      	b.n	8003080 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d1cb      	bne.n	8003016 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003094:	e028      	b.n	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f830 	bl	8003100 <I2C_IsAcknowledgeFailed>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e026      	b.n	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030aa:	f7fd ff8f 	bl	8000fcc <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d113      	bne.n	80030e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e007      	b.n	80030f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d1cf      	bne.n	8003096 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d151      	bne.n	80031be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800311a:	e022      	b.n	8003162 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d01e      	beq.n	8003162 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fd ff52 	bl	8000fcc <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <I2C_IsAcknowledgeFailed+0x3a>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d113      	bne.n	8003162 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e02e      	b.n	80031c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	d1d5      	bne.n	800311c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2210      	movs	r2, #16
 8003176:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2220      	movs	r2, #32
 800317e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7ff fedd 	bl	8002f40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003192:	400b      	ands	r3, r1
 8003194:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	fe00e800 	.word	0xfe00e800

080031cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	4613      	mov	r3, r2
 80031dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	0d5b      	lsrs	r3, r3, #21
 80031e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <I2C_TransferConfig+0x58>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	43db      	mvns	r3, r3
 80031f2:	ea02 0103 	and.w	r1, r2, r3
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031fc:	7a7b      	ldrb	r3, [r7, #9]
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	431a      	orrs	r2, r3
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	03ff63ff 	.word	0x03ff63ff

08003228 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b20      	cmp	r3, #32
 800323c:	d138      	bne.n	80032b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003248:	2302      	movs	r3, #2
 800324a:	e032      	b.n	80032b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2224      	movs	r2, #36	; 0x24
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800327a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d139      	bne.n	8003348 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032de:	2302      	movs	r3, #2
 80032e0:	e033      	b.n	800334a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2224      	movs	r2, #36	; 0x24
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003310:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6013      	str	r3, [r2, #0]
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40007000 	.word	0x40007000

08003378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800337e:	af00      	add	r7, sp, #0
 8003380:	1d3b      	adds	r3, r7, #4
 8003382:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f000 bef4 	b.w	800417a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 816a 	beq.w	8003676 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033a2:	4bb3      	ldr	r3, [pc, #716]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d00c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033ae:	4bb0      	ldr	r3, [pc, #704]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d159      	bne.n	800346e <HAL_RCC_OscConfig+0xf6>
 80033ba:	4bad      	ldr	r3, [pc, #692]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d152      	bne.n	800346e <HAL_RCC_OscConfig+0xf6>
 80033c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80033dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	fab3 f383 	clz	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d102      	bne.n	80033fa <HAL_RCC_OscConfig+0x82>
 80033f4:	4b9e      	ldr	r3, [pc, #632]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0xae>
 80033fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033fe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800340e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003412:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003416:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003422:	4b93      	ldr	r3, [pc, #588]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800342a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800342e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003432:	fa92 f2a2 	rbit	r2, r2
 8003436:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800343a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800343e:	fab2 f282 	clz	r2, r2
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	f042 0220 	orr.w	r2, r2, #32
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f002 021f 	and.w	r2, r2, #31
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f202 	lsl.w	r2, r1, r2
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 810c 	beq.w	8003674 <HAL_RCC_OscConfig+0x2fc>
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 8106 	bne.w	8003674 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f000 be86 	b.w	800417a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d106      	bne.n	8003488 <HAL_RCC_OscConfig+0x110>
 800347a:	4b7d      	ldr	r3, [pc, #500]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a7c      	ldr	r2, [pc, #496]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e030      	b.n	80034ea <HAL_RCC_OscConfig+0x172>
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x134>
 8003492:	4b77      	ldr	r3, [pc, #476]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a76      	ldr	r2, [pc, #472]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 8003498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b74      	ldr	r3, [pc, #464]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a73      	ldr	r2, [pc, #460]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e01e      	b.n	80034ea <HAL_RCC_OscConfig+0x172>
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCC_OscConfig+0x15a>
 80034b8:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6c      	ldr	r2, [pc, #432]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a69      	ldr	r2, [pc, #420]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e00b      	b.n	80034ea <HAL_RCC_OscConfig+0x172>
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a66      	ldr	r2, [pc, #408]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b64      	ldr	r3, [pc, #400]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a63      	ldr	r2, [pc, #396]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ea:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f023 020f 	bic.w	r2, r3, #15
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	495d      	ldr	r1, [pc, #372]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d059      	beq.n	80035bc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fd fd60 	bl	8000fcc <HAL_GetTick>
 800350c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003512:	f7fd fd5b 	bl	8000fcc <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d902      	bls.n	8003528 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	f000 be29 	b.w	800417a <HAL_RCC_OscConfig+0xe02>
 8003528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800352c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800353c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d102      	bne.n	800355a <HAL_RCC_OscConfig+0x1e2>
 8003554:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x20e>
 800355a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800356e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003572:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003576:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003582:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800358a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800358e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003592:	fa92 f2a2 	rbit	r2, r2
 8003596:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800359a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800359e:	fab2 f282 	clz	r2, r2
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	f042 0220 	orr.w	r2, r2, #32
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f002 021f 	and.w	r2, r2, #31
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0ab      	beq.n	8003512 <HAL_RCC_OscConfig+0x19a>
 80035ba:	e05c      	b.n	8003676 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fd fd06 	bl	8000fcc <HAL_GetTick>
 80035c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c6:	f7fd fd01 	bl	8000fcc <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d902      	bls.n	80035dc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	f000 bdcf 	b.w	800417a <HAL_RCC_OscConfig+0xe02>
 80035dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80035f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d102      	bne.n	800360e <HAL_RCC_OscConfig+0x296>
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	e015      	b.n	800363a <HAL_RCC_OscConfig+0x2c2>
 800360e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003612:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003626:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800362a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003636:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <HAL_RCC_OscConfig+0x2f8>)
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800363e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003642:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003646:	fa92 f2a2 	rbit	r2, r2
 800364a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800364e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003652:	fab2 f282 	clz	r2, r2
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f042 0220 	orr.w	r2, r2, #32
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f002 021f 	and.w	r2, r2, #31
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1ab      	bne.n	80035c6 <HAL_RCC_OscConfig+0x24e>
 800366e:	e002      	b.n	8003676 <HAL_RCC_OscConfig+0x2fe>
 8003670:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 816f 	beq.w	8003964 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003686:	4bd0      	ldr	r3, [pc, #832]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003692:	4bcd      	ldr	r3, [pc, #820]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	d16c      	bne.n	8003778 <HAL_RCC_OscConfig+0x400>
 800369e:	4bca      	ldr	r3, [pc, #808]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d166      	bne.n	8003778 <HAL_RCC_OscConfig+0x400>
 80036aa:	2302      	movs	r3, #2
 80036ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80036bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c0:	fab3 f383 	clz	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <HAL_RCC_OscConfig+0x362>
 80036d4:	4bbc      	ldr	r3, [pc, #752]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	e013      	b.n	8003702 <HAL_RCC_OscConfig+0x38a>
 80036da:	2302      	movs	r3, #2
 80036dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80036ec:	2302      	movs	r3, #2
 80036ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80036f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80036fe:	4bb2      	ldr	r3, [pc, #712]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2202      	movs	r2, #2
 8003704:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003708:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800370c:	fa92 f2a2 	rbit	r2, r2
 8003710:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003714:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003718:	fab2 f282 	clz	r2, r2
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f042 0220 	orr.w	r2, r2, #32
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f002 021f 	and.w	r2, r2, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_RCC_OscConfig+0x3cc>
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d002      	beq.n	8003744 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f000 bd1b 	b.w	800417a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4ba0      	ldr	r3, [pc, #640]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	21f8      	movs	r1, #248	; 0xf8
 8003754:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800375c:	fa91 f1a1 	rbit	r1, r1
 8003760:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003764:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003768:	fab1 f181 	clz	r1, r1
 800376c:	b2c9      	uxtb	r1, r1
 800376e:	408b      	lsls	r3, r1
 8003770:	4995      	ldr	r1, [pc, #596]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003776:	e0f5      	b.n	8003964 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8085 	beq.w	800388e <HAL_RCC_OscConfig+0x516>
 8003784:	2301      	movs	r3, #1
 8003786:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003796:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	461a      	mov	r2, r3
 80037ac:	2301      	movs	r3, #1
 80037ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fd fc0c 	bl	8000fcc <HAL_GetTick>
 80037b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ba:	f7fd fc07 	bl	8000fcc <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d902      	bls.n	80037d0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	f000 bcd5 	b.w	800417a <HAL_RCC_OscConfig+0xe02>
 80037d0:	2302      	movs	r3, #2
 80037d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80037e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_RCC_OscConfig+0x488>
 80037fa:	4b73      	ldr	r3, [pc, #460]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	e013      	b.n	8003828 <HAL_RCC_OscConfig+0x4b0>
 8003800:	2302      	movs	r3, #2
 8003802:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003812:	2302      	movs	r3, #2
 8003814:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003818:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003824:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	2202      	movs	r2, #2
 800382a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800382e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003832:	fa92 f2a2 	rbit	r2, r2
 8003836:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800383a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800383e:	fab2 f282 	clz	r2, r2
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f042 0220 	orr.w	r2, r2, #32
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	f002 021f 	and.w	r2, r2, #31
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0af      	beq.n	80037ba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385a:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	21f8      	movs	r1, #248	; 0xf8
 800386a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003872:	fa91 f1a1 	rbit	r1, r1
 8003876:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800387a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800387e:	fab1 f181 	clz	r1, r1
 8003882:	b2c9      	uxtb	r1, r1
 8003884:	408b      	lsls	r3, r1
 8003886:	4950      	ldr	r1, [pc, #320]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e06a      	b.n	8003964 <HAL_RCC_OscConfig+0x5ec>
 800388e:	2301      	movs	r3, #1
 8003890:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80038a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	2300      	movs	r3, #0
 80038b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fd fb87 	bl	8000fcc <HAL_GetTick>
 80038be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e00a      	b.n	80038da <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fd fb82 	bl	8000fcc <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d902      	bls.n	80038da <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	f000 bc50 	b.w	800417a <HAL_RCC_OscConfig+0xe02>
 80038da:	2302      	movs	r3, #2
 80038dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80038ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d102      	bne.n	800390a <HAL_RCC_OscConfig+0x592>
 8003904:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	e013      	b.n	8003932 <HAL_RCC_OscConfig+0x5ba>
 800390a:	2302      	movs	r3, #2
 800390c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800391c:	2302      	movs	r3, #2
 800391e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003922:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_RCC_OscConfig+0x650>)
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	2202      	movs	r2, #2
 8003934:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003938:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800393c:	fa92 f2a2 	rbit	r2, r2
 8003940:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003944:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003948:	fab2 f282 	clz	r2, r2
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	f042 0220 	orr.w	r2, r2, #32
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f002 021f 	and.w	r2, r2, #31
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f202 	lsl.w	r2, r1, r2
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1af      	bne.n	80038c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80da 	beq.w	8003b28 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d069      	beq.n	8003a52 <HAL_RCC_OscConfig+0x6da>
 800397e:	2301      	movs	r3, #1
 8003980:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_OscConfig+0x654>)
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	461a      	mov	r2, r3
 80039a4:	2301      	movs	r3, #1
 80039a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a8:	f7fd fb10 	bl	8000fcc <HAL_GetTick>
 80039ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b0:	e00e      	b.n	80039d0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b2:	f7fd fb0b 	bl	8000fcc <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d906      	bls.n	80039d0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e3d9      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	10908120 	.word	0x10908120
 80039d0:	2302      	movs	r3, #2
 80039d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80039e6:	2202      	movs	r2, #2
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	fa93 f2a3 	rbit	r2, r3
 80039f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80039fe:	2202      	movs	r2, #2
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003a10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	4ba5      	ldr	r3, [pc, #660]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	6019      	str	r1, [r3, #0]
 8003a1e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f1a3 	rbit	r1, r3
 8003a28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a2c:	6019      	str	r1, [r3, #0]
  return result;
 8003a2e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0b0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x63a>
 8003a50:	e06a      	b.n	8003b28 <HAL_RCC_OscConfig+0x7b0>
 8003a52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a68:	601a      	str	r2, [r3, #0]
  return result;
 8003a6a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a6e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a70:	fab3 f383 	clz	r3, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b8c      	ldr	r3, [pc, #560]	; (8003cac <HAL_RCC_OscConfig+0x934>)
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2300      	movs	r3, #0
 8003a82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fd faa2 	bl	8000fcc <HAL_GetTick>
 8003a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	e009      	b.n	8003aa2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8e:	f7fd fa9d 	bl	8000fcc <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e36b      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
 8003aa2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f2a3 	rbit	r2, r3
 8003ab4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003abe:	2202      	movs	r2, #2
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	fa93 f2a3 	rbit	r2, r3
 8003ae4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ae8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aea:	4b6f      	ldr	r3, [pc, #444]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003af2:	2102      	movs	r1, #2
 8003af4:	6019      	str	r1, [r3, #0]
 8003af6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	fa93 f1a3 	rbit	r1, r3
 8003b00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b04:	6019      	str	r1, [r3, #0]
  return result;
 8003b06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1b2      	bne.n	8003a8e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8158 	beq.w	8003de8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d112      	bne.n	8003b70 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	4b57      	ldr	r3, [pc, #348]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b54:	61d3      	str	r3, [r2, #28]
 8003b56:	4b54      	ldr	r3, [pc, #336]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f107 0308 	add.w	r3, r7, #8
 8003b68:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	4b4f      	ldr	r3, [pc, #316]	; (8003cb0 <HAL_RCC_OscConfig+0x938>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11a      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7c:	4b4c      	ldr	r3, [pc, #304]	; (8003cb0 <HAL_RCC_OscConfig+0x938>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a4b      	ldr	r2, [pc, #300]	; (8003cb0 <HAL_RCC_OscConfig+0x938>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b86:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b88:	f7fd fa20 	bl	8000fcc <HAL_GetTick>
 8003b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	e009      	b.n	8003ba6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fd fa1b 	bl	8000fcc <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e2e9      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <HAL_RCC_OscConfig+0x938>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0ef      	beq.n	8003b92 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x852>
 8003bbc:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a39      	ldr	r2, [pc, #228]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	e02f      	b.n	8003c2a <HAL_RCC_OscConfig+0x8b2>
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10c      	bne.n	8003bee <HAL_RCC_OscConfig+0x876>
 8003bd4:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6213      	str	r3, [r2, #32]
 8003bec:	e01d      	b.n	8003c2a <HAL_RCC_OscConfig+0x8b2>
 8003bee:	1d3b      	adds	r3, r7, #4
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x89a>
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a2a      	ldr	r2, [pc, #168]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a27      	ldr	r2, [pc, #156]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x8b2>
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a24      	ldr	r2, [pc, #144]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6213      	str	r3, [r2, #32]
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d06b      	beq.n	8003d0c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c34:	f7fd f9ca 	bl	8000fcc <HAL_GetTick>
 8003c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	e00b      	b.n	8003c56 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd f9c5 	bl	8000fcc <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e291      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
 8003c56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	fa93 f2a3 	rbit	r2, r3
 8003c68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c72:	2202      	movs	r2, #2
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	fa93 f2a3 	rbit	r2, r3
 8003c80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c84:	601a      	str	r2, [r3, #0]
  return result;
 8003c86:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f043 0302 	orr.w	r3, r3, #2
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d109      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x93c>
 8003ca0:	4b01      	ldr	r3, [pc, #4]	; (8003ca8 <HAL_RCC_OscConfig+0x930>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	e014      	b.n	8003cd0 <HAL_RCC_OscConfig+0x958>
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	10908120 	.word	0x10908120
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003cb8:	2202      	movs	r2, #2
 8003cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	fa93 f2a3 	rbit	r2, r3
 8003cc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	4bbb      	ldr	r3, [pc, #748]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	6011      	str	r1, [r2, #0]
 8003cd8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	fa92 f1a2 	rbit	r1, r2
 8003ce2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ce6:	6011      	str	r1, [r2, #0]
  return result;
 8003ce8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	fab2 f282 	clz	r2, r2
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	f002 021f 	and.w	r2, r2, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d099      	beq.n	8003c3e <HAL_RCC_OscConfig+0x8c6>
 8003d0a:	e063      	b.n	8003dd4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0c:	f7fd f95e 	bl	8000fcc <HAL_GetTick>
 8003d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d14:	e00b      	b.n	8003d2e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd f959 	bl	8000fcc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e225      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
 8003d2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d32:	2202      	movs	r2, #2
 8003d34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	fa93 f2a3 	rbit	r2, r3
 8003d58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d5c:	601a      	str	r2, [r3, #0]
  return result;
 8003d5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003d62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d102      	bne.n	8003d7e <HAL_RCC_OscConfig+0xa06>
 8003d78:	4b90      	ldr	r3, [pc, #576]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	e00d      	b.n	8003d9a <HAL_RCC_OscConfig+0xa22>
 8003d7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d82:	2202      	movs	r2, #2
 8003d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	fa93 f2a3 	rbit	r2, r3
 8003d90:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	4b89      	ldr	r3, [pc, #548]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d9e:	2102      	movs	r1, #2
 8003da0:	6011      	str	r1, [r2, #0]
 8003da2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	fa92 f1a2 	rbit	r1, r2
 8003dac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003db0:	6011      	str	r1, [r2, #0]
  return result;
 8003db2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	fab2 f282 	clz	r2, r2
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	f002 021f 	and.w	r2, r2, #31
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f202 	lsl.w	r2, r1, r2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1a0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dd4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ddc:	4b77      	ldr	r3, [pc, #476]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	4a76      	ldr	r2, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 81c2 	beq.w	8004178 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df4:	4b71      	ldr	r3, [pc, #452]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	f000 819c 	beq.w	800413a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	f040 8114 	bne.w	8004036 <HAL_RCC_OscConfig+0xcbe>
 8003e0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	fa93 f2a3 	rbit	r2, r3
 8003e22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e26:	601a      	str	r2, [r3, #0]
  return result;
 8003e28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003e2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2300      	movs	r3, #0
 8003e42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fd f8c2 	bl	8000fcc <HAL_GetTick>
 8003e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fd f8bd 	bl	8000fcc <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e18b      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
 8003e62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f2a3 	rbit	r2, r3
 8003e76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e7a:	601a      	str	r2, [r3, #0]
  return result;
 8003e7c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d102      	bne.n	8003e9c <HAL_RCC_OscConfig+0xb24>
 8003e96:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	e01b      	b.n	8003ed4 <HAL_RCC_OscConfig+0xb5c>
 8003e9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ea0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	fa93 f2a3 	rbit	r2, r3
 8003eb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	fa93 f2a3 	rbit	r2, r3
 8003eca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ed8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003edc:	6011      	str	r1, [r2, #0]
 8003ede:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	fa92 f1a2 	rbit	r1, r2
 8003ee8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003eec:	6011      	str	r1, [r2, #0]
  return result;
 8003eee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	fab2 f282 	clz	r2, r2
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	f042 0220 	orr.w	r2, r2, #32
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	f002 021f 	and.w	r2, r2, #31
 8003f04:	2101      	movs	r1, #1
 8003f06:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d19e      	bne.n	8003e4e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f10:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	4925      	ldr	r1, [pc, #148]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
 8003f2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	fa93 f2a3 	rbit	r2, r3
 8003f40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f44:	601a      	str	r2, [r3, #0]
  return result;
 8003f46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f4a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4c:	fab3 f383 	clz	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2301      	movs	r3, #1
 8003f60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fd f833 	bl	8000fcc <HAL_GetTick>
 8003f66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f6a:	e009      	b.n	8003f80 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd f82e 	bl	8000fcc <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e0fc      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
 8003f80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f2a3 	rbit	r2, r3
 8003f94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f98:	601a      	str	r2, [r3, #0]
  return result;
 8003f9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xc48>
 8003fb4:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <HAL_RCC_OscConfig+0xc44>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	e01e      	b.n	8003ff8 <HAL_RCC_OscConfig+0xc80>
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	fa93 f2a3 	rbit	r2, r3
 8003fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	fa93 f2a3 	rbit	r2, r3
 8003fee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCC_OscConfig+0xe0c>)
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ffc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004000:	6011      	str	r1, [r2, #0]
 8004002:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	fa92 f1a2 	rbit	r1, r2
 800400c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004010:	6011      	str	r1, [r2, #0]
  return result;
 8004012:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	fab2 f282 	clz	r2, r2
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	f042 0220 	orr.w	r2, r2, #32
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	f002 021f 	and.w	r2, r2, #31
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f202 	lsl.w	r2, r1, r2
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d09b      	beq.n	8003f6c <HAL_RCC_OscConfig+0xbf4>
 8004034:	e0a0      	b.n	8004178 <HAL_RCC_OscConfig+0xe00>
 8004036:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800403a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800403e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	fa93 f2a3 	rbit	r2, r3
 800404a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800404e:	601a      	str	r2, [r3, #0]
  return result;
 8004050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004054:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004060:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	461a      	mov	r2, r3
 8004068:	2300      	movs	r3, #0
 800406a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fc ffae 	bl	8000fcc <HAL_GetTick>
 8004070:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004074:	e009      	b.n	800408a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004076:	f7fc ffa9 	bl	8000fcc <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e077      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
 800408a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800408e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	fa93 f2a3 	rbit	r2, r3
 800409e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a2:	601a      	str	r2, [r3, #0]
  return result;
 80040a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d102      	bne.n	80040c4 <HAL_RCC_OscConfig+0xd4c>
 80040be:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_RCC_OscConfig+0xe0c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	e01b      	b.n	80040fc <HAL_RCC_OscConfig+0xd84>
 80040c4:	f107 0320 	add.w	r3, r7, #32
 80040c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	f107 0320 	add.w	r3, r7, #32
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	fa93 f2a3 	rbit	r2, r3
 80040d8:	f107 031c 	add.w	r3, r7, #28
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f107 0318 	add.w	r3, r7, #24
 80040e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f107 0318 	add.w	r3, r7, #24
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	fa93 f2a3 	rbit	r2, r3
 80040f2:	f107 0314 	add.w	r3, r7, #20
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCC_OscConfig+0xe0c>)
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f107 0210 	add.w	r2, r7, #16
 8004100:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004104:	6011      	str	r1, [r2, #0]
 8004106:	f107 0210 	add.w	r2, r7, #16
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	fa92 f1a2 	rbit	r1, r2
 8004110:	f107 020c 	add.w	r2, r7, #12
 8004114:	6011      	str	r1, [r2, #0]
  return result;
 8004116:	f107 020c 	add.w	r2, r7, #12
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	fab2 f282 	clz	r2, r2
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f042 0220 	orr.w	r2, r2, #32
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	f002 021f 	and.w	r2, r2, #31
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	4013      	ands	r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d19e      	bne.n	8004076 <HAL_RCC_OscConfig+0xcfe>
 8004138:	e01e      	b.n	8004178 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e018      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <HAL_RCC_OscConfig+0xe0c>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004150:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004154:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	429a      	cmp	r2, r3
 8004160:	d108      	bne.n	8004174 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004162:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000

08004188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b09e      	sub	sp, #120	; 0x78
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e162      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b90      	ldr	r3, [pc, #576]	; (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d910      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b8d      	ldr	r3, [pc, #564]	; (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 0207 	bic.w	r2, r3, #7
 80041b6:	498b      	ldr	r1, [pc, #556]	; (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b89      	ldr	r3, [pc, #548]	; (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e14a      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b82      	ldr	r3, [pc, #520]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	497f      	ldr	r1, [pc, #508]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80dc 	beq.w	80043b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d13c      	bne.n	800427e <HAL_RCC_ClockConfig+0xf6>
 8004204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004208:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d102      	bne.n	800422e <HAL_RCC_ClockConfig+0xa6>
 8004228:	4b6f      	ldr	r3, [pc, #444]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	e00f      	b.n	800424e <HAL_RCC_ClockConfig+0xc6>
 800422e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004232:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	667b      	str	r3, [r7, #100]	; 0x64
 800423c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004240:	663b      	str	r3, [r7, #96]	; 0x60
 8004242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800424a:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004252:	65ba      	str	r2, [r7, #88]	; 0x58
 8004254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004256:	fa92 f2a2 	rbit	r2, r2
 800425a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800425c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800425e:	fab2 f282 	clz	r2, r2
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f042 0220 	orr.w	r2, r2, #32
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	f002 021f 	and.w	r2, r2, #31
 800426e:	2101      	movs	r1, #1
 8004270:	fa01 f202 	lsl.w	r2, r1, r2
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d17b      	bne.n	8004372 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0f3      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d13c      	bne.n	8004300 <HAL_RCC_ClockConfig+0x178>
 8004286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800428a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d102      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x128>
 80042aa:	4b4f      	ldr	r3, [pc, #316]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	e00f      	b.n	80042d0 <HAL_RCC_ClockConfig+0x148>
 80042b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
 80042be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c2:	643b      	str	r3, [r7, #64]	; 0x40
 80042c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042cc:	4b46      	ldr	r3, [pc, #280]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80042d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042d8:	fa92 f2a2 	rbit	r2, r2
 80042dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e0:	fab2 f282 	clz	r2, r2
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	f002 021f 	and.w	r2, r2, #31
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d13a      	bne.n	8004372 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b2      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
 8004300:	2302      	movs	r3, #2
 8004302:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	e00d      	b.n	8004344 <HAL_RCC_ClockConfig+0x1bc>
 8004328:	2302      	movs	r3, #2
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	2302      	movs	r3, #2
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2202      	movs	r2, #2
 8004346:	61ba      	str	r2, [r7, #24]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	fa92 f2a2 	rbit	r2, r2
 800434e:	617a      	str	r2, [r7, #20]
  return result;
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	fab2 f282 	clz	r2, r2
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f042 0220 	orr.w	r2, r2, #32
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	f002 021f 	and.w	r2, r2, #31
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e079      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	491a      	ldr	r1, [pc, #104]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004384:	f7fc fe22 	bl	8000fcc <HAL_GetTick>
 8004388:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438c:	f7fc fe1e 	bl	8000fcc <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e061      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 020c 	and.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1eb      	bne.n	800438c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d214      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 0207 	bic.w	r2, r3, #7
 80043ca:	4906      	ldr	r1, [pc, #24]	; (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d2:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d005      	beq.n	80043ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e040      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
 80043e4:	40022000 	.word	0x40022000
 80043e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f8:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	491a      	ldr	r1, [pc, #104]	; (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4912      	ldr	r1, [pc, #72]	; (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800442a:	f000 f829 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 800442e:	4601      	mov	r1, r0
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004438:	22f0      	movs	r2, #240	; 0xf0
 800443a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	fa92 f2a2 	rbit	r2, r2
 8004442:	60fa      	str	r2, [r7, #12]
  return result;
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	fab2 f282 	clz	r2, r2
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	40d3      	lsrs	r3, r2
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x2ec>)
 8004450:	5cd3      	ldrb	r3, [r2, r3]
 8004452:	fa21 f303 	lsr.w	r3, r1, r3
 8004456:	4a08      	ldr	r2, [pc, #32]	; (8004478 <HAL_RCC_ClockConfig+0x2f0>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <HAL_RCC_ClockConfig+0x2f4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fd70 	bl	8000f44 <HAL_InitTick>
  
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3778      	adds	r7, #120	; 0x78
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	08008470 	.word	0x08008470
 8004478:	20000000 	.word	0x20000000
 800447c:	20000004 	.word	0x20000004

08004480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b08b      	sub	sp, #44	; 0x2c
 8004484:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800449a:	4b29      	ldr	r3, [pc, #164]	; (8004540 <HAL_RCC_GetSysClockFreq+0xc0>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x30>
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x36>
 80044ae:	e03c      	b.n	800452a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044b2:	623b      	str	r3, [r7, #32]
      break;
 80044b4:	e03c      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	fa92 f2a2 	rbit	r2, r2
 80044c8:	607a      	str	r2, [r7, #4]
  return result;
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	fab2 f282 	clz	r2, r2
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	40d3      	lsrs	r3, r2
 80044d4:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044d6:	5cd3      	ldrb	r3, [r2, r3]
 80044d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	220f      	movs	r2, #15
 80044e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	fa92 f2a2 	rbit	r2, r2
 80044ec:	60fa      	str	r2, [r7, #12]
  return result;
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	fab2 f282 	clz	r2, r2
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	40d3      	lsrs	r3, r2
 80044f8:	4a14      	ldr	r2, [pc, #80]	; (800454c <HAL_RCC_GetSysClockFreq+0xcc>)
 80044fa:	5cd3      	ldrb	r3, [r2, r3]
 80044fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004508:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_RCC_GetSysClockFreq+0xc4>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
 8004518:	e004      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <HAL_RCC_GetSysClockFreq+0xd0>)
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	623b      	str	r3, [r7, #32]
      break;
 8004528:	e002      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCC_GetSysClockFreq+0xc4>)
 800452c:	623b      	str	r3, [r7, #32]
      break;
 800452e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004530:	6a3b      	ldr	r3, [r7, #32]
}
 8004532:	4618      	mov	r0, r3
 8004534:	372c      	adds	r7, #44	; 0x2c
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	007a1200 	.word	0x007a1200
 8004548:	08008480 	.word	0x08008480
 800454c:	08008490 	.word	0x08008490
 8004550:	003d0900 	.word	0x003d0900

08004554 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b092      	sub	sp, #72	; 0x48
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80d7 	beq.w	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004578:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10e      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004584:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	4a4a      	ldr	r2, [pc, #296]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458e:	61d3      	str	r3, [r2, #28]
 8004590:	4b48      	ldr	r3, [pc, #288]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	4b45      	ldr	r3, [pc, #276]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d118      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ae:	4b42      	ldr	r3, [pc, #264]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fc fd07 	bl	8000fcc <HAL_GetTick>
 80045be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c0:	e008      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c2:	f7fc fd03 	bl	8000fcc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	; 0x64
 80045ce:	d901      	bls.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e169      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045e0:	4b34      	ldr	r3, [pc, #208]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8084 	beq.w	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d07c      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800460a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800460e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	4b26      	ldr	r3, [pc, #152]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	461a      	mov	r2, r3
 800462a:	2301      	movs	r3, #1
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	fa93 f3a3 	rbit	r3, r3
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	461a      	mov	r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004652:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d04b      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fc fcb3 	bl	8000fcc <HAL_GetTick>
 8004666:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	e00a      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fc fcaf 	bl	8000fcc <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	; 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e113      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004680:	2302      	movs	r3, #2
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	fa93 f3a3 	rbit	r3, r3
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
 800468c:	2302      	movs	r3, #2
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	61fb      	str	r3, [r7, #28]
  return result;
 8004698:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d108      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80046ae:	4b01      	ldr	r3, [pc, #4]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	e00d      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40007000 	.word	0x40007000
 80046bc:	10908100 	.word	0x10908100
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	4b78      	ldr	r3, [pc, #480]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2202      	movs	r2, #2
 80046d2:	613a      	str	r2, [r7, #16]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	fa92 f2a2 	rbit	r2, r2
 80046da:	60fa      	str	r2, [r7, #12]
  return result;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	fab2 f282 	clz	r2, r2
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	f002 021f 	and.w	r2, r2, #31
 80046ee:	2101      	movs	r1, #1
 80046f0:	fa01 f202 	lsl.w	r2, r1, r2
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0b7      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046fa:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	496a      	ldr	r1, [pc, #424]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004708:	4313      	orrs	r3, r2
 800470a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800470c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004710:	2b01      	cmp	r3, #1
 8004712:	d105      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004714:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	4a65      	ldr	r2, [pc, #404]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800472c:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	f023 0203 	bic.w	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	495d      	ldr	r1, [pc, #372]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800474a:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4956      	ldr	r1, [pc, #344]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004768:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	494e      	ldr	r1, [pc, #312]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004786:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f023 0210 	bic.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4947      	ldr	r1, [pc, #284]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80047a4:	4b42      	ldr	r3, [pc, #264]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	493f      	ldr	r1, [pc, #252]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	f023 0220 	bic.w	r2, r3, #32
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4938      	ldr	r1, [pc, #224]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047e0:	4b33      	ldr	r3, [pc, #204]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	4930      	ldr	r1, [pc, #192]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047fe:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	4929      	ldr	r1, [pc, #164]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800480c:	4313      	orrs	r3, r2
 800480e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800481c:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	4921      	ldr	r1, [pc, #132]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	491a      	ldr	r1, [pc, #104]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004848:	4313      	orrs	r3, r2
 800484a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004858:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	4912      	ldr	r1, [pc, #72]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	490b      	ldr	r1, [pc, #44]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a0:	4903      	ldr	r1, [pc, #12]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3748      	adds	r7, #72	; 0x48
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000

080048b4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e083      	b.n	80049ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	7f5b      	ldrb	r3, [r3, #29]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc f9a6 	bl	8000c28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	22ca      	movs	r2, #202	; 0xca
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2253      	movs	r2, #83	; 0x53
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fc6f 	bl	80051d6 <RTC_EnterInitMode>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	22ff      	movs	r2, #255	; 0xff
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2204      	movs	r2, #4
 800490a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e05e      	b.n	80049ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800491e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004922:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6899      	ldr	r1, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68d2      	ldr	r2, [r2, #12]
 800494a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6919      	ldr	r1, [r3, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	041a      	lsls	r2, r3, #16
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800496e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10e      	bne.n	800499c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fc01 	bl	8005186 <HAL_RTC_WaitForSynchro>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	22ff      	movs	r2, #255	; 0xff
 8004990:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2204      	movs	r2, #4
 8004996:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e018      	b.n	80049ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	22ff      	movs	r2, #255	; 0xff
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80049cc:	2300      	movs	r3, #0
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049d6:	b590      	push	{r4, r7, lr}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	7f1b      	ldrb	r3, [r3, #28]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_RTC_SetTime+0x1c>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e0aa      	b.n	8004b48 <HAL_RTC_SetTime+0x172>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2202      	movs	r2, #2
 80049fc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d126      	bne.n	8004a52 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2200      	movs	r2, #0
 8004a16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fc06 	bl	800522e <RTC_ByteToBcd2>
 8004a22:	4603      	mov	r3, r0
 8004a24:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	785b      	ldrb	r3, [r3, #1]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fbff 	bl	800522e <RTC_ByteToBcd2>
 8004a30:	4603      	mov	r3, r0
 8004a32:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a34:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	789b      	ldrb	r3, [r3, #2]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fbf7 	bl	800522e <RTC_ByteToBcd2>
 8004a40:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a42:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	78db      	ldrb	r3, [r3, #3]
 8004a4a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e018      	b.n	8004a84 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2200      	movs	r2, #0
 8004a64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a72:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a78:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	78db      	ldrb	r3, [r3, #3]
 8004a7e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	22ca      	movs	r2, #202	; 0xca
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2253      	movs	r2, #83	; 0x53
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fb9e 	bl	80051d6 <RTC_EnterInitMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2204      	movs	r2, #4
 8004aac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e047      	b.n	8004b48 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004ac2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ad6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6899      	ldr	r1, [r3, #8]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004afe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d111      	bne.n	8004b32 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fb39 	bl	8005186 <HAL_RTC_WaitForSynchro>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	22ff      	movs	r2, #255	; 0xff
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2204      	movs	r2, #4
 8004b26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e00a      	b.n	8004b48 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	22ff      	movs	r2, #255	; 0xff
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
  }
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd90      	pop	{r4, r7, pc}

08004b50 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11a      	bne.n	8004c02 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb4a 	bl	800526a <RTC_Bcd2ToByte>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fb41 	bl	800526a <RTC_Bcd2ToByte>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	789b      	ldrb	r3, [r3, #2]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fb38 	bl	800526a <RTC_Bcd2ToByte>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	7f1b      	ldrb	r3, [r3, #28]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_RTC_SetDate+0x1c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e094      	b.n	8004d52 <HAL_RTC_SetDate+0x146>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2202      	movs	r2, #2
 8004c32:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10e      	bne.n	8004c58 <HAL_RTC_SetDate+0x4c>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	f023 0310 	bic.w	r3, r3, #16
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	330a      	adds	r3, #10
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d11c      	bne.n	8004c98 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	78db      	ldrb	r3, [r3, #3]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fae3 	bl	800522e <RTC_ByteToBcd2>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fadc 	bl	800522e <RTC_ByteToBcd2>
 8004c76:	4603      	mov	r3, r0
 8004c78:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c7a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	789b      	ldrb	r3, [r3, #2]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fad4 	bl	800522e <RTC_ByteToBcd2>
 8004c86:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004c88:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e00e      	b.n	8004cb6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	78db      	ldrb	r3, [r3, #3]
 8004c9c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	785b      	ldrb	r3, [r3, #1]
 8004ca2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ca4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004caa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	22ca      	movs	r2, #202	; 0xca
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2253      	movs	r2, #83	; 0x53
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa85 	bl	80051d6 <RTC_EnterInitMode>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	22ff      	movs	r2, #255	; 0xff
 8004cd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e033      	b.n	8004d52 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004cf4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cf8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d08:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d111      	bne.n	8004d3c <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fa34 	bl	8005186 <HAL_RTC_WaitForSynchro>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00b      	beq.n	8004d3c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	22ff      	movs	r2, #255	; 0xff
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e00a      	b.n	8004d52 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	22ff      	movs	r2, #255	; 0xff
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
  }
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd90      	pop	{r4, r7, pc}

08004d5a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	0b5b      	lsrs	r3, r3, #13
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11a      	bne.n	8004dee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	78db      	ldrb	r3, [r3, #3]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fa54 	bl	800526a <RTC_Bcd2ToByte>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fa4b 	bl	800526a <RTC_Bcd2ToByte>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	789b      	ldrb	r3, [r3, #2]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fa42 	bl	800526a <RTC_Bcd2ToByte>
 8004de6:	4603      	mov	r3, r0
 8004de8:	461a      	mov	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b089      	sub	sp, #36	; 0x24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	7f1b      	ldrb	r3, [r3, #28]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_RTC_SetAlarm_IT+0x24>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e11f      	b.n	800505c <HAL_RTC_SetAlarm_IT+0x264>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2202      	movs	r2, #2
 8004e26:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d137      	bne.n	8004e9e <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f9f1 	bl	800522e <RTC_ByteToBcd2>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f9ea 	bl	800522e <RTC_ByteToBcd2>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004e5e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	789b      	ldrb	r3, [r3, #2]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f9e2 	bl	800522e <RTC_ByteToBcd2>
 8004e6a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004e6c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	78db      	ldrb	r3, [r3, #3]
 8004e74:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004e76:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f9d4 	bl	800522e <RTC_ByteToBcd2>
 8004e86:	4603      	mov	r3, r0
 8004e88:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004e8a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004e92:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	e023      	b.n	8004ee6 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ebe:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004ec4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004ecc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004ed6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004edc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	22ca      	movs	r2, #202	; 0xca
 8004ef8:	625a      	str	r2, [r3, #36]	; 0x24
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2253      	movs	r2, #83	; 0x53
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0a:	d148      	bne.n	8004f9e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f1a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004f2c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f2e:	f7fc f84d 	bl	8000fcc <HAL_GetTick>
 8004f32:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004f34:	e013      	b.n	8004f5e <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f36:	f7fc f849 	bl	8000fcc <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f44:	d90b      	bls.n	8004f5e <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	22ff      	movs	r2, #255	; 0xff
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2203      	movs	r2, #3
 8004f52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e07e      	b.n	800505c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0e4      	beq.n	8004f36 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f8a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	e047      	b.n	800502e <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fac:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004fbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fc0:	f7fc f804 	bl	8000fcc <HAL_GetTick>
 8004fc4:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004fc6:	e013      	b.n	8004ff0 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fc8:	f7fc f800 	bl	8000fcc <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd6:	d90b      	bls.n	8004ff0 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	22ff      	movs	r2, #255	; 0xff
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e035      	b.n	800505c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0e4      	beq.n	8004fc8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800502c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a0c      	ldr	r2, [pc, #48]	; (8005064 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005038:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_RTC_SetAlarm_IT+0x26c>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005044:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	22ff      	movs	r2, #255	; 0xff
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3724      	adds	r7, #36	; 0x24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}
 8005064:	40010400 	.word	0x40010400

08005068 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005084:	d10e      	bne.n	80050a4 <HAL_RTC_GetAlarm+0x3c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	e00d      	b.n	80050c0 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80050be:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	0e1b      	lsrs	r3, r3, #24
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800510e:	b2da      	uxtb	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d125      	bne.n	800517c <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f898 	bl	800526a <RTC_Bcd2ToByte>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f88f 	bl	800526a <RTC_Bcd2ToByte>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	789b      	ldrb	r3, [r3, #2]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f886 	bl	800526a <RTC_Bcd2ToByte>
 800515e:	4603      	mov	r3, r0
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 f87c 	bl	800526a <RTC_Bcd2ToByte>
 8005172:	4603      	mov	r3, r0
 8005174:	461a      	mov	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051a0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80051a2:	f7fb ff13 	bl	8000fcc <HAL_GetTick>
 80051a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80051a8:	e009      	b.n	80051be <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051aa:	f7fb ff0f 	bl	8000fcc <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b8:	d901      	bls.n	80051be <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e007      	b.n	80051ce <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0ee      	beq.n	80051aa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d119      	bne.n	8005224 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80051fa:	f7fb fee7 	bl	8000fcc <HAL_GetTick>
 80051fe:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005200:	e009      	b.n	8005216 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005202:	f7fb fee3 	bl	8000fcc <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005210:	d901      	bls.n	8005216 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e007      	b.n	8005226 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ee      	beq.n	8005202 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	4603      	mov	r3, r0
 8005236:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800523c:	e005      	b.n	800524a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	3b0a      	subs	r3, #10
 8005248:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	2b09      	cmp	r3, #9
 800524e:	d8f6      	bhi.n	800523e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	b2da      	uxtb	r2, r3
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	4313      	orrs	r3, r2
 800525c:	b2db      	uxtb	r3, r3
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	4603      	mov	r3, r0
 8005272:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	b2db      	uxtb	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	4413      	add	r3, r2
 8005298:	b2db      	uxtb	r3, r3
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	7f1b      	ldrb	r3, [r3, #28]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 80052be:	2302      	movs	r3, #2
 80052c0:	e081      	b.n	80053c6 <HAL_RTCEx_SetWakeUpTimer+0x120>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2202      	movs	r2, #2
 80052cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	22ca      	movs	r2, #202	; 0xca
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2253      	movs	r2, #83	; 0x53
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01e      	beq.n	800532a <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80052ec:	f7fb fe6e 	bl	8000fcc <HAL_GetTick>
 80052f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80052f2:	e013      	b.n	800531c <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052f4:	f7fb fe6a 	bl	8000fcc <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005302:	d90b      	bls.n	800531c <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	22ff      	movs	r2, #255	; 0xff
 800530a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2203      	movs	r2, #3
 8005310:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e054      	b.n	80053c6 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e4      	bne.n	80052f4 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005338:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800533a:	f7fb fe47 	bl	8000fcc <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005340:	e013      	b.n	800536a <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005342:	f7fb fe43 	bl	8000fcc <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005350:	d90b      	bls.n	800536a <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	22ff      	movs	r2, #255	; 0xff
 8005358:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2203      	movs	r2, #3
 800535e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e02d      	b.n	80053c6 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0e4      	beq.n	8005342 <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0207 	bic.w	r2, r2, #7
 8005386:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6899      	ldr	r1, [r3, #8]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053ae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	22ff      	movs	r2, #255	; 0xff
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e01d      	b.n	800541c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fb fc3d 	bl	8000c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3304      	adds	r3, #4
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f000 f979 	bl	8005704 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fcca 	bl	8005dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1e      	ldr	r2, [pc, #120]	; (80054bc <HAL_TIM_PWM_Start+0x98>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <HAL_TIM_PWM_Start+0x4a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1d      	ldr	r2, [pc, #116]	; (80054c0 <HAL_TIM_PWM_Start+0x9c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00e      	beq.n	800546e <HAL_TIM_PWM_Start+0x4a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <HAL_TIM_PWM_Start+0xa0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d009      	beq.n	800546e <HAL_TIM_PWM_Start+0x4a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1a      	ldr	r2, [pc, #104]	; (80054c8 <HAL_TIM_PWM_Start+0xa4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIM_PWM_Start+0x4a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a18      	ldr	r2, [pc, #96]	; (80054cc <HAL_TIM_PWM_Start+0xa8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_TIM_PWM_Start+0x4e>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <HAL_TIM_PWM_Start+0x50>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005486:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <HAL_TIM_PWM_Start+0xac>)
 8005490:	4013      	ands	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d00b      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x8e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d007      	beq.n	80054b2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800
 80054d0:	00010007 	.word	0x00010007

080054d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e105      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x226>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b14      	cmp	r3, #20
 8005502:	f200 80f0 	bhi.w	80056e6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005561 	.word	0x08005561
 8005510:	080056e7 	.word	0x080056e7
 8005514:	080056e7 	.word	0x080056e7
 8005518:	080056e7 	.word	0x080056e7
 800551c:	080055a1 	.word	0x080055a1
 8005520:	080056e7 	.word	0x080056e7
 8005524:	080056e7 	.word	0x080056e7
 8005528:	080056e7 	.word	0x080056e7
 800552c:	080055e3 	.word	0x080055e3
 8005530:	080056e7 	.word	0x080056e7
 8005534:	080056e7 	.word	0x080056e7
 8005538:	080056e7 	.word	0x080056e7
 800553c:	08005623 	.word	0x08005623
 8005540:	080056e7 	.word	0x080056e7
 8005544:	080056e7 	.word	0x080056e7
 8005548:	080056e7 	.word	0x080056e7
 800554c:	08005665 	.word	0x08005665
 8005550:	080056e7 	.word	0x080056e7
 8005554:	080056e7 	.word	0x080056e7
 8005558:	080056e7 	.word	0x080056e7
 800555c:	080056a5 	.word	0x080056a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f95c 	bl	8005824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0208 	orr.w	r2, r2, #8
 800557a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0204 	bic.w	r2, r2, #4
 800558a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6999      	ldr	r1, [r3, #24]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	619a      	str	r2, [r3, #24]
      break;
 800559e:	e0a3      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f9cc 	bl	8005944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6999      	ldr	r1, [r3, #24]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	021a      	lsls	r2, r3, #8
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	619a      	str	r2, [r3, #24]
      break;
 80055e0:	e082      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fa35 	bl	8005a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69da      	ldr	r2, [r3, #28]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0208 	orr.w	r2, r2, #8
 80055fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0204 	bic.w	r2, r2, #4
 800560c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69d9      	ldr	r1, [r3, #28]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	61da      	str	r2, [r3, #28]
      break;
 8005620:	e062      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fa9d 	bl	8005b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69d9      	ldr	r1, [r3, #28]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	61da      	str	r2, [r3, #28]
      break;
 8005662:	e041      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fae6 	bl	8005c3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0208 	orr.w	r2, r2, #8
 800567e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056a2:	e021      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fb2a 	bl	8005d04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056e4:	e000      	b.n	80056e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80056e6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop

08005704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3c      	ldr	r2, [pc, #240]	; (8005808 <TIM_Base_SetConfig+0x104>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00f      	beq.n	800573c <TIM_Base_SetConfig+0x38>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d00b      	beq.n	800573c <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a39      	ldr	r2, [pc, #228]	; (800580c <TIM_Base_SetConfig+0x108>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d007      	beq.n	800573c <TIM_Base_SetConfig+0x38>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a38      	ldr	r2, [pc, #224]	; (8005810 <TIM_Base_SetConfig+0x10c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_Base_SetConfig+0x38>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a37      	ldr	r2, [pc, #220]	; (8005814 <TIM_Base_SetConfig+0x110>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d108      	bne.n	800574e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2d      	ldr	r2, [pc, #180]	; (8005808 <TIM_Base_SetConfig+0x104>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01b      	beq.n	800578e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d017      	beq.n	800578e <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2a      	ldr	r2, [pc, #168]	; (800580c <TIM_Base_SetConfig+0x108>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a29      	ldr	r2, [pc, #164]	; (8005810 <TIM_Base_SetConfig+0x10c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a28      	ldr	r2, [pc, #160]	; (8005814 <TIM_Base_SetConfig+0x110>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00b      	beq.n	800578e <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a27      	ldr	r2, [pc, #156]	; (8005818 <TIM_Base_SetConfig+0x114>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_Base_SetConfig+0x8a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a26      	ldr	r2, [pc, #152]	; (800581c <TIM_Base_SetConfig+0x118>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_Base_SetConfig+0x8a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a25      	ldr	r2, [pc, #148]	; (8005820 <TIM_Base_SetConfig+0x11c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a10      	ldr	r2, [pc, #64]	; (8005808 <TIM_Base_SetConfig+0x104>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00f      	beq.n	80057ec <TIM_Base_SetConfig+0xe8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a11      	ldr	r2, [pc, #68]	; (8005814 <TIM_Base_SetConfig+0x110>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_Base_SetConfig+0xe8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <TIM_Base_SetConfig+0x114>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_Base_SetConfig+0xe8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a0f      	ldr	r2, [pc, #60]	; (800581c <TIM_Base_SetConfig+0x118>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0xe8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a0e      	ldr	r2, [pc, #56]	; (8005820 <TIM_Base_SetConfig+0x11c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40013400 	.word	0x40013400
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400
 8005820:	40014800 	.word	0x40014800

08005824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f023 0302 	bic.w	r3, r3, #2
 8005870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a2c      	ldr	r2, [pc, #176]	; (8005930 <TIM_OC1_SetConfig+0x10c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00f      	beq.n	80058a4 <TIM_OC1_SetConfig+0x80>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a2b      	ldr	r2, [pc, #172]	; (8005934 <TIM_OC1_SetConfig+0x110>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00b      	beq.n	80058a4 <TIM_OC1_SetConfig+0x80>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <TIM_OC1_SetConfig+0x114>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d007      	beq.n	80058a4 <TIM_OC1_SetConfig+0x80>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a29      	ldr	r2, [pc, #164]	; (800593c <TIM_OC1_SetConfig+0x118>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_OC1_SetConfig+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a28      	ldr	r2, [pc, #160]	; (8005940 <TIM_OC1_SetConfig+0x11c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d10c      	bne.n	80058be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0308 	bic.w	r3, r3, #8
 80058aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0304 	bic.w	r3, r3, #4
 80058bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <TIM_OC1_SetConfig+0x10c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00f      	beq.n	80058e6 <TIM_OC1_SetConfig+0xc2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <TIM_OC1_SetConfig+0x110>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00b      	beq.n	80058e6 <TIM_OC1_SetConfig+0xc2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a19      	ldr	r2, [pc, #100]	; (8005938 <TIM_OC1_SetConfig+0x114>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <TIM_OC1_SetConfig+0xc2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a18      	ldr	r2, [pc, #96]	; (800593c <TIM_OC1_SetConfig+0x118>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <TIM_OC1_SetConfig+0xc2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a17      	ldr	r2, [pc, #92]	; (8005940 <TIM_OC1_SetConfig+0x11c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d111      	bne.n	800590a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40013400 	.word	0x40013400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800

08005944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0210 	bic.w	r2, r3, #16
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	021b      	lsls	r3, r3, #8
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0320 	bic.w	r3, r3, #32
 8005992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <TIM_OC2_SetConfig+0x100>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_OC2_SetConfig+0x6c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a27      	ldr	r2, [pc, #156]	; (8005a48 <TIM_OC2_SetConfig+0x104>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10d      	bne.n	80059cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <TIM_OC2_SetConfig+0x100>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00f      	beq.n	80059f4 <TIM_OC2_SetConfig+0xb0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <TIM_OC2_SetConfig+0x104>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00b      	beq.n	80059f4 <TIM_OC2_SetConfig+0xb0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <TIM_OC2_SetConfig+0x108>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d007      	beq.n	80059f4 <TIM_OC2_SetConfig+0xb0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1a      	ldr	r2, [pc, #104]	; (8005a50 <TIM_OC2_SetConfig+0x10c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC2_SetConfig+0xb0>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <TIM_OC2_SetConfig+0x110>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d113      	bne.n	8005a1c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059fa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a02:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40013400 	.word	0x40013400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <TIM_OC3_SetConfig+0xfc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d003      	beq.n	8005ac2 <TIM_OC3_SetConfig+0x6a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <TIM_OC3_SetConfig+0x100>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10d      	bne.n	8005ade <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005adc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <TIM_OC3_SetConfig+0xfc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00f      	beq.n	8005b06 <TIM_OC3_SetConfig+0xae>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	; (8005b58 <TIM_OC3_SetConfig+0x100>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00b      	beq.n	8005b06 <TIM_OC3_SetConfig+0xae>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <TIM_OC3_SetConfig+0x104>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d007      	beq.n	8005b06 <TIM_OC3_SetConfig+0xae>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <TIM_OC3_SetConfig+0x108>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d003      	beq.n	8005b06 <TIM_OC3_SetConfig+0xae>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <TIM_OC3_SetConfig+0x10c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d113      	bne.n	8005b2e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	621a      	str	r2, [r3, #32]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40013400 	.word	0x40013400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800

08005b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <TIM_OC4_SetConfig+0xc0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d00f      	beq.n	8005bec <TIM_OC4_SetConfig+0x84>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <TIM_OC4_SetConfig+0xc4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <TIM_OC4_SetConfig+0x84>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <TIM_OC4_SetConfig+0xc8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d007      	beq.n	8005bec <TIM_OC4_SetConfig+0x84>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <TIM_OC4_SetConfig+0xcc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_OC4_SetConfig+0x84>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a14      	ldr	r2, [pc, #80]	; (8005c38 <TIM_OC4_SetConfig+0xd0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d109      	bne.n	8005c00 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	019b      	lsls	r3, r3, #6
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40013400 	.word	0x40013400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800

08005c3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <TIM_OC5_SetConfig+0xb4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00f      	beq.n	8005cb6 <TIM_OC5_SetConfig+0x7a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <TIM_OC5_SetConfig+0xb8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00b      	beq.n	8005cb6 <TIM_OC5_SetConfig+0x7a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <TIM_OC5_SetConfig+0xbc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d007      	beq.n	8005cb6 <TIM_OC5_SetConfig+0x7a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <TIM_OC5_SetConfig+0xc0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_OC5_SetConfig+0x7a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <TIM_OC5_SetConfig+0xc4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d109      	bne.n	8005cca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	621a      	str	r2, [r3, #32]
}
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800

08005d04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	051b      	lsls	r3, r3, #20
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <TIM_OC6_SetConfig+0xb8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00f      	beq.n	8005d80 <TIM_OC6_SetConfig+0x7c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <TIM_OC6_SetConfig+0xbc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00b      	beq.n	8005d80 <TIM_OC6_SetConfig+0x7c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a16      	ldr	r2, [pc, #88]	; (8005dc4 <TIM_OC6_SetConfig+0xc0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d007      	beq.n	8005d80 <TIM_OC6_SetConfig+0x7c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <TIM_OC6_SetConfig+0xc4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_OC6_SetConfig+0x7c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <TIM_OC6_SetConfig+0xc8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d109      	bne.n	8005d94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40013400 	.word	0x40013400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800

08005dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	2201      	movs	r2, #1
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a1a      	ldr	r2, [r3, #32]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	43db      	mvns	r3, r3
 8005df2:	401a      	ands	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a1a      	ldr	r2, [r3, #32]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	fa01 f303 	lsl.w	r3, r1, r3
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	621a      	str	r2, [r3, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e063      	b.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2b      	ldr	r2, [pc, #172]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d018      	beq.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea6:	d013      	beq.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a18      	ldr	r2, [pc, #96]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00e      	beq.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a12      	ldr	r2, [pc, #72]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d004      	beq.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a13      	ldr	r2, [pc, #76]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d10c      	bne.n	8005eea <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40013400 	.word	0x40013400
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40014000 	.word	0x40014000

08005f1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e065      	b.n	8006004 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a16      	ldr	r2, [pc, #88]	; (8006010 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d004      	beq.n	8005fc6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a14      	ldr	r2, [pc, #80]	; (8006014 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d115      	bne.n	8005ff2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	051b      	lsls	r3, r3, #20
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40013400 	.word	0x40013400

08006018 <ADC_DMA_degerOkuma>:
extern uint16_t deger[4];
extern int potDeger2, tempDeger, batDeger;

char keyYer[14];

void ADC_DMA_degerOkuma() {
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, deger, 4);
 800601c:	2204      	movs	r2, #4
 800601e:	4906      	ldr	r1, [pc, #24]	; (8006038 <ADC_DMA_degerOkuma+0x20>)
 8006020:	4806      	ldr	r0, [pc, #24]	; (800603c <ADC_DMA_degerOkuma+0x24>)
 8006022:	f7fb f9dd 	bl	80013e0 <HAL_ADC_Start_DMA>
	HAL_ADC_ConvHalfCpltCallback(&hadc1);
 8006026:	4805      	ldr	r0, [pc, #20]	; (800603c <ADC_DMA_degerOkuma+0x24>)
 8006028:	f7fa ffe6 	bl	8000ff8 <HAL_ADC_ConvHalfCpltCallback>
	HAL_ADC_Stop_DMA(&hadc1);
 800602c:	4803      	ldr	r0, [pc, #12]	; (800603c <ADC_DMA_degerOkuma+0x24>)
 800602e:	f7fb faf3 	bl	8001618 <HAL_ADC_Stop_DMA>
}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	2000089c 	.word	0x2000089c
 800603c:	2000084c 	.word	0x2000084c

08006040 <pilGoster>:

void pilGoster() {
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
	int pilDeger = (deger[0] / 4 - 3);
 8006046:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <pilGoster+0x30>)
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	089b      	lsrs	r3, r3, #2
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b03      	subs	r3, #3
 8006050:	607b      	str	r3, [r7, #4]

	OLED_SetCursor(111, 0);
 8006052:	2100      	movs	r1, #0
 8006054:	206f      	movs	r0, #111	; 0x6f
 8006056:	f000 fae1 	bl	800661c <OLED_SetCursor>
	OLED_WriteChar((pilDeger), Font_16x6, White);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	b2d8      	uxtb	r0, r3
 800605e:	4a05      	ldr	r2, [pc, #20]	; (8006074 <pilGoster+0x34>)
 8006060:	2301      	movs	r3, #1
 8006062:	ca06      	ldmia	r2, {r1, r2}
 8006064:	f000 fa34 	bl	80064d0 <OLED_WriteChar>
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	2000089c 	.word	0x2000089c
 8006074:	2000001c 	.word	0x2000001c

08006078 <OLED_WriteCommand>:
static uint8_t OLED_Buffer[OLED_WIDTH * OLED_HEIGHT / 8];
//
//  Send a byte to the command register
//
static void OLED_WriteCommand(uint8_t command)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af04      	add	r7, sp, #16
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8006082:	230a      	movs	r3, #10
 8006084:	9302      	str	r3, [sp, #8]
 8006086:	2301      	movs	r3, #1
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	1dfb      	adds	r3, r7, #7
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	2301      	movs	r3, #1
 8006090:	2200      	movs	r2, #0
 8006092:	2178      	movs	r1, #120	; 0x78
 8006094:	4803      	ldr	r0, [pc, #12]	; (80060a4 <OLED_WriteCommand+0x2c>)
 8006096:	f7fc fdeb 	bl	8002c70 <HAL_I2C_Mem_Write>
}
 800609a:	bf00      	nop
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000698 	.word	0x20000698

080060a8 <OLED_Init>:

//
//	Initialize the oled screen
//
uint8_t OLED_Init(void)
{	
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
//	HAL_Delay(100);
	
	/* Init LCD */
	OLED_WriteCommand(OLED_Display_Off); //display off
 80060ac:	20ae      	movs	r0, #174	; 0xae
 80060ae:	f7ff ffe3 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Memory_Addressing_Set); //Set Memory Addressing Mode
 80060b2:	2020      	movs	r0, #32
 80060b4:	f7ff ffe0 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Page_Addressing_Column_Higher_Set); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80060b8:	2010      	movs	r0, #16
 80060ba:	f7ff ffdd 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Page_Addressing_Page_Start_Set); //Set Page Start Address for Page Addressing Mode,0-7
 80060be:	20b0      	movs	r0, #176	; 0xb0
 80060c0:	f7ff ffda 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Com_Output_Scan_Inc); //Set COM Output Scan Direction
 80060c4:	20c0      	movs	r0, #192	; 0xc0
 80060c6:	f7ff ffd7 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Page_Addressing_Column_Lower_Set); //---set low column address
 80060ca:	2000      	movs	r0, #0
 80060cc:	f7ff ffd4 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Page_Addressing_Column_Higher_Set); //---set high column address
 80060d0:	2010      	movs	r0, #16
 80060d2:	f7ff ffd1 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_Start_Line_Set); //--set start line address
 80060d6:	2040      	movs	r0, #64	; 0x40
 80060d8:	f7ff ffce 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Constrast_Set); //--set contrast control register
 80060dc:	2081      	movs	r0, #129	; 0x81
 80060de:	f7ff ffcb 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0xFF);//Contrast degeri
 80060e2:	20ff      	movs	r0, #255	; 0xff
 80060e4:	f7ff ffc8 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0xA0); //--set segment re-map 0 to 127
 80060e8:	20a0      	movs	r0, #160	; 0xa0
 80060ea:	f7ff ffc5 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_Normal); //--set normal display
 80060ee:	20a6      	movs	r0, #166	; 0xa6
 80060f0:	f7ff ffc2 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Multiplex_Radio_Set); //--set multiplex ratio(1 to 64)
 80060f4:	20a8      	movs	r0, #168	; 0xa8
 80060f6:	f7ff ffbf 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F); //
 80060fa:	203f      	movs	r0, #63	; 0x3f
 80060fc:	f7ff ffbc 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006100:	20a4      	movs	r0, #164	; 0xa4
 8006102:	f7ff ffb9 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_Offset_Set); //-set display offset
 8006106:	20d3      	movs	r0, #211	; 0xd3
 8006108:	f7ff ffb6 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0x00); //-not offset
 800610c:	2000      	movs	r0, #0
 800610e:	f7ff ffb3 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_Oscillator_Frequency_Set); //--set display clock divide ratio/oscillator frequency
 8006112:	20d5      	movs	r0, #213	; 0xd5
 8006114:	f7ff ffb0 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0xF0); //--set divide ratio
 8006118:	20f0      	movs	r0, #240	; 0xf0
 800611a:	f7ff ffad 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Precharge_Period_Set); //--set pre-charge period
 800611e:	20d9      	movs	r0, #217	; 0xd9
 8006120:	f7ff ffaa 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0x22); //
 8006124:	2022      	movs	r0, #34	; 0x22
 8006126:	f7ff ffa7 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Com_Pins_Set); //--set com pins hardware configuration
 800612a:	20da      	movs	r0, #218	; 0xda
 800612c:	f7ff ffa4 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8006130:	2012      	movs	r0, #18
 8006132:	f7ff ffa1 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_VCOMH_Deselect_Level_Set); //--set vcomh
 8006136:	20db      	movs	r0, #219	; 0xdb
 8006138:	f7ff ff9e 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0x20); //0x20,0.77xVcc
 800613c:	2020      	movs	r0, #32
 800613e:	f7ff ff9b 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Charge_Pump_Set); //--set DC-DC enable
 8006142:	208d      	movs	r0, #141	; 0x8d
 8006144:	f7ff ff98 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(0x14); //
 8006148:	2014      	movs	r0, #20
 800614a:	f7ff ff95 	bl	8006078 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_On); //--turn on SSD1306 panel
 800614e:	20af      	movs	r0, #175	; 0xaf
 8006150:	f7ff ff92 	bl	8006078 <OLED_WriteCommand>
	
	// Clear screen
	OLED_Fill(Black);
 8006154:	2000      	movs	r0, #0
 8006156:	f000 f811 	bl	800617c <OLED_Fill>
	
	// Flush buffer to screen
	OLED_UpdateScreen();
 800615a:	f000 f929 	bl	80063b0 <OLED_UpdateScreen>
	
	// Set default values for screen object
	OLED.CurrentX = 0;
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <OLED_Init+0xd0>)
 8006160:	2200      	movs	r2, #0
 8006162:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 8006164:	4b04      	ldr	r3, [pc, #16]	; (8006178 <OLED_Init+0xd0>)
 8006166:	2200      	movs	r2, #0
 8006168:	805a      	strh	r2, [r3, #2]
	
	OLED.Initialized = 1;
 800616a:	4b03      	ldr	r3, [pc, #12]	; (8006178 <OLED_Init+0xd0>)
 800616c:	2201      	movs	r2, #1
 800616e:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8006170:	2301      	movs	r3, #1
}
 8006172:	4618      	mov	r0, r3
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	200001b0 	.word	0x200001b0

0800617c <OLED_Fill>:

//
//  Fill the whole screen with the given color
//
void OLED_Fill(OLED_COLOR color) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <OLED_Fill+0x14>
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <OLED_Fill+0x16>
 8006190:	23ff      	movs	r3, #255	; 0xff
 8006192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006196:	4619      	mov	r1, r3
 8006198:	4803      	ldr	r0, [pc, #12]	; (80061a8 <OLED_Fill+0x2c>)
 800619a:	f001 fcb1 	bl	8007b00 <memset>
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200001b8 	.word	0x200001b8

080061ac <OLED_DrawLine>:
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}


void OLED_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, OLED_COLOR c) {
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4623      	mov	r3, r4
 80061bc:	80fb      	strh	r3, [r7, #6]
 80061be:	4603      	mov	r3, r0
 80061c0:	80bb      	strh	r3, [r7, #4]
 80061c2:	460b      	mov	r3, r1
 80061c4:	807b      	strh	r3, [r7, #2]
 80061c6:	4613      	mov	r3, r2
 80061c8:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= OLED_WIDTH) {
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	2b7f      	cmp	r3, #127	; 0x7f
 80061ce:	d901      	bls.n	80061d4 <OLED_DrawLine+0x28>
		x0 = OLED_WIDTH - 1;
 80061d0:	237f      	movs	r3, #127	; 0x7f
 80061d2:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= OLED_WIDTH) {
 80061d4:	887b      	ldrh	r3, [r7, #2]
 80061d6:	2b7f      	cmp	r3, #127	; 0x7f
 80061d8:	d901      	bls.n	80061de <OLED_DrawLine+0x32>
		x1 = OLED_WIDTH - 1;
 80061da:	237f      	movs	r3, #127	; 0x7f
 80061dc:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= OLED_HEIGHT) {
 80061de:	88bb      	ldrh	r3, [r7, #4]
 80061e0:	2b3f      	cmp	r3, #63	; 0x3f
 80061e2:	d901      	bls.n	80061e8 <OLED_DrawLine+0x3c>
		y0 = OLED_HEIGHT - 1;
 80061e4:	233f      	movs	r3, #63	; 0x3f
 80061e6:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= OLED_HEIGHT) {
 80061e8:	883b      	ldrh	r3, [r7, #0]
 80061ea:	2b3f      	cmp	r3, #63	; 0x3f
 80061ec:	d901      	bls.n	80061f2 <OLED_DrawLine+0x46>
		y1 = OLED_HEIGHT - 1;
 80061ee:	233f      	movs	r3, #63	; 0x3f
 80061f0:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	887b      	ldrh	r3, [r7, #2]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d205      	bcs.n	8006206 <OLED_DrawLine+0x5a>
 80061fa:	887a      	ldrh	r2, [r7, #2]
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	b29b      	uxth	r3, r3
 8006202:	b21b      	sxth	r3, r3
 8006204:	e004      	b.n	8006210 <OLED_DrawLine+0x64>
 8006206:	88fa      	ldrh	r2, [r7, #6]
 8006208:	887b      	ldrh	r3, [r7, #2]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	b29b      	uxth	r3, r3
 800620e:	b21b      	sxth	r3, r3
 8006210:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8006212:	88ba      	ldrh	r2, [r7, #4]
 8006214:	883b      	ldrh	r3, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d205      	bcs.n	8006226 <OLED_DrawLine+0x7a>
 800621a:	883a      	ldrh	r2, [r7, #0]
 800621c:	88bb      	ldrh	r3, [r7, #4]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	b29b      	uxth	r3, r3
 8006222:	b21b      	sxth	r3, r3
 8006224:	e004      	b.n	8006230 <OLED_DrawLine+0x84>
 8006226:	88ba      	ldrh	r2, [r7, #4]
 8006228:	883b      	ldrh	r3, [r7, #0]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	b29b      	uxth	r3, r3
 800622e:	b21b      	sxth	r3, r3
 8006230:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	887b      	ldrh	r3, [r7, #2]
 8006236:	429a      	cmp	r2, r3
 8006238:	d201      	bcs.n	800623e <OLED_DrawLine+0x92>
 800623a:	2301      	movs	r3, #1
 800623c:	e001      	b.n	8006242 <OLED_DrawLine+0x96>
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
 8006242:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8006244:	88ba      	ldrh	r2, [r7, #4]
 8006246:	883b      	ldrh	r3, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d201      	bcs.n	8006250 <OLED_DrawLine+0xa4>
 800624c:	2301      	movs	r3, #1
 800624e:	e001      	b.n	8006254 <OLED_DrawLine+0xa8>
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
 8006254:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8006256:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800625a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800625e:	429a      	cmp	r2, r3
 8006260:	dd06      	ble.n	8006270 <OLED_DrawLine+0xc4>
 8006262:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006266:	0fda      	lsrs	r2, r3, #31
 8006268:	4413      	add	r3, r2
 800626a:	105b      	asrs	r3, r3, #1
 800626c:	b21b      	sxth	r3, r3
 800626e:	e006      	b.n	800627e <OLED_DrawLine+0xd2>
 8006270:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006274:	425b      	negs	r3, r3
 8006276:	0fda      	lsrs	r2, r3, #31
 8006278:	4413      	add	r3, r2
 800627a:	105b      	asrs	r3, r3, #1
 800627c:	b21b      	sxth	r3, r3
 800627e:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8006280:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d12b      	bne.n	80062e0 <OLED_DrawLine+0x134>
		if (y1 < y0) {
 8006288:	883a      	ldrh	r2, [r7, #0]
 800628a:	88bb      	ldrh	r3, [r7, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	d205      	bcs.n	800629c <OLED_DrawLine+0xf0>
			tmp = y1;
 8006290:	883b      	ldrh	r3, [r7, #0]
 8006292:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8006294:	88bb      	ldrh	r3, [r7, #4]
 8006296:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8006298:	893b      	ldrh	r3, [r7, #8]
 800629a:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 800629c:	887a      	ldrh	r2, [r7, #2]
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d205      	bcs.n	80062b0 <OLED_DrawLine+0x104>
			tmp = x1;
 80062a4:	887b      	ldrh	r3, [r7, #2]
 80062a6:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80062ac:	893b      	ldrh	r3, [r7, #8]
 80062ae:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80062b0:	88bb      	ldrh	r3, [r7, #4]
 80062b2:	82bb      	strh	r3, [r7, #20]
 80062b4:	e00e      	b.n	80062d4 <OLED_DrawLine+0x128>
			OLED_DrawPixel(x0, i, c);
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	8aba      	ldrh	r2, [r7, #20]
 80062bc:	b2d1      	uxtb	r1, r2
 80062be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f8a4 	bl	8006410 <OLED_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80062c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3301      	adds	r3, #1
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	82bb      	strh	r3, [r7, #20]
 80062d4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80062d8:	883b      	ldrh	r3, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	ddeb      	ble.n	80062b6 <OLED_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 80062de:	e063      	b.n	80063a8 <OLED_DrawLine+0x1fc>
	}

	if (dy == 0) {
 80062e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d12b      	bne.n	8006340 <OLED_DrawLine+0x194>
		if (y1 < y0) {
 80062e8:	883a      	ldrh	r2, [r7, #0]
 80062ea:	88bb      	ldrh	r3, [r7, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d205      	bcs.n	80062fc <OLED_DrawLine+0x150>
			tmp = y1;
 80062f0:	883b      	ldrh	r3, [r7, #0]
 80062f2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80062f4:	88bb      	ldrh	r3, [r7, #4]
 80062f6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80062f8:	893b      	ldrh	r3, [r7, #8]
 80062fa:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80062fc:	887a      	ldrh	r2, [r7, #2]
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	429a      	cmp	r2, r3
 8006302:	d205      	bcs.n	8006310 <OLED_DrawLine+0x164>
			tmp = x1;
 8006304:	887b      	ldrh	r3, [r7, #2]
 8006306:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8006308:	88fb      	ldrh	r3, [r7, #6]
 800630a:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800630c:	893b      	ldrh	r3, [r7, #8]
 800630e:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	82bb      	strh	r3, [r7, #20]
 8006314:	e00e      	b.n	8006334 <OLED_DrawLine+0x188>
			OLED_DrawPixel(i, y0, c);
 8006316:	8abb      	ldrh	r3, [r7, #20]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	88ba      	ldrh	r2, [r7, #4]
 800631c:	b2d1      	uxtb	r1, r2
 800631e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f874 	bl	8006410 <OLED_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8006328:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800632c:	b29b      	uxth	r3, r3
 800632e:	3301      	adds	r3, #1
 8006330:	b29b      	uxth	r3, r3
 8006332:	82bb      	strh	r3, [r7, #20]
 8006334:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006338:	887b      	ldrh	r3, [r7, #2]
 800633a:	429a      	cmp	r2, r3
 800633c:	ddeb      	ble.n	8006316 <OLED_DrawLine+0x16a>
		}

		/* Return from function */
		return;
 800633e:	e033      	b.n	80063a8 <OLED_DrawLine+0x1fc>
	}

	while (1) {
		OLED_DrawPixel(x0, y0, c);
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	88ba      	ldrh	r2, [r7, #4]
 8006346:	b2d1      	uxtb	r1, r2
 8006348:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800634c:	4618      	mov	r0, r3
 800634e:	f000 f85f 	bl	8006410 <OLED_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8006352:	88fa      	ldrh	r2, [r7, #6]
 8006354:	887b      	ldrh	r3, [r7, #2]
 8006356:	429a      	cmp	r2, r3
 8006358:	d103      	bne.n	8006362 <OLED_DrawLine+0x1b6>
 800635a:	88ba      	ldrh	r2, [r7, #4]
 800635c:	883b      	ldrh	r3, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d021      	beq.n	80063a6 <OLED_DrawLine+0x1fa>
			break;
		}
		e2 = err;
 8006362:	8afb      	ldrh	r3, [r7, #22]
 8006364:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8006366:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800636a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800636e:	425b      	negs	r3, r3
 8006370:	429a      	cmp	r2, r3
 8006372:	dd08      	ble.n	8006386 <OLED_DrawLine+0x1da>
			err -= dy;
 8006374:	8afa      	ldrh	r2, [r7, #22]
 8006376:	8a3b      	ldrh	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	b29b      	uxth	r3, r3
 800637c:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800637e:	89fa      	ldrh	r2, [r7, #14]
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	4413      	add	r3, r2
 8006384:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8006386:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800638a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	dad6      	bge.n	8006340 <OLED_DrawLine+0x194>
			err += dx;
 8006392:	8afa      	ldrh	r2, [r7, #22]
 8006394:	8a7b      	ldrh	r3, [r7, #18]
 8006396:	4413      	add	r3, r2
 8006398:	b29b      	uxth	r3, r3
 800639a:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800639c:	89ba      	ldrh	r2, [r7, #12]
 800639e:	88bb      	ldrh	r3, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	80bb      	strh	r3, [r7, #4]
		OLED_DrawPixel(x0, y0, c);
 80063a4:	e7cc      	b.n	8006340 <OLED_DrawLine+0x194>
			break;
 80063a6:	bf00      	nop
		}
	}
}
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}
	...

080063b0 <OLED_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void OLED_UpdateScreen(void) 
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80063b6:	2300      	movs	r3, #0
 80063b8:	71fb      	strb	r3, [r7, #7]
 80063ba:	e01d      	b.n	80063f8 <OLED_UpdateScreen+0x48>
		OLED_WriteCommand(0xB0 + i);
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	3b50      	subs	r3, #80	; 0x50
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fe58 	bl	8006078 <OLED_WriteCommand>
		OLED_WriteCommand(0x00);
 80063c8:	2000      	movs	r0, #0
 80063ca:	f7ff fe55 	bl	8006078 <OLED_WriteCommand>
		OLED_WriteCommand(0x10);
 80063ce:	2010      	movs	r0, #16
 80063d0:	f7ff fe52 	bl	8006078 <OLED_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	01db      	lsls	r3, r3, #7
 80063d8:	4a0b      	ldr	r2, [pc, #44]	; (8006408 <OLED_UpdateScreen+0x58>)
 80063da:	4413      	add	r3, r2
 80063dc:	2264      	movs	r2, #100	; 0x64
 80063de:	9202      	str	r2, [sp, #8]
 80063e0:	2280      	movs	r2, #128	; 0x80
 80063e2:	9201      	str	r2, [sp, #4]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	2301      	movs	r3, #1
 80063e8:	2240      	movs	r2, #64	; 0x40
 80063ea:	2178      	movs	r1, #120	; 0x78
 80063ec:	4807      	ldr	r0, [pc, #28]	; (800640c <OLED_UpdateScreen+0x5c>)
 80063ee:	f7fc fc3f 	bl	8002c70 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	3301      	adds	r3, #1
 80063f6:	71fb      	strb	r3, [r7, #7]
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b07      	cmp	r3, #7
 80063fc:	d9de      	bls.n	80063bc <OLED_UpdateScreen+0xc>
	}
}
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	200001b8 	.word	0x200001b8
 800640c:	20000698 	.word	0x20000698

08006410 <OLED_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//

void OLED_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
 800641a:	460b      	mov	r3, r1
 800641c:	71bb      	strb	r3, [r7, #6]
 800641e:	4613      	mov	r3, r2
 8006420:	717b      	strb	r3, [r7, #5]
	if (
		x >= OLED_WIDTH ||
 8006422:	f997 3007 	ldrsb.w	r3, [r7, #7]
	if (
 8006426:	2b00      	cmp	r3, #0
 8006428:	db48      	blt.n	80064bc <OLED_DrawPixel+0xac>
		x >= OLED_WIDTH ||
 800642a:	79bb      	ldrb	r3, [r7, #6]
 800642c:	2b3f      	cmp	r3, #63	; 0x3f
 800642e:	d845      	bhi.n	80064bc <OLED_DrawPixel+0xac>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 8006430:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <OLED_DrawPixel+0xb8>)
 8006432:	791b      	ldrb	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d006      	beq.n	8006446 <OLED_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 8006438:	797b      	ldrb	r3, [r7, #5]
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	717b      	strb	r3, [r7, #5]
	}

	/* Set color */
	if (color == White) {
 8006446:	797b      	ldrb	r3, [r7, #5]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d11a      	bne.n	8006482 <OLED_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 800644c:	79fa      	ldrb	r2, [r7, #7]
 800644e:	79bb      	ldrb	r3, [r7, #6]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	b2d8      	uxtb	r0, r3
 8006454:	4603      	mov	r3, r0
 8006456:	01db      	lsls	r3, r3, #7
 8006458:	4413      	add	r3, r2
 800645a:	4a1c      	ldr	r2, [pc, #112]	; (80064cc <OLED_DrawPixel+0xbc>)
 800645c:	5cd3      	ldrb	r3, [r2, r3]
 800645e:	b25a      	sxtb	r2, r3
 8006460:	79bb      	ldrb	r3, [r7, #6]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	2101      	movs	r1, #1
 8006468:	fa01 f303 	lsl.w	r3, r1, r3
 800646c:	b25b      	sxtb	r3, r3
 800646e:	4313      	orrs	r3, r2
 8006470:	b259      	sxtb	r1, r3
 8006472:	79fa      	ldrb	r2, [r7, #7]
 8006474:	4603      	mov	r3, r0
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	4413      	add	r3, r2
 800647a:	b2c9      	uxtb	r1, r1
 800647c:	4a13      	ldr	r2, [pc, #76]	; (80064cc <OLED_DrawPixel+0xbc>)
 800647e:	54d1      	strb	r1, [r2, r3]
 8006480:	e01d      	b.n	80064be <OLED_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8006482:	79fa      	ldrb	r2, [r7, #7]
 8006484:	79bb      	ldrb	r3, [r7, #6]
 8006486:	08db      	lsrs	r3, r3, #3
 8006488:	b2d8      	uxtb	r0, r3
 800648a:	4603      	mov	r3, r0
 800648c:	01db      	lsls	r3, r3, #7
 800648e:	4413      	add	r3, r2
 8006490:	4a0e      	ldr	r2, [pc, #56]	; (80064cc <OLED_DrawPixel+0xbc>)
 8006492:	5cd3      	ldrb	r3, [r2, r3]
 8006494:	b25a      	sxtb	r2, r3
 8006496:	79bb      	ldrb	r3, [r7, #6]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	2101      	movs	r1, #1
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	b25b      	sxtb	r3, r3
 80064a8:	4013      	ands	r3, r2
 80064aa:	b259      	sxtb	r1, r3
 80064ac:	79fa      	ldrb	r2, [r7, #7]
 80064ae:	4603      	mov	r3, r0
 80064b0:	01db      	lsls	r3, r3, #7
 80064b2:	4413      	add	r3, r2
 80064b4:	b2c9      	uxtb	r1, r1
 80064b6:	4a05      	ldr	r2, [pc, #20]	; (80064cc <OLED_DrawPixel+0xbc>)
 80064b8:	54d1      	strb	r1, [r2, r3]
 80064ba:	e000      	b.n	80064be <OLED_DrawPixel+0xae>
		return;
 80064bc:	bf00      	nop
	}
}
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	200001b0 	.word	0x200001b0
 80064cc:	200001b8 	.word	0x200001b8

080064d0 <OLED_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char OLED_WriteChar(char ch, FontDef Font, OLED_COLOR color)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b089      	sub	sp, #36	; 0x24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	1d38      	adds	r0, r7, #4
 80064da:	e880 0006 	stmia.w	r0, {r1, r2}
 80064de:	461a      	mov	r2, r3
 80064e0:	4623      	mov	r3, r4
 80064e2:	73fb      	strb	r3, [r7, #15]
 80064e4:	4613      	mov	r3, r2
 80064e6:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80064e8:	4b38      	ldr	r3, [pc, #224]	; (80065cc <OLED_WriteChar+0xfc>)
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	793b      	ldrb	r3, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	2b7f      	cmp	r3, #127	; 0x7f
 80064f4:	dc06      	bgt.n	8006504 <OLED_WriteChar+0x34>
		OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight))
 80064f6:	4b35      	ldr	r3, [pc, #212]	; (80065cc <OLED_WriteChar+0xfc>)
 80064f8:	885b      	ldrh	r3, [r3, #2]
 80064fa:	461a      	mov	r2, r3
 80064fc:	797b      	ldrb	r3, [r7, #5]
 80064fe:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8006500:	2b3f      	cmp	r3, #63	; 0x3f
 8006502:	dd01      	ble.n	8006508 <OLED_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8006504:	2300      	movs	r3, #0
 8006506:	e05d      	b.n	80065c4 <OLED_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e04c      	b.n	80065a8 <OLED_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	3b20      	subs	r3, #32
 8006514:	7979      	ldrb	r1, [r7, #5]
 8006516:	fb01 f303 	mul.w	r3, r1, r3
 800651a:	4619      	mov	r1, r3
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	440b      	add	r3, r1
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4413      	add	r3, r2
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	e034      	b.n	8006598 <OLED_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d012      	beq.n	8006564 <OLED_WriteChar+0x94>
			{
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 800653e:	4b23      	ldr	r3, [pc, #140]	; (80065cc <OLED_WriteChar+0xfc>)
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	4413      	add	r3, r2
 800654a:	b2d8      	uxtb	r0, r3
 800654c:	4b1f      	ldr	r3, [pc, #124]	; (80065cc <OLED_WriteChar+0xfc>)
 800654e:	885b      	ldrh	r3, [r3, #2]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	4413      	add	r3, r2
 8006558:	b2db      	uxtb	r3, r3
 800655a:	7bba      	ldrb	r2, [r7, #14]
 800655c:	4619      	mov	r1, r3
 800655e:	f7ff ff57 	bl	8006410 <OLED_DrawPixel>
 8006562:	e016      	b.n	8006592 <OLED_WriteChar+0xc2>
			} 
			else 
			{
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 8006564:	4b19      	ldr	r3, [pc, #100]	; (80065cc <OLED_WriteChar+0xfc>)
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	4413      	add	r3, r2
 8006570:	b2d8      	uxtb	r0, r3
 8006572:	4b16      	ldr	r3, [pc, #88]	; (80065cc <OLED_WriteChar+0xfc>)
 8006574:	885b      	ldrh	r3, [r3, #2]
 8006576:	b2da      	uxtb	r2, r3
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4413      	add	r3, r2
 800657e:	b2d9      	uxtb	r1, r3
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf0c      	ite	eq
 8006586:	2301      	moveq	r3, #1
 8006588:	2300      	movne	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	f7ff ff3f 	bl	8006410 <OLED_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	3301      	adds	r3, #1
 8006596:	61bb      	str	r3, [r7, #24]
 8006598:	793b      	ldrb	r3, [r7, #4]
 800659a:	461a      	mov	r2, r3
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	4293      	cmp	r3, r2
 80065a0:	d3c5      	bcc.n	800652e <OLED_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	3301      	adds	r3, #1
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	797b      	ldrb	r3, [r7, #5]
 80065aa:	461a      	mov	r2, r3
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d3ad      	bcc.n	800650e <OLED_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	OLED.CurrentX += Font.FontWidth;
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <OLED_WriteChar+0xfc>)
 80065b4:	881a      	ldrh	r2, [r3, #0]
 80065b6:	793b      	ldrb	r3, [r7, #4]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	b29a      	uxth	r2, r3
 80065be:	4b03      	ldr	r3, [pc, #12]	; (80065cc <OLED_WriteChar+0xfc>)
 80065c0:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3724      	adds	r7, #36	; 0x24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd90      	pop	{r4, r7, pc}
 80065cc:	200001b0 	.word	0x200001b0

080065d0 <OLED_WriteString>:

//
//  Write full string to screenbuffer
//
char OLED_WriteString(char* str, FontDef Font, OLED_COLOR color)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	1d38      	adds	r0, r7, #4
 80065da:	e880 0006 	stmia.w	r0, {r1, r2}
 80065de:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 80065e0:	e012      	b.n	8006608 <OLED_WriteString+0x38>
	{
		if (OLED_WriteChar(*str, Font, color) != *str)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	7818      	ldrb	r0, [r3, #0]
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	1d3a      	adds	r2, r7, #4
 80065ea:	ca06      	ldmia	r2, {r1, r2}
 80065ec:	f7ff ff70 	bl	80064d0 <OLED_WriteChar>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d002      	beq.n	8006602 <OLED_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	e008      	b.n	8006614 <OLED_WriteString+0x44>
		}
		
		// Next char
		str++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3301      	adds	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e8      	bne.n	80065e2 <OLED_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	781b      	ldrb	r3, [r3, #0]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <OLED_SetCursor>:
//
//	Position the cursor
//

void OLED_SetCursor(uint8_t x, uint8_t y) 
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	460a      	mov	r2, r1
 8006626:	71fb      	strb	r3, [r7, #7]
 8006628:	4613      	mov	r3, r2
 800662a:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	b29a      	uxth	r2, r3
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <OLED_SetCursor+0x2c>)
 8006632:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 8006634:	79bb      	ldrb	r3, [r7, #6]
 8006636:	b29a      	uxth	r2, r3
 8006638:	4b03      	ldr	r3, [pc, #12]	; (8006648 <OLED_SetCursor+0x2c>)
 800663a:	805a      	strh	r2, [r3, #2]
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	200001b0 	.word	0x200001b0

0800664c <saatAyarla>:
 *      Author: tosun_n
 */
#include "include_Ap.h"

void saatAyarla()
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_TimeTypeDef sTime;
//	sTime.TimeFormat=RTC_HOURFORMAT12_AM;
	sTime.Hours=SaatAry[0];
 8006652:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <saatAyarla+0x44>)
 8006654:	f993 3000 	ldrsb.w	r3, [r3]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes=SaatAry[1];
 800665c:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <saatAyarla+0x44>)
 800665e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	717b      	strb	r3, [r7, #5]
	sTime.Seconds=SaatAry[2];
 8006666:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <saatAyarla+0x44>)
 8006668:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	71bb      	strb	r3, [r7, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006670:	1d3b      	adds	r3, r7, #4
 8006672:	2200      	movs	r2, #0
 8006674:	4619      	mov	r1, r3
 8006676:	4807      	ldr	r0, [pc, #28]	; (8006694 <saatAyarla+0x48>)
 8006678:	f7fe f9ad 	bl	80049d6 <HAL_RTC_SetTime>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <saatAyarla+0x3a>
		Error_Handler();
 8006682:	f7fa f9b7 	bl	80009f4 <Error_Handler>
	}
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	2000098c 	.word	0x2000098c
 8006694:	20000990 	.word	0x20000990

08006698 <alarmAyarla>:

void alarmAyarla()
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	; 0x28
 800669c:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_AlarmTypeDef sAlarm;
//	sAlarm.AlarmTime.TimeFormat=RTC_HOURFORMAT12_AM;
	sAlarm.AlarmTime.Hours=SaatAry[0];
 800669e:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <alarmAyarla+0x48>)
 80066a0:	f993 3000 	ldrsb.w	r3, [r3]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes=SaatAry[1];
 80066a8:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <alarmAyarla+0x48>)
 80066aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds=SaatAry[2];
 80066b2:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <alarmAyarla+0x48>)
 80066b4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	70bb      	strb	r3, [r7, #2]
//	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
//	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
//	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
//	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
//	sAlarm.AlarmDateWeekDay = 5;
	sAlarm.Alarm = RTC_ALARM_A;
 80066bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80066c2:	463b      	mov	r3, r7
 80066c4:	2200      	movs	r2, #0
 80066c6:	4619      	mov	r1, r3
 80066c8:	4806      	ldr	r0, [pc, #24]	; (80066e4 <alarmAyarla+0x4c>)
 80066ca:	f7fe fb95 	bl	8004df8 <HAL_RTC_SetAlarm_IT>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <alarmAyarla+0x40>
	  {
	    Error_Handler();
 80066d4:	f7fa f98e 	bl	80009f4 <Error_Handler>
	  }
}
 80066d8:	bf00      	nop
 80066da:	3728      	adds	r7, #40	; 0x28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	2000098c 	.word	0x2000098c
 80066e4:	20000990 	.word	0x20000990

080066e8 <takvimAyarla>:

void takvimAyarla()
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_DateTypeDef sDate ;

	sDate.Date =takvimAry[0];
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <takvimAyarla+0x4c>)
 80066f0:	f993 3000 	ldrsb.w	r3, [r3]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	71bb      	strb	r3, [r7, #6]
	sDate.Month =takvimAry[1];
 80066f8:	4b0e      	ldr	r3, [pc, #56]	; (8006734 <takvimAyarla+0x4c>)
 80066fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	717b      	strb	r3, [r7, #5]
	sDate.Year =takvimAry[2];
 8006702:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <takvimAyarla+0x4c>)
 8006704:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	71fb      	strb	r3, [r7, #7]
	sDate.WeekDay = takvimAry[3];
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <takvimAyarla+0x4c>)
 800670e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	713b      	strb	r3, [r7, #4]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	2200      	movs	r2, #0
 800671a:	4619      	mov	r1, r3
 800671c:	4806      	ldr	r0, [pc, #24]	; (8006738 <takvimAyarla+0x50>)
 800671e:	f7fe fa75 	bl	8004c0c <HAL_RTC_SetDate>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <takvimAyarla+0x44>
	{
		Error_Handler();
 8006728:	f7fa f964 	bl	80009f4 <Error_Handler>
	}
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200009e8 	.word	0x200009e8
 8006738:	20000990 	.word	0x20000990

0800673c <saatiAyarlama>:

void saatiAyarlama(uint8_t y)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
	ayarlaPtr=&saatAyarla;
 8006746:	4b05      	ldr	r3, [pc, #20]	; (800675c <saatiAyarlama+0x20>)
 8006748:	4a05      	ldr	r2, [pc, #20]	; (8006760 <saatiAyarlama+0x24>)
 800674a:	601a      	str	r2, [r3, #0]
	saat_alarm_Ayarlama(y);
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f808 	bl	8006764 <saat_alarm_Ayarlama>
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	200009ec 	.word	0x200009ec
 8006760:	0800664d 	.word	0x0800664d

08006764 <saat_alarm_Ayarlama>:

void saat_alarm_Ayarlama(uint8_t yKonumu) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]

char saatYer[16];
	if (durum) {
 800676e:	4b90      	ldr	r3, [pc, #576]	; (80069b0 <saat_alarm_Ayarlama+0x24c>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80cf 	beq.w	8006916 <saat_alarm_Ayarlama+0x1b2>

		switch (Key) {
 8006778:	4b8e      	ldr	r3, [pc, #568]	; (80069b4 <saat_alarm_Ayarlama+0x250>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2bb0      	cmp	r3, #176	; 0xb0
 800677e:	d034      	beq.n	80067ea <saat_alarm_Ayarlama+0x86>
 8006780:	2bb0      	cmp	r3, #176	; 0xb0
 8006782:	dc02      	bgt.n	800678a <saat_alarm_Ayarlama+0x26>
 8006784:	2b70      	cmp	r3, #112	; 0x70
 8006786:	d006      	beq.n	8006796 <saat_alarm_Ayarlama+0x32>
 8006788:	e0ce      	b.n	8006928 <saat_alarm_Ayarlama+0x1c4>
 800678a:	2bd0      	cmp	r3, #208	; 0xd0
 800678c:	d053      	beq.n	8006836 <saat_alarm_Ayarlama+0xd2>
 800678e:	2be0      	cmp	r3, #224	; 0xe0
 8006790:	f000 8089 	beq.w	80068a6 <saat_alarm_Ayarlama+0x142>
 8006794:	e0c8      	b.n	8006928 <saat_alarm_Ayarlama+0x1c4>
		case T3DEGER:
			durum = false;
 8006796:	4b86      	ldr	r3, [pc, #536]	; (80069b0 <saat_alarm_Ayarlama+0x24c>)
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
			if(kayitOnayDurum)
 800679c:	4b86      	ldr	r3, [pc, #536]	; (80069b8 <saat_alarm_Ayarlama+0x254>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00f      	beq.n	80067c4 <saat_alarm_Ayarlama+0x60>
			{
				(ayarlaPtr)();
 80067a4:	4b85      	ldr	r3, [pc, #532]	; (80069bc <saat_alarm_Ayarlama+0x258>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4798      	blx	r3
				displaySelectKey=MENU_SISTEMI;
 80067aa:	4b85      	ldr	r3, [pc, #532]	; (80069c0 <saat_alarm_Ayarlama+0x25c>)
 80067ac:	2230      	movs	r2, #48	; 0x30
 80067ae:	701a      	strb	r2, [r3, #0]
				SaatAryNo=0;
 80067b0:	4b84      	ldr	r3, [pc, #528]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
				displayClean=true;
 80067b6:	4b84      	ldr	r3, [pc, #528]	; (80069c8 <saat_alarm_Ayarlama+0x264>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
				kayitOnayDurum=false;
 80067bc:	4b7e      	ldr	r3, [pc, #504]	; (80069b8 <saat_alarm_Ayarlama+0x254>)
 80067be:	2200      	movs	r2, #0
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	e008      	b.n	80067d6 <saat_alarm_Ayarlama+0x72>
			}
			else	SaatAryNo ++;
 80067c4:	4b7f      	ldr	r3, [pc, #508]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80067c6:	f993 3000 	ldrsb.w	r3, [r3]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	3301      	adds	r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	b25a      	sxtb	r2, r3
 80067d2:	4b7c      	ldr	r3, [pc, #496]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80067d4:	701a      	strb	r2, [r3, #0]

			if(SaatAryNo ==3)
 80067d6:	4b7b      	ldr	r3, [pc, #492]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80067d8:	f993 3000 	ldrsb.w	r3, [r3]
 80067dc:	2b03      	cmp	r3, #3
 80067de:	f040 809c 	bne.w	800691a <saat_alarm_Ayarlama+0x1b6>
			{
				kayitOnayDurum=true;
 80067e2:	4b75      	ldr	r3, [pc, #468]	; (80069b8 <saat_alarm_Ayarlama+0x254>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80067e8:	e097      	b.n	800691a <saat_alarm_Ayarlama+0x1b6>

		case T4DEGER:
			durum = false;
 80067ea:	4b71      	ldr	r3, [pc, #452]	; (80069b0 <saat_alarm_Ayarlama+0x24c>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
			if(kayitOnayDurum)
 80067f0:	4b71      	ldr	r3, [pc, #452]	; (80069b8 <saat_alarm_Ayarlama+0x254>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00c      	beq.n	8006812 <saat_alarm_Ayarlama+0xae>
			{
				displaySelectKey=MENU_SISTEMI;
 80067f8:	4b71      	ldr	r3, [pc, #452]	; (80069c0 <saat_alarm_Ayarlama+0x25c>)
 80067fa:	2230      	movs	r2, #48	; 0x30
 80067fc:	701a      	strb	r2, [r3, #0]
				SaatAryNo=0;
 80067fe:	4b71      	ldr	r3, [pc, #452]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006800:	2200      	movs	r2, #0
 8006802:	701a      	strb	r2, [r3, #0]
				displayClean=true;
 8006804:	4b70      	ldr	r3, [pc, #448]	; (80069c8 <saat_alarm_Ayarlama+0x264>)
 8006806:	2201      	movs	r2, #1
 8006808:	701a      	strb	r2, [r3, #0]
				kayitOnayDurum=false;
 800680a:	4b6b      	ldr	r3, [pc, #428]	; (80069b8 <saat_alarm_Ayarlama+0x254>)
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e008      	b.n	8006824 <saat_alarm_Ayarlama+0xc0>
			}
			else	SaatAryNo --;
 8006812:	4b6c      	ldr	r3, [pc, #432]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006814:	f993 3000 	ldrsb.w	r3, [r3]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	b25a      	sxtb	r2, r3
 8006820:	4b68      	ldr	r3, [pc, #416]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006822:	701a      	strb	r2, [r3, #0]

			if(SaatAryNo < 0)
 8006824:	4b67      	ldr	r3, [pc, #412]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006826:	f993 3000 	ldrsb.w	r3, [r3]
 800682a:	2b00      	cmp	r3, #0
 800682c:	da77      	bge.n	800691e <saat_alarm_Ayarlama+0x1ba>
			{
				SaatAryNo=2;
 800682e:	4b65      	ldr	r3, [pc, #404]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006830:	2202      	movs	r2, #2
 8006832:	701a      	strb	r2, [r3, #0]
			}

			break;
 8006834:	e073      	b.n	800691e <saat_alarm_Ayarlama+0x1ba>

		case T1DEGER:
			durum = false;
 8006836:	4b5e      	ldr	r3, [pc, #376]	; (80069b0 <saat_alarm_Ayarlama+0x24c>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
			SaatAry[SaatAryNo] ++;
 800683c:	4b61      	ldr	r3, [pc, #388]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 800683e:	f993 3000 	ldrsb.w	r3, [r3]
 8006842:	4a62      	ldr	r2, [pc, #392]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 8006844:	56d2      	ldrsb	r2, [r2, r3]
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	3201      	adds	r2, #1
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	b251      	sxtb	r1, r2
 800684e:	4a5f      	ldr	r2, [pc, #380]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 8006850:	54d1      	strb	r1, [r2, r3]
			if(SaatAryNo==0)
 8006852:	4b5c      	ldr	r3, [pc, #368]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006854:	f993 3000 	ldrsb.w	r3, [r3]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10f      	bne.n	800687c <saat_alarm_Ayarlama+0x118>
			{
				if(SaatAry[SaatAryNo]>23)
 800685c:	4b59      	ldr	r3, [pc, #356]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 800685e:	f993 3000 	ldrsb.w	r3, [r3]
 8006862:	461a      	mov	r2, r3
 8006864:	4b59      	ldr	r3, [pc, #356]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 8006866:	569b      	ldrsb	r3, [r3, r2]
 8006868:	2b17      	cmp	r3, #23
 800686a:	dd5a      	ble.n	8006922 <saat_alarm_Ayarlama+0x1be>
				{
					SaatAry[SaatAryNo]=0;
 800686c:	4b55      	ldr	r3, [pc, #340]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 800686e:	f993 3000 	ldrsb.w	r3, [r3]
 8006872:	461a      	mov	r2, r3
 8006874:	4b55      	ldr	r3, [pc, #340]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 8006876:	2100      	movs	r1, #0
 8006878:	5499      	strb	r1, [r3, r2]
				if(SaatAry[SaatAryNo]>59)
				{
					SaatAry[SaatAryNo]=0;
				}
			}
			break;
 800687a:	e052      	b.n	8006922 <saat_alarm_Ayarlama+0x1be>
			else if(SaatAryNo!=0)
 800687c:	4b51      	ldr	r3, [pc, #324]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 800687e:	f993 3000 	ldrsb.w	r3, [r3]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d04d      	beq.n	8006922 <saat_alarm_Ayarlama+0x1be>
				if(SaatAry[SaatAryNo]>59)
 8006886:	4b4f      	ldr	r3, [pc, #316]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006888:	f993 3000 	ldrsb.w	r3, [r3]
 800688c:	461a      	mov	r2, r3
 800688e:	4b4f      	ldr	r3, [pc, #316]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 8006890:	569b      	ldrsb	r3, [r3, r2]
 8006892:	2b3b      	cmp	r3, #59	; 0x3b
 8006894:	dd45      	ble.n	8006922 <saat_alarm_Ayarlama+0x1be>
					SaatAry[SaatAryNo]=0;
 8006896:	4b4b      	ldr	r3, [pc, #300]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006898:	f993 3000 	ldrsb.w	r3, [r3]
 800689c:	461a      	mov	r2, r3
 800689e:	4b4b      	ldr	r3, [pc, #300]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 80068a0:	2100      	movs	r1, #0
 80068a2:	5499      	strb	r1, [r3, r2]
			break;
 80068a4:	e03d      	b.n	8006922 <saat_alarm_Ayarlama+0x1be>

		case T2DEGER:
			durum = false;
 80068a6:	4b42      	ldr	r3, [pc, #264]	; (80069b0 <saat_alarm_Ayarlama+0x24c>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
			SaatAry[SaatAryNo] --;
 80068ac:	4b45      	ldr	r3, [pc, #276]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80068ae:	f993 3000 	ldrsb.w	r3, [r3]
 80068b2:	4a46      	ldr	r2, [pc, #280]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 80068b4:	56d2      	ldrsb	r2, [r2, r3]
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	3a01      	subs	r2, #1
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	b251      	sxtb	r1, r2
 80068be:	4a43      	ldr	r2, [pc, #268]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 80068c0:	54d1      	strb	r1, [r2, r3]
			if(SaatAryNo==0)
 80068c2:	4b40      	ldr	r3, [pc, #256]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80068c4:	f993 3000 	ldrsb.w	r3, [r3]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10f      	bne.n	80068ec <saat_alarm_Ayarlama+0x188>
			{
				if(SaatAry[SaatAryNo]<0)
 80068cc:	4b3d      	ldr	r3, [pc, #244]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80068ce:	f993 3000 	ldrsb.w	r3, [r3]
 80068d2:	461a      	mov	r2, r3
 80068d4:	4b3d      	ldr	r3, [pc, #244]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 80068d6:	569b      	ldrsb	r3, [r3, r2]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	da24      	bge.n	8006926 <saat_alarm_Ayarlama+0x1c2>
				{
					SaatAry[SaatAryNo]=23;
 80068dc:	4b39      	ldr	r3, [pc, #228]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80068de:	f993 3000 	ldrsb.w	r3, [r3]
 80068e2:	461a      	mov	r2, r3
 80068e4:	4b39      	ldr	r3, [pc, #228]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 80068e6:	2117      	movs	r1, #23
 80068e8:	5499      	strb	r1, [r3, r2]
				if(SaatAry[SaatAryNo]<0)
				{
					SaatAry[SaatAryNo]=59;
				}
			}
			break;
 80068ea:	e01c      	b.n	8006926 <saat_alarm_Ayarlama+0x1c2>
			else if(SaatAryNo!=0)
 80068ec:	4b35      	ldr	r3, [pc, #212]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80068ee:	f993 3000 	ldrsb.w	r3, [r3]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d017      	beq.n	8006926 <saat_alarm_Ayarlama+0x1c2>
				if(SaatAry[SaatAryNo]<0)
 80068f6:	4b33      	ldr	r3, [pc, #204]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 80068f8:	f993 3000 	ldrsb.w	r3, [r3]
 80068fc:	461a      	mov	r2, r3
 80068fe:	4b33      	ldr	r3, [pc, #204]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 8006900:	569b      	ldrsb	r3, [r3, r2]
 8006902:	2b00      	cmp	r3, #0
 8006904:	da0f      	bge.n	8006926 <saat_alarm_Ayarlama+0x1c2>
					SaatAry[SaatAryNo]=59;
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006908:	f993 3000 	ldrsb.w	r3, [r3]
 800690c:	461a      	mov	r2, r3
 800690e:	4b2f      	ldr	r3, [pc, #188]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 8006910:	213b      	movs	r1, #59	; 0x3b
 8006912:	5499      	strb	r1, [r3, r2]
			break;
 8006914:	e007      	b.n	8006926 <saat_alarm_Ayarlama+0x1c2>

		default:
 8006916:	bf00      	nop
 8006918:	e006      	b.n	8006928 <saat_alarm_Ayarlama+0x1c4>
			break;
 800691a:	bf00      	nop
 800691c:	e004      	b.n	8006928 <saat_alarm_Ayarlama+0x1c4>
			break;
 800691e:	bf00      	nop
 8006920:	e002      	b.n	8006928 <saat_alarm_Ayarlama+0x1c4>
			break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <saat_alarm_Ayarlama+0x1c4>
			break;
 8006926:	bf00      	nop
			;
		}
	}
	if(kayitOnayDurum)
 8006928:	4b23      	ldr	r3, [pc, #140]	; (80069b8 <saat_alarm_Ayarlama+0x254>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <saat_alarm_Ayarlama+0x1d6>
	{
		kayitSorma(10,yKonumu);
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	4619      	mov	r1, r3
 8006934:	200a      	movs	r0, #10
 8006936:	f000 fb95 	bl	8007064 <kayitSorma>
	}
	sprintf(saatYer,"%02d:%02d:%02d",SaatAry[0],SaatAry[1],SaatAry[2]);
 800693a:	4b24      	ldr	r3, [pc, #144]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 800693c:	f993 3000 	ldrsb.w	r3, [r3]
 8006940:	461a      	mov	r2, r3
 8006942:	4b22      	ldr	r3, [pc, #136]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 8006944:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006948:	4619      	mov	r1, r3
 800694a:	4b20      	ldr	r3, [pc, #128]	; (80069cc <saat_alarm_Ayarlama+0x268>)
 800694c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006950:	f107 0008 	add.w	r0, r7, #8
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	460b      	mov	r3, r1
 8006958:	491d      	ldr	r1, [pc, #116]	; (80069d0 <saat_alarm_Ayarlama+0x26c>)
 800695a:	f001 f8d9 	bl	8007b10 <siprintf>
	OLED_SetCursor(10, yKonumu);
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	4619      	mov	r1, r3
 8006962:	200a      	movs	r0, #10
 8006964:	f7ff fe5a 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(saatYer, Font_11x18, White);
 8006968:	4a1a      	ldr	r2, [pc, #104]	; (80069d4 <saat_alarm_Ayarlama+0x270>)
 800696a:	f107 0008 	add.w	r0, r7, #8
 800696e:	2301      	movs	r3, #1
 8006970:	ca06      	ldmia	r2, {r1, r2}
 8006972:	f7ff fe2d 	bl	80065d0 <OLED_WriteString>
	if(durumFlash)
 8006976:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <saat_alarm_Ayarlama+0x274>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d014      	beq.n	80069a8 <saat_alarm_Ayarlama+0x244>
	{
	OLED_SetCursor(SaatAryNo*33+10, yKonumu);
 800697e:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <saat_alarm_Ayarlama+0x260>)
 8006980:	f993 3000 	ldrsb.w	r3, [r3]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	0152      	lsls	r2, r2, #5
 800698a:	4413      	add	r3, r2
 800698c:	b2db      	uxtb	r3, r3
 800698e:	330a      	adds	r3, #10
 8006990:	b2db      	uxtb	r3, r3
 8006992:	79fa      	ldrb	r2, [r7, #7]
 8006994:	4611      	mov	r1, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fe40 	bl	800661c <OLED_SetCursor>
	OLED_WriteString("  ", Font_11x18, White);
 800699c:	4a0d      	ldr	r2, [pc, #52]	; (80069d4 <saat_alarm_Ayarlama+0x270>)
 800699e:	2301      	movs	r3, #1
 80069a0:	ca06      	ldmia	r2, {r1, r2}
 80069a2:	480e      	ldr	r0, [pc, #56]	; (80069dc <saat_alarm_Ayarlama+0x278>)
 80069a4:	f7ff fe14 	bl	80065d0 <OLED_WriteString>
	}
}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000848 	.word	0x20000848
 80069b4:	20000a49 	.word	0x20000a49
 80069b8:	20000a48 	.word	0x20000a48
 80069bc:	200009ec 	.word	0x200009ec
 80069c0:	20000a4a 	.word	0x20000a4a
 80069c4:	20000a50 	.word	0x20000a50
 80069c8:	20000a28 	.word	0x20000a28
 80069cc:	2000098c 	.word	0x2000098c
 80069d0:	08008348 	.word	0x08008348
 80069d4:	20000014 	.word	0x20000014
 80069d8:	20000805 	.word	0x20000805
 80069dc:	08008358 	.word	0x08008358

080069e0 <alarmAyarlama>:

void alarmAyarlama(uint8_t y) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	71fb      	strb	r3, [r7, #7]

	ayarlaPtr=&alarmAyarla;
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <alarmAyarlama+0x20>)
 80069ec:	4a05      	ldr	r2, [pc, #20]	; (8006a04 <alarmAyarlama+0x24>)
 80069ee:	601a      	str	r2, [r3, #0]
	saat_alarm_Ayarlama(y);
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff feb6 	bl	8006764 <saat_alarm_Ayarlama>
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	200009ec 	.word	0x200009ec
 8006a04:	08006699 	.word	0x08006699

08006a08 <takvimiAyarlama>:

void takvimiAyarlama(uint8_t y)
{
 8006a08:	b5b0      	push	{r4, r5, r7, lr}
 8006a0a:	b08e      	sub	sp, #56	; 0x38
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	4603      	mov	r3, r0
 8006a10:	71fb      	strb	r3, [r7, #7]
	char takvimYer[12];
 	char* weekDay[] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
 8006a12:	4b9e      	ldr	r3, [pc, #632]	; (8006c8c <takvimiAyarlama+0x284>)
 8006a14:	f107 0408 	add.w	r4, r7, #8
 8006a18:	461d      	mov	r5, r3
 8006a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Saturday", "Sunday"};

		if (durum) {
 8006a26:	4b9a      	ldr	r3, [pc, #616]	; (8006c90 <takvimiAyarlama+0x288>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8126 	beq.w	8006c7c <takvimiAyarlama+0x274>

			switch (Key) {
 8006a30:	4b98      	ldr	r3, [pc, #608]	; (8006c94 <takvimiAyarlama+0x28c>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2bb0      	cmp	r3, #176	; 0xb0
 8006a36:	d033      	beq.n	8006aa0 <takvimiAyarlama+0x98>
 8006a38:	2bb0      	cmp	r3, #176	; 0xb0
 8006a3a:	dc02      	bgt.n	8006a42 <takvimiAyarlama+0x3a>
 8006a3c:	2b70      	cmp	r3, #112	; 0x70
 8006a3e:	d006      	beq.n	8006a4e <takvimiAyarlama+0x46>
 8006a40:	e135      	b.n	8006cae <takvimiAyarlama+0x2a6>
 8006a42:	2bd0      	cmp	r3, #208	; 0xd0
 8006a44:	d053      	beq.n	8006aee <takvimiAyarlama+0xe6>
 8006a46:	2be0      	cmp	r3, #224	; 0xe0
 8006a48:	f000 80b6 	beq.w	8006bb8 <takvimiAyarlama+0x1b0>
 8006a4c:	e12f      	b.n	8006cae <takvimiAyarlama+0x2a6>
			case T3DEGER:
				durum = false;
 8006a4e:	4b90      	ldr	r3, [pc, #576]	; (8006c90 <takvimiAyarlama+0x288>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	701a      	strb	r2, [r3, #0]

				if(kayitOnayDurum)
 8006a54:	4b90      	ldr	r3, [pc, #576]	; (8006c98 <takvimiAyarlama+0x290>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00e      	beq.n	8006a7a <takvimiAyarlama+0x72>
				{
					takvimAyarla();
 8006a5c:	f7ff fe44 	bl	80066e8 <takvimAyarla>
					displaySelectKey=MENU_SISTEMI;
 8006a60:	4b8e      	ldr	r3, [pc, #568]	; (8006c9c <takvimiAyarlama+0x294>)
 8006a62:	2230      	movs	r2, #48	; 0x30
 8006a64:	701a      	strb	r2, [r3, #0]
					takvimAryNo=0;
 8006a66:	4b8e      	ldr	r3, [pc, #568]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]
					displayClean=true;
 8006a6c:	4b8d      	ldr	r3, [pc, #564]	; (8006ca4 <takvimiAyarlama+0x29c>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
					kayitOnayDurum=false;
 8006a72:	4b89      	ldr	r3, [pc, #548]	; (8006c98 <takvimiAyarlama+0x290>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	e008      	b.n	8006a8c <takvimiAyarlama+0x84>
				}
				else	takvimAryNo ++;
 8006a7a:	4b89      	ldr	r3, [pc, #548]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006a7c:	f993 3000 	ldrsb.w	r3, [r3]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	3301      	adds	r3, #1
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	b25a      	sxtb	r2, r3
 8006a88:	4b85      	ldr	r3, [pc, #532]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006a8a:	701a      	strb	r2, [r3, #0]

				if(takvimAryNo ==4)
 8006a8c:	4b84      	ldr	r3, [pc, #528]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	f040 80f4 	bne.w	8006c80 <takvimiAyarlama+0x278>
				{
					kayitOnayDurum=true;
 8006a98:	4b7f      	ldr	r3, [pc, #508]	; (8006c98 <takvimiAyarlama+0x290>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]
				}
				break;
 8006a9e:	e0ef      	b.n	8006c80 <takvimiAyarlama+0x278>

			case T4DEGER:
				durum = false;
 8006aa0:	4b7b      	ldr	r3, [pc, #492]	; (8006c90 <takvimiAyarlama+0x288>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
				if(kayitOnayDurum)
 8006aa6:	4b7c      	ldr	r3, [pc, #496]	; (8006c98 <takvimiAyarlama+0x290>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <takvimiAyarlama+0xc0>
				{
					displaySelectKey=MENU_SISTEMI;
 8006aae:	4b7b      	ldr	r3, [pc, #492]	; (8006c9c <takvimiAyarlama+0x294>)
 8006ab0:	2230      	movs	r2, #48	; 0x30
 8006ab2:	701a      	strb	r2, [r3, #0]
					takvimAryNo=0;
 8006ab4:	4b7a      	ldr	r3, [pc, #488]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	701a      	strb	r2, [r3, #0]
					displayClean=true;
 8006aba:	4b7a      	ldr	r3, [pc, #488]	; (8006ca4 <takvimiAyarlama+0x29c>)
 8006abc:	2201      	movs	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
					kayitOnayDurum=false;
 8006ac0:	4b75      	ldr	r3, [pc, #468]	; (8006c98 <takvimiAyarlama+0x290>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e008      	b.n	8006ada <takvimiAyarlama+0xd2>
				}
				else	takvimAryNo --;
 8006ac8:	4b75      	ldr	r3, [pc, #468]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006aca:	f993 3000 	ldrsb.w	r3, [r3]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	b25a      	sxtb	r2, r3
 8006ad6:	4b72      	ldr	r3, [pc, #456]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006ad8:	701a      	strb	r2, [r3, #0]

				if(takvimAryNo < 0)
 8006ada:	4b71      	ldr	r3, [pc, #452]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006adc:	f993 3000 	ldrsb.w	r3, [r3]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f280 80cf 	bge.w	8006c84 <takvimiAyarlama+0x27c>
				{
					takvimAryNo=3;
 8006ae6:	4b6e      	ldr	r3, [pc, #440]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006ae8:	2203      	movs	r2, #3
 8006aea:	701a      	strb	r2, [r3, #0]
				}

				break;
 8006aec:	e0ca      	b.n	8006c84 <takvimiAyarlama+0x27c>

			case T1DEGER:
				durum = false;
 8006aee:	4b68      	ldr	r3, [pc, #416]	; (8006c90 <takvimiAyarlama+0x288>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
				takvimAry[takvimAryNo] ++;
 8006af4:	4b6a      	ldr	r3, [pc, #424]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006af6:	f993 3000 	ldrsb.w	r3, [r3]
 8006afa:	4a6b      	ldr	r2, [pc, #428]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006afc:	56d2      	ldrsb	r2, [r2, r3]
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	3201      	adds	r2, #1
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	b251      	sxtb	r1, r2
 8006b06:	4a68      	ldr	r2, [pc, #416]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006b08:	54d1      	strb	r1, [r2, r3]
				if(takvimAryNo==0)
 8006b0a:	4b65      	ldr	r3, [pc, #404]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b0c:	f993 3000 	ldrsb.w	r3, [r3]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d110      	bne.n	8006b36 <takvimiAyarlama+0x12e>
				{
					if(takvimAry[takvimAryNo]>31)
 8006b14:	4b62      	ldr	r3, [pc, #392]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b16:	f993 3000 	ldrsb.w	r3, [r3]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4b62      	ldr	r3, [pc, #392]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006b1e:	569b      	ldrsb	r3, [r3, r2]
 8006b20:	2b1f      	cmp	r3, #31
 8006b22:	f340 80b1 	ble.w	8006c88 <takvimiAyarlama+0x280>
					{
						takvimAry[takvimAryNo]=1;
 8006b26:	4b5e      	ldr	r3, [pc, #376]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b28:	f993 3000 	ldrsb.w	r3, [r3]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4b5e      	ldr	r3, [pc, #376]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006b30:	2101      	movs	r1, #1
 8006b32:	5499      	strb	r1, [r3, r2]
					if(takvimAry[takvimAryNo]>7)
					{
						takvimAry[takvimAryNo]=1;
					}
				}
				break;
 8006b34:	e0a8      	b.n	8006c88 <takvimiAyarlama+0x280>
				else if(takvimAryNo==1)
 8006b36:	4b5a      	ldr	r3, [pc, #360]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b38:	f993 3000 	ldrsb.w	r3, [r3]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d110      	bne.n	8006b62 <takvimiAyarlama+0x15a>
					if(takvimAry[takvimAryNo]>12)
 8006b40:	4b57      	ldr	r3, [pc, #348]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b42:	f993 3000 	ldrsb.w	r3, [r3]
 8006b46:	461a      	mov	r2, r3
 8006b48:	4b57      	ldr	r3, [pc, #348]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006b4a:	569b      	ldrsb	r3, [r3, r2]
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	f340 809b 	ble.w	8006c88 <takvimiAyarlama+0x280>
						takvimAry[takvimAryNo]=1;
 8006b52:	4b53      	ldr	r3, [pc, #332]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b54:	f993 3000 	ldrsb.w	r3, [r3]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4b53      	ldr	r3, [pc, #332]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	5499      	strb	r1, [r3, r2]
				break;
 8006b60:	e092      	b.n	8006c88 <takvimiAyarlama+0x280>
				else if(takvimAryNo==2)
 8006b62:	4b4f      	ldr	r3, [pc, #316]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b64:	f993 3000 	ldrsb.w	r3, [r3]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d110      	bne.n	8006b8e <takvimiAyarlama+0x186>
					if(takvimAry[takvimAryNo]>99)
 8006b6c:	4b4c      	ldr	r3, [pc, #304]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8006b72:	461a      	mov	r2, r3
 8006b74:	4b4c      	ldr	r3, [pc, #304]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006b76:	569b      	ldrsb	r3, [r3, r2]
 8006b78:	2b63      	cmp	r3, #99	; 0x63
 8006b7a:	f340 8085 	ble.w	8006c88 <takvimiAyarlama+0x280>
						takvimAry[takvimAryNo]=0;
 8006b7e:	4b48      	ldr	r3, [pc, #288]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b80:	f993 3000 	ldrsb.w	r3, [r3]
 8006b84:	461a      	mov	r2, r3
 8006b86:	4b48      	ldr	r3, [pc, #288]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006b88:	2100      	movs	r1, #0
 8006b8a:	5499      	strb	r1, [r3, r2]
				break;
 8006b8c:	e07c      	b.n	8006c88 <takvimiAyarlama+0x280>
				else if(takvimAryNo==3)
 8006b8e:	4b44      	ldr	r3, [pc, #272]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b90:	f993 3000 	ldrsb.w	r3, [r3]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d177      	bne.n	8006c88 <takvimiAyarlama+0x280>
					if(takvimAry[takvimAryNo]>7)
 8006b98:	4b41      	ldr	r3, [pc, #260]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4b41      	ldr	r3, [pc, #260]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006ba2:	569b      	ldrsb	r3, [r3, r2]
 8006ba4:	2b07      	cmp	r3, #7
 8006ba6:	dd6f      	ble.n	8006c88 <takvimiAyarlama+0x280>
						takvimAry[takvimAryNo]=1;
 8006ba8:	4b3d      	ldr	r3, [pc, #244]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006baa:	f993 3000 	ldrsb.w	r3, [r3]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4b3d      	ldr	r3, [pc, #244]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	5499      	strb	r1, [r3, r2]
				break;
 8006bb6:	e067      	b.n	8006c88 <takvimiAyarlama+0x280>

			case T2DEGER:
				durum = false;
 8006bb8:	4b35      	ldr	r3, [pc, #212]	; (8006c90 <takvimiAyarlama+0x288>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
				takvimAry[takvimAryNo] --;
 8006bbe:	4b38      	ldr	r3, [pc, #224]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8006bc4:	4a38      	ldr	r2, [pc, #224]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006bc6:	56d2      	ldrsb	r2, [r2, r3]
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	3a01      	subs	r2, #1
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	b251      	sxtb	r1, r2
 8006bd0:	4a35      	ldr	r2, [pc, #212]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006bd2:	54d1      	strb	r1, [r2, r3]
				if(takvimAryNo==0)
 8006bd4:	4b32      	ldr	r3, [pc, #200]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006bd6:	f993 3000 	ldrsb.w	r3, [r3]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10f      	bne.n	8006bfe <takvimiAyarlama+0x1f6>
				{
					if(takvimAry[takvimAryNo]<1)
 8006bde:	4b30      	ldr	r3, [pc, #192]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006be0:	f993 3000 	ldrsb.w	r3, [r3]
 8006be4:	461a      	mov	r2, r3
 8006be6:	4b30      	ldr	r3, [pc, #192]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006be8:	569b      	ldrsb	r3, [r3, r2]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	dc5e      	bgt.n	8006cac <takvimiAyarlama+0x2a4>
					{
						takvimAry[takvimAryNo]=31;
 8006bee:	4b2c      	ldr	r3, [pc, #176]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4b2c      	ldr	r3, [pc, #176]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006bf8:	211f      	movs	r1, #31
 8006bfa:	5499      	strb	r1, [r3, r2]
					if(takvimAry[takvimAryNo]<1)
					{
						takvimAry[takvimAryNo]=7;
					}
				}
				break;
 8006bfc:	e056      	b.n	8006cac <takvimiAyarlama+0x2a4>
				else if(takvimAryNo==1)
 8006bfe:	4b28      	ldr	r3, [pc, #160]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c00:	f993 3000 	ldrsb.w	r3, [r3]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d10f      	bne.n	8006c28 <takvimiAyarlama+0x220>
					if(takvimAry[takvimAryNo]<1)
 8006c08:	4b25      	ldr	r3, [pc, #148]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4b25      	ldr	r3, [pc, #148]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006c12:	569b      	ldrsb	r3, [r3, r2]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dc49      	bgt.n	8006cac <takvimiAyarlama+0x2a4>
						takvimAry[takvimAryNo]=12;
 8006c18:	4b21      	ldr	r3, [pc, #132]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	4b21      	ldr	r3, [pc, #132]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006c22:	210c      	movs	r1, #12
 8006c24:	5499      	strb	r1, [r3, r2]
				break;
 8006c26:	e041      	b.n	8006cac <takvimiAyarlama+0x2a4>
				else if(takvimAryNo==2)
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c2a:	f993 3000 	ldrsb.w	r3, [r3]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d10f      	bne.n	8006c52 <takvimiAyarlama+0x24a>
					if(takvimAry[takvimAryNo]<0)
 8006c32:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c34:	f993 3000 	ldrsb.w	r3, [r3]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006c3c:	569b      	ldrsb	r3, [r3, r2]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da34      	bge.n	8006cac <takvimiAyarlama+0x2a4>
						takvimAry[takvimAryNo]=99;
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c44:	f993 3000 	ldrsb.w	r3, [r3]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4b17      	ldr	r3, [pc, #92]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006c4c:	2163      	movs	r1, #99	; 0x63
 8006c4e:	5499      	strb	r1, [r3, r2]
				break;
 8006c50:	e02c      	b.n	8006cac <takvimiAyarlama+0x2a4>
				else if(takvimAryNo==3)
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c54:	f993 3000 	ldrsb.w	r3, [r3]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d127      	bne.n	8006cac <takvimiAyarlama+0x2a4>
					if(takvimAry[takvimAryNo]<1)
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8006c62:	461a      	mov	r2, r3
 8006c64:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006c66:	569b      	ldrsb	r3, [r3, r2]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	dc1f      	bgt.n	8006cac <takvimiAyarlama+0x2a4>
						takvimAry[takvimAryNo]=7;
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <takvimiAyarlama+0x298>)
 8006c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8006c72:	461a      	mov	r2, r3
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <takvimiAyarlama+0x2a0>)
 8006c76:	2107      	movs	r1, #7
 8006c78:	5499      	strb	r1, [r3, r2]
				break;
 8006c7a:	e017      	b.n	8006cac <takvimiAyarlama+0x2a4>
				break;

			default:
 8006c7c:	bf00      	nop
 8006c7e:	e016      	b.n	8006cae <takvimiAyarlama+0x2a6>
				break;
 8006c80:	bf00      	nop
 8006c82:	e014      	b.n	8006cae <takvimiAyarlama+0x2a6>
				break;
 8006c84:	bf00      	nop
 8006c86:	e012      	b.n	8006cae <takvimiAyarlama+0x2a6>
				break;
 8006c88:	bf00      	nop
 8006c8a:	e010      	b.n	8006cae <takvimiAyarlama+0x2a6>
 8006c8c:	080083c4 	.word	0x080083c4
 8006c90:	20000848 	.word	0x20000848
 8006c94:	20000a49 	.word	0x20000a49
 8006c98:	20000a48 	.word	0x20000a48
 8006c9c:	20000a4a 	.word	0x20000a4a
 8006ca0:	20000804 	.word	0x20000804
 8006ca4:	20000a28 	.word	0x20000a28
 8006ca8:	200009e8 	.word	0x200009e8
				break;
 8006cac:	bf00      	nop
				;
			}
		}
		if(kayitOnayDurum)
 8006cae:	4b46      	ldr	r3, [pc, #280]	; (8006dc8 <takvimiAyarlama+0x3c0>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d006      	beq.n	8006cc4 <takvimiAyarlama+0x2bc>
		{
			kayitSorma(10,y+10);
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	330a      	adds	r3, #10
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	200a      	movs	r0, #10
 8006cc0:	f000 f9d0 	bl	8007064 <kayitSorma>
		}

		sprintf(takvimYer,"%02d-%02d-20%02d",takvimAry[0],takvimAry[1],takvimAry[2]);
 8006cc4:	4b41      	ldr	r3, [pc, #260]	; (8006dcc <takvimiAyarlama+0x3c4>)
 8006cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <takvimiAyarlama+0x3c4>)
 8006cce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4b3d      	ldr	r3, [pc, #244]	; (8006dcc <takvimiAyarlama+0x3c4>)
 8006cd6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006cda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	493b      	ldr	r1, [pc, #236]	; (8006dd0 <takvimiAyarlama+0x3c8>)
 8006ce4:	f000 ff14 	bl	8007b10 <siprintf>
		OLED_SetCursor(0, y);
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	4619      	mov	r1, r3
 8006cec:	2000      	movs	r0, #0
 8006cee:	f7ff fc95 	bl	800661c <OLED_SetCursor>
		OLED_WriteString(takvimYer, Font_11x18, White);
 8006cf2:	4a38      	ldr	r2, [pc, #224]	; (8006dd4 <takvimiAyarlama+0x3cc>)
 8006cf4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	ca06      	ldmia	r2, {r1, r2}
 8006cfc:	f7ff fc68 	bl	80065d0 <OLED_WriteString>
		OLED_SetCursor(30, y+20);
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	3314      	adds	r3, #20
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	4619      	mov	r1, r3
 8006d08:	201e      	movs	r0, #30
 8006d0a:	f7ff fc87 	bl	800661c <OLED_SetCursor>
		OLED_WriteString(weekDay[takvimAry[3]-1], Font_7x10, White);  //
 8006d0e:	4b2f      	ldr	r3, [pc, #188]	; (8006dcc <takvimiAyarlama+0x3c4>)
 8006d10:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8006d22:	4a2d      	ldr	r2, [pc, #180]	; (8006dd8 <takvimiAyarlama+0x3d0>)
 8006d24:	2301      	movs	r3, #1
 8006d26:	ca06      	ldmia	r2, {r1, r2}
 8006d28:	f7ff fc52 	bl	80065d0 <OLED_WriteString>
		if(durumFlash)
 8006d2c:	4b2b      	ldr	r3, [pc, #172]	; (8006ddc <takvimiAyarlama+0x3d4>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d045      	beq.n	8006dc0 <takvimiAyarlama+0x3b8>
		{
			if(takvimAryNo<2)
 8006d34:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <takvimiAyarlama+0x3d8>)
 8006d36:	f993 3000 	ldrsb.w	r3, [r3]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	dc13      	bgt.n	8006d66 <takvimiAyarlama+0x35e>
			{
				OLED_SetCursor(takvimAryNo*33, y);
 8006d3e:	4b28      	ldr	r3, [pc, #160]	; (8006de0 <takvimiAyarlama+0x3d8>)
 8006d40:	f993 3000 	ldrsb.w	r3, [r3]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	0152      	lsls	r2, r2, #5
 8006d4a:	4413      	add	r3, r2
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	79fa      	ldrb	r2, [r7, #7]
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fc62 	bl	800661c <OLED_SetCursor>
				OLED_WriteString("  ", Font_11x18, White);
 8006d58:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <takvimiAyarlama+0x3cc>)
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	ca06      	ldmia	r2, {r1, r2}
 8006d5e:	4821      	ldr	r0, [pc, #132]	; (8006de4 <takvimiAyarlama+0x3dc>)
 8006d60:	f7ff fc36 	bl	80065d0 <OLED_WriteString>
				OLED_SetCursor(30, y+20);
				OLED_WriteString("            ", Font_7x10, White);
			}

		}
}
 8006d64:	e02c      	b.n	8006dc0 <takvimiAyarlama+0x3b8>
			else if(takvimAryNo==2)
 8006d66:	4b1e      	ldr	r3, [pc, #120]	; (8006de0 <takvimiAyarlama+0x3d8>)
 8006d68:	f993 3000 	ldrsb.w	r3, [r3]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d115      	bne.n	8006d9c <takvimiAyarlama+0x394>
				OLED_SetCursor(takvimAryNo*33+22, y);
 8006d70:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <takvimiAyarlama+0x3d8>)
 8006d72:	f993 3000 	ldrsb.w	r3, [r3]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	0152      	lsls	r2, r2, #5
 8006d7c:	4413      	add	r3, r2
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	3316      	adds	r3, #22
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	79fa      	ldrb	r2, [r7, #7]
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fc47 	bl	800661c <OLED_SetCursor>
				OLED_WriteString("  ", Font_11x18, White);
 8006d8e:	4a11      	ldr	r2, [pc, #68]	; (8006dd4 <takvimiAyarlama+0x3cc>)
 8006d90:	2301      	movs	r3, #1
 8006d92:	ca06      	ldmia	r2, {r1, r2}
 8006d94:	4813      	ldr	r0, [pc, #76]	; (8006de4 <takvimiAyarlama+0x3dc>)
 8006d96:	f7ff fc1b 	bl	80065d0 <OLED_WriteString>
}
 8006d9a:	e011      	b.n	8006dc0 <takvimiAyarlama+0x3b8>
			else if(takvimAryNo==3)
 8006d9c:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <takvimiAyarlama+0x3d8>)
 8006d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d10c      	bne.n	8006dc0 <takvimiAyarlama+0x3b8>
				OLED_SetCursor(30, y+20);
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	3314      	adds	r3, #20
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	4619      	mov	r1, r3
 8006dae:	201e      	movs	r0, #30
 8006db0:	f7ff fc34 	bl	800661c <OLED_SetCursor>
				OLED_WriteString("            ", Font_7x10, White);
 8006db4:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <takvimiAyarlama+0x3d0>)
 8006db6:	2301      	movs	r3, #1
 8006db8:	ca06      	ldmia	r2, {r1, r2}
 8006dba:	480b      	ldr	r0, [pc, #44]	; (8006de8 <takvimiAyarlama+0x3e0>)
 8006dbc:	f7ff fc08 	bl	80065d0 <OLED_WriteString>
}
 8006dc0:	bf00      	nop
 8006dc2:	3730      	adds	r7, #48	; 0x30
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8006dc8:	20000a48 	.word	0x20000a48
 8006dcc:	200009e8 	.word	0x200009e8
 8006dd0:	0800835c 	.word	0x0800835c
 8006dd4:	20000014 	.word	0x20000014
 8006dd8:	2000000c 	.word	0x2000000c
 8006ddc:	20000805 	.word	0x20000805
 8006de0:	20000804 	.word	0x20000804
 8006de4:	08008358 	.word	0x08008358
 8006de8:	08008370 	.word	0x08008370

08006dec <KeySaatiAyarlama>:
/*Geçerli saat bilgisini okuyup saat ayar ekranına yönlendirecek Key1 değerini ayarlar */
void KeySaatiAyarlama()
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_TimeTypeDef sTimeGet;
	HAL_RTC_GetTime(&hrtc, &sTimeGet, RTC_FORMAT_BIN);
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	2200      	movs	r2, #0
 8006df6:	4619      	mov	r1, r3
 8006df8:	480d      	ldr	r0, [pc, #52]	; (8006e30 <KeySaatiAyarlama+0x44>)
 8006dfa:	f7fd fea9 	bl	8004b50 <HAL_RTC_GetTime>

	SaatAry[0]=sTimeGet.Hours;
 8006dfe:	793b      	ldrb	r3, [r7, #4]
 8006e00:	b25a      	sxtb	r2, r3
 8006e02:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <KeySaatiAyarlama+0x48>)
 8006e04:	701a      	strb	r2, [r3, #0]
	SaatAry[1]=sTimeGet.Minutes;
 8006e06:	797b      	ldrb	r3, [r7, #5]
 8006e08:	b25a      	sxtb	r2, r3
 8006e0a:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <KeySaatiAyarlama+0x48>)
 8006e0c:	705a      	strb	r2, [r3, #1]
	SaatAry[2]=sTimeGet.Seconds;
 8006e0e:	79bb      	ldrb	r3, [r7, #6]
 8006e10:	b25a      	sxtb	r2, r3
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <KeySaatiAyarlama+0x48>)
 8006e14:	709a      	strb	r2, [r3, #2]

	displaySelectKey=SAATI_AYARLAMA;
 8006e16:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <KeySaatiAyarlama+0x4c>)
 8006e18:	2241      	movs	r2, #65	; 0x41
 8006e1a:	701a      	strb	r2, [r3, #0]
	SaatAryNo=0;
 8006e1c:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <KeySaatiAyarlama+0x50>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 8006e22:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <KeySaatiAyarlama+0x54>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	701a      	strb	r2, [r3, #0]

}
 8006e28:	bf00      	nop
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000990 	.word	0x20000990
 8006e34:	2000098c 	.word	0x2000098c
 8006e38:	20000a4a 	.word	0x20000a4a
 8006e3c:	20000a50 	.word	0x20000a50
 8006e40:	20000a28 	.word	0x20000a28

08006e44 <KeyAlarmAyarlama>:
/*Geçerli alarm bilgisini okuyup alarm ayar ekranına yönlendirecek Key1 değerini ayarlar */
void KeyAlarmAyarlama()
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_AlarmTypeDef sAlarmGet;
	HAL_RTC_GetAlarm(&hrtc, &sAlarmGet,RTC_ALARM_A, RTC_FORMAT_BIN);
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e52:	480e      	ldr	r0, [pc, #56]	; (8006e8c <KeyAlarmAyarlama+0x48>)
 8006e54:	f7fe f908 	bl	8005068 <HAL_RTC_GetAlarm>

	SaatAry[0]=sAlarmGet.AlarmTime.Hours;
 8006e58:	783b      	ldrb	r3, [r7, #0]
 8006e5a:	b25a      	sxtb	r2, r3
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <KeyAlarmAyarlama+0x4c>)
 8006e5e:	701a      	strb	r2, [r3, #0]
	SaatAry[1]=sAlarmGet.AlarmTime.Minutes;
 8006e60:	787b      	ldrb	r3, [r7, #1]
 8006e62:	b25a      	sxtb	r2, r3
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <KeyAlarmAyarlama+0x4c>)
 8006e66:	705a      	strb	r2, [r3, #1]
	SaatAry[2]=sAlarmGet.AlarmTime.Seconds;
 8006e68:	78bb      	ldrb	r3, [r7, #2]
 8006e6a:	b25a      	sxtb	r2, r3
 8006e6c:	4b08      	ldr	r3, [pc, #32]	; (8006e90 <KeyAlarmAyarlama+0x4c>)
 8006e6e:	709a      	strb	r2, [r3, #2]

	displaySelectKey=ALARM_AYARLAMA;
 8006e70:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <KeyAlarmAyarlama+0x50>)
 8006e72:	2243      	movs	r2, #67	; 0x43
 8006e74:	701a      	strb	r2, [r3, #0]
	SaatAryNo=0;
 8006e76:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <KeyAlarmAyarlama+0x54>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 8006e7c:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <KeyAlarmAyarlama+0x58>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	701a      	strb	r2, [r3, #0]

}
 8006e82:	bf00      	nop
 8006e84:	3728      	adds	r7, #40	; 0x28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000990 	.word	0x20000990
 8006e90:	2000098c 	.word	0x2000098c
 8006e94:	20000a4a 	.word	0x20000a4a
 8006e98:	20000a50 	.word	0x20000a50
 8006e9c:	20000a28 	.word	0x20000a28

08006ea0 <KeyTakvimiAyarlama>:
/*Geçerli takvim bilgisini okuyup saat ayar ekranına yönlendirecek Key1 değerini ayarlar */

void KeyTakvimiAyarlama()
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_DateTypeDef sDateGet;
	HAL_RTC_GetDate(&hrtc, &sDateGet, RTC_FORMAT_BIN);
 8006ea6:	1d3b      	adds	r3, r7, #4
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4619      	mov	r1, r3
 8006eac:	480f      	ldr	r0, [pc, #60]	; (8006eec <KeyTakvimiAyarlama+0x4c>)
 8006eae:	f7fd ff54 	bl	8004d5a <HAL_RTC_GetDate>

	takvimAry[0]=sDateGet.Date;
 8006eb2:	79bb      	ldrb	r3, [r7, #6]
 8006eb4:	b25a      	sxtb	r2, r3
 8006eb6:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <KeyTakvimiAyarlama+0x50>)
 8006eb8:	701a      	strb	r2, [r3, #0]
	takvimAry[1]=sDateGet.Month;
 8006eba:	797b      	ldrb	r3, [r7, #5]
 8006ebc:	b25a      	sxtb	r2, r3
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <KeyTakvimiAyarlama+0x50>)
 8006ec0:	705a      	strb	r2, [r3, #1]
	takvimAry[2]=sDateGet.Year;
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	b25a      	sxtb	r2, r3
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <KeyTakvimiAyarlama+0x50>)
 8006ec8:	709a      	strb	r2, [r3, #2]
	takvimAry[3]=sDateGet.WeekDay;
 8006eca:	793b      	ldrb	r3, [r7, #4]
 8006ecc:	b25a      	sxtb	r2, r3
 8006ece:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <KeyTakvimiAyarlama+0x50>)
 8006ed0:	70da      	strb	r2, [r3, #3]

	displaySelectKey=TAKVIMI_AYARLAMA;
 8006ed2:	4b08      	ldr	r3, [pc, #32]	; (8006ef4 <KeyTakvimiAyarlama+0x54>)
 8006ed4:	2242      	movs	r2, #66	; 0x42
 8006ed6:	701a      	strb	r2, [r3, #0]
	takvimAryNo=0;
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <KeyTakvimiAyarlama+0x58>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <KeyTakvimiAyarlama+0x5c>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	701a      	strb	r2, [r3, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20000990 	.word	0x20000990
 8006ef0:	200009e8 	.word	0x200009e8
 8006ef4:	20000a4a 	.word	0x20000a4a
 8006ef8:	20000804 	.word	0x20000804
 8006efc:	20000a28 	.word	0x20000a28

08006f00 <KeyServoKontrol>:

void KeyServoKontrol()
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
	displaySelectKey=SERVO_KONTROL;
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <KeyServoKontrol+0x1c>)
 8006f06:	2244      	movs	r2, #68	; 0x44
 8006f08:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 8006f0a:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <KeyServoKontrol+0x20>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	701a      	strb	r2, [r3, #0]
}
 8006f10:	bf00      	nop
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000a4a 	.word	0x20000a4a
 8006f20:	20000a28 	.word	0x20000a28

08006f24 <displaySelect>:
/*Ekranda gösterilecek unsurları Key1 değerine göre seçer */
void displaySelect()
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af02      	add	r7, sp, #8

	button_Read(GPIOB,KEY_1_Pin,KEY_2_Pin,KEY_3_Pin,KEY_4_Pin); /*Menu ekranına geçirecek kısayol tuş kombinasyonunu algılayıp Key1 değerine aktarır*/
 8006f2a:	2340      	movs	r3, #64	; 0x40
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	2320      	movs	r3, #32
 8006f30:	2210      	movs	r2, #16
 8006f32:	2108      	movs	r1, #8
 8006f34:	483b      	ldr	r0, [pc, #236]	; (8007024 <displaySelect+0x100>)
 8006f36:	f000 fa03 	bl	8007340 <button_Read>
	if(Key==MENU_SISTEMI)
 8006f3a:	4b3b      	ldr	r3, [pc, #236]	; (8007028 <displaySelect+0x104>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b30      	cmp	r3, #48	; 0x30
 8006f40:	d106      	bne.n	8006f50 <displaySelect+0x2c>
	{
		displaySelectKey=Key;
 8006f42:	4b39      	ldr	r3, [pc, #228]	; (8007028 <displaySelect+0x104>)
 8006f44:	781a      	ldrb	r2, [r3, #0]
 8006f46:	4b39      	ldr	r3, [pc, #228]	; (800702c <displaySelect+0x108>)
 8006f48:	701a      	strb	r2, [r3, #0]
		displayClean=true;
 8006f4a:	4b39      	ldr	r3, [pc, #228]	; (8007030 <displaySelect+0x10c>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	701a      	strb	r2, [r3, #0]
	}
	switch(displaySelectKey)
 8006f50:	4b36      	ldr	r3, [pc, #216]	; (800702c <displaySelect+0x108>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b42      	cmp	r3, #66	; 0x42
 8006f56:	d029      	beq.n	8006fac <displaySelect+0x88>
 8006f58:	2b42      	cmp	r3, #66	; 0x42
 8006f5a:	dc04      	bgt.n	8006f66 <displaySelect+0x42>
 8006f5c:	2b30      	cmp	r3, #48	; 0x30
 8006f5e:	d009      	beq.n	8006f74 <displaySelect+0x50>
 8006f60:	2b41      	cmp	r3, #65	; 0x41
 8006f62:	d015      	beq.n	8006f90 <displaySelect+0x6c>
//		takvimGoster();

		break;

	}
}
 8006f64:	e05a      	b.n	800701c <displaySelect+0xf8>
	switch(displaySelectKey)
 8006f66:	2b44      	cmp	r3, #68	; 0x44
 8006f68:	d04b      	beq.n	8007002 <displaySelect+0xde>
 8006f6a:	2b44      	cmp	r3, #68	; 0x44
 8006f6c:	db2c      	blt.n	8006fc8 <displaySelect+0xa4>
 8006f6e:	2ba0      	cmp	r3, #160	; 0xa0
 8006f70:	d038      	beq.n	8006fe4 <displaySelect+0xc0>
}
 8006f72:	e053      	b.n	800701c <displaySelect+0xf8>
		if(displayClean)
 8006f74:	4b2e      	ldr	r3, [pc, #184]	; (8007030 <displaySelect+0x10c>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <displaySelect+0x64>
		displayClean=false;
 8006f7c:	4b2c      	ldr	r3, [pc, #176]	; (8007030 <displaySelect+0x10c>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8006f82:	2000      	movs	r0, #0
 8006f84:	f7ff f8fa 	bl	800617c <OLED_Fill>
		menuSistemi(6);
 8006f88:	2006      	movs	r0, #6
 8006f8a:	f000 fd2d 	bl	80079e8 <menuSistemi>
		break;
 8006f8e:	e045      	b.n	800701c <displaySelect+0xf8>
		if(displayClean)
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <displaySelect+0x10c>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <displaySelect+0x80>
		displayClean=false;
 8006f98:	4b25      	ldr	r3, [pc, #148]	; (8007030 <displaySelect+0x10c>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	f7ff f8ec 	bl	800617c <OLED_Fill>
		saatiAyarlama(30);
 8006fa4:	201e      	movs	r0, #30
 8006fa6:	f7ff fbc9 	bl	800673c <saatiAyarlama>
		break;
 8006faa:	e037      	b.n	800701c <displaySelect+0xf8>
		if(displayClean)
 8006fac:	4b20      	ldr	r3, [pc, #128]	; (8007030 <displaySelect+0x10c>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <displaySelect+0x9c>
		displayClean=false;
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <displaySelect+0x10c>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8006fba:	2000      	movs	r0, #0
 8006fbc:	f7ff f8de 	bl	800617c <OLED_Fill>
		takvimiAyarlama(20);
 8006fc0:	2014      	movs	r0, #20
 8006fc2:	f7ff fd21 	bl	8006a08 <takvimiAyarlama>
		break;
 8006fc6:	e029      	b.n	800701c <displaySelect+0xf8>
		if(displayClean)
 8006fc8:	4b19      	ldr	r3, [pc, #100]	; (8007030 <displaySelect+0x10c>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <displaySelect+0xb8>
		displayClean=false;
 8006fd0:	4b17      	ldr	r3, [pc, #92]	; (8007030 <displaySelect+0x10c>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	f7ff f8d0 	bl	800617c <OLED_Fill>
		alarmAyarlama(20);
 8006fdc:	2014      	movs	r0, #20
 8006fde:	f7ff fcff 	bl	80069e0 <alarmAyarlama>
		break;
 8006fe2:	e01b      	b.n	800701c <displaySelect+0xf8>
		if(displayClean)
 8006fe4:	4b12      	ldr	r3, [pc, #72]	; (8007030 <displaySelect+0x10c>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <displaySelect+0xd4>
		displayClean=false;
 8006fec:	4b10      	ldr	r3, [pc, #64]	; (8007030 <displaySelect+0x10c>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f7ff f8c2 	bl	800617c <OLED_Fill>
		alarmGoster();
 8006ff8:	f000 f8a2 	bl	8007140 <alarmGoster>
		takvimGoster();
 8006ffc:	f000 f8cc 	bl	8007198 <takvimGoster>
		break;
 8007000:	e00c      	b.n	800701c <displaySelect+0xf8>
		if(displayClean)
 8007002:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <displaySelect+0x10c>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <displaySelect+0xf2>
		displayClean=false;
 800700a:	4b09      	ldr	r3, [pc, #36]	; (8007030 <displaySelect+0x10c>)
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8007010:	2000      	movs	r0, #0
 8007012:	f7ff f8b3 	bl	800617c <OLED_Fill>
		servoKontrol();
 8007016:	f000 f931 	bl	800727c <servoKontrol>
		break;
 800701a:	bf00      	nop
}
 800701c:	bf00      	nop
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	48000400 	.word	0x48000400
 8007028:	20000a49 	.word	0x20000a49
 800702c:	20000a4a 	.word	0x20000a4a
 8007030:	20000a28 	.word	0x20000a28

08007034 <menuExit>:

void menuExit()
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
	displaySelectKey=MENUEXIT;
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <menuExit+0x20>)
 800703a:	22a0      	movs	r2, #160	; 0xa0
 800703c:	701a      	strb	r2, [r3, #0]
	currentM = &menu1M;
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <menuExit+0x24>)
 8007040:	4a06      	ldr	r2, [pc, #24]	; (800705c <menuExit+0x28>)
 8007042:	601a      	str	r2, [r3, #0]
	displayClean=true;
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <menuExit+0x2c>)
 8007046:	2201      	movs	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
}
 800704a:	bf00      	nop
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	20000a4a 	.word	0x20000a4a
 8007058:	200007ac 	.word	0x200007ac
 800705c:	200009f0 	.word	0x200009f0
 8007060:	20000a28 	.word	0x20000a28

08007064 <kayitSorma>:

void kayitSorma(uint8_t x1,uint8_t y1)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	460a      	mov	r2, r1
 800706e:	71fb      	strb	r3, [r7, #7]
 8007070:	4613      	mov	r3, r2
 8007072:	71bb      	strb	r3, [r7, #6]
	if(durumFlash)
 8007074:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <kayitSorma+0x5c>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00e      	beq.n	800709a <kayitSorma+0x36>
	{
		OLED_SetCursor(x1, y1+20);
 800707c:	79bb      	ldrb	r3, [r7, #6]
 800707e:	3314      	adds	r3, #20
 8007080:	b2da      	uxtb	r2, r3
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fac8 	bl	800661c <OLED_SetCursor>
		OLED_WriteString("Kaydedilsin mi?", Font_7x10, White);
 800708c:	4a0d      	ldr	r2, [pc, #52]	; (80070c4 <kayitSorma+0x60>)
 800708e:	2301      	movs	r3, #1
 8007090:	ca06      	ldmia	r2, {r1, r2}
 8007092:	480d      	ldr	r0, [pc, #52]	; (80070c8 <kayitSorma+0x64>)
 8007094:	f7ff fa9c 	bl	80065d0 <OLED_WriteString>
	else
	{
		OLED_SetCursor(x1, y1+20);
		OLED_WriteString("               ", Font_7x10, White);
	}
}
 8007098:	e00d      	b.n	80070b6 <kayitSorma+0x52>
		OLED_SetCursor(x1, y1+20);
 800709a:	79bb      	ldrb	r3, [r7, #6]
 800709c:	3314      	adds	r3, #20
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	4611      	mov	r1, r2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff fab9 	bl	800661c <OLED_SetCursor>
		OLED_WriteString("               ", Font_7x10, White);
 80070aa:	4a06      	ldr	r2, [pc, #24]	; (80070c4 <kayitSorma+0x60>)
 80070ac:	2301      	movs	r3, #1
 80070ae:	ca06      	ldmia	r2, {r1, r2}
 80070b0:	4806      	ldr	r0, [pc, #24]	; (80070cc <kayitSorma+0x68>)
 80070b2:	f7ff fa8d 	bl	80065d0 <OLED_WriteString>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000805 	.word	0x20000805
 80070c4:	2000000c 	.word	0x2000000c
 80070c8:	080083e0 	.word	0x080083e0
 80070cc:	080083f0 	.word	0x080083f0

080070d0 <alarmRead>:

bool alarmRead(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
	return ((RTC->ISR & RTC_ISR_ALRAF_Msk)>> RTC_ISR_ALRAF_Pos);
 80070d4:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <alarmRead+0x24>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	0a1b      	lsrs	r3, r3, #8
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bf14      	ite	ne
 80070e2:	2301      	movne	r3, #1
 80070e4:	2300      	moveq	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40002800 	.word	0x40002800

080070f8 <alarmDurdur>:

void alarmDurdur()
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
	RTC->ISR &=~RTC_ISR_ALRAF;
 80070fc:	4b05      	ldr	r3, [pc, #20]	; (8007114 <alarmDurdur+0x1c>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	4a04      	ldr	r2, [pc, #16]	; (8007114 <alarmDurdur+0x1c>)
 8007102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007106:	60d3      	str	r3, [r2, #12]
}
 8007108:	bf00      	nop
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40002800 	.word	0x40002800

08007118 <alarmDeneme>:

void alarmDeneme(uint8_t alarmDurdurmaKeyDegeri)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
	if(Key==alarmDurdurmaKeyDegeri)
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <alarmDeneme+0x24>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	79fa      	ldrb	r2, [r7, #7]
 8007128:	429a      	cmp	r2, r3
 800712a:	d101      	bne.n	8007130 <alarmDeneme+0x18>
	{
		alarmDurdur();
 800712c:	f7ff ffe4 	bl	80070f8 <alarmDurdur>
	}

	if(alarmRead())
 8007130:	f7ff ffce 	bl	80070d0 <alarmRead>
	}
	else
	{
//		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,RESET);
	}
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000a49 	.word	0x20000a49

08007140 <alarmGoster>:

void alarmGoster()
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b090      	sub	sp, #64	; 0x40
 8007144:	af02      	add	r7, sp, #8
	extern RTC_HandleTypeDef hrtc;

	RTC_AlarmTypeDef sAlarmGet;

	/* Get the RTC current Time */
	HAL_RTC_GetAlarm(&hrtc, &sAlarmGet,RTC_ALARM_A, RTC_FORMAT_BIN);
 8007146:	4639      	mov	r1, r7
 8007148:	2300      	movs	r3, #0
 800714a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800714e:	480f      	ldr	r0, [pc, #60]	; (800718c <alarmGoster+0x4c>)
 8007150:	f7fd ff8a 	bl	8005068 <HAL_RTC_GetAlarm>

	/* Display time Format : hh:mm:ss */
	sprintf(aShowAlarm, "%2d:%02d:%02d", sAlarmGet.AlarmTime.Hours, sAlarmGet.AlarmTime.Minutes, sAlarmGet.AlarmTime.Seconds);
 8007154:	783b      	ldrb	r3, [r7, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	787b      	ldrb	r3, [r7, #1]
 800715a:	4619      	mov	r1, r3
 800715c:	78bb      	ldrb	r3, [r7, #2]
 800715e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	460b      	mov	r3, r1
 8007166:	490a      	ldr	r1, [pc, #40]	; (8007190 <alarmGoster+0x50>)
 8007168:	f000 fcd2 	bl	8007b10 <siprintf>
	OLED_SetCursor(30, 0);
 800716c:	2100      	movs	r1, #0
 800716e:	201e      	movs	r0, #30
 8007170:	f7ff fa54 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(aShowAlarm, Font_7x10, White);
 8007174:	4a07      	ldr	r2, [pc, #28]	; (8007194 <alarmGoster+0x54>)
 8007176:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800717a:	2301      	movs	r3, #1
 800717c:	ca06      	ldmia	r2, {r1, r2}
 800717e:	f7ff fa27 	bl	80065d0 <OLED_WriteString>
}
 8007182:	bf00      	nop
 8007184:	3738      	adds	r7, #56	; 0x38
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000990 	.word	0x20000990
 8007190:	08008400 	.word	0x08008400
 8007194:	2000000c 	.word	0x2000000c

08007198 <takvimGoster>:
	OLED_SetCursor(30, 0);
	OLED_WriteString(aShowTime, Font_7x10, White);
}

void takvimGoster()
{
 8007198:	b5b0      	push	{r4, r5, r7, lr}
 800719a:	b098      	sub	sp, #96	; 0x60
 800719c:	af02      	add	r7, sp, #8

	RTC_TimeTypeDef sTimeGet;
	RTC_DateTypeDef sDateGet;

//	  const char* weekD[] = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "??"};
	char* weekDay[] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
 800719e:	4b31      	ldr	r3, [pc, #196]	; (8007264 <takvimGoster+0xcc>)
 80071a0:	1d3c      	adds	r4, r7, #4
 80071a2:	461d      	mov	r5, r3
 80071a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80071ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Saturday", "Sunday"};

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &sTimeGet, RTC_FORMAT_BIN);
 80071b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071b4:	2200      	movs	r2, #0
 80071b6:	4619      	mov	r1, r3
 80071b8:	482b      	ldr	r0, [pc, #172]	; (8007268 <takvimGoster+0xd0>)
 80071ba:	f7fd fcc9 	bl	8004b50 <HAL_RTC_GetTime>
	/* Display time Format : hh:mm:ss */
	sprintf(aShowTime, "%2d:%02d:%02d", sTimeGet.Hours, sTimeGet.Minutes,
 80071be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071c2:	461a      	mov	r2, r3
 80071c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80071c8:	4619      	mov	r1, r3
			sTimeGet.Seconds);
 80071ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
	sprintf(aShowTime, "%2d:%02d:%02d", sTimeGet.Hours, sTimeGet.Minutes,
 80071ce:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	460b      	mov	r3, r1
 80071d6:	4925      	ldr	r1, [pc, #148]	; (800726c <takvimGoster+0xd4>)
 80071d8:	f000 fc9a 	bl	8007b10 <siprintf>
	OLED_SetCursor(14, 16);
 80071dc:	2110      	movs	r1, #16
 80071de:	200e      	movs	r0, #14
 80071e0:	f7ff fa1c 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(aShowTime, Font_11x18, White);
 80071e4:	4a22      	ldr	r2, [pc, #136]	; (8007270 <takvimGoster+0xd8>)
 80071e6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80071ea:	2301      	movs	r3, #1
 80071ec:	ca06      	ldmia	r2, {r1, r2}
 80071ee:	f7ff f9ef 	bl	80065d0 <OLED_WriteString>

	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &sDateGet, RTC_FORMAT_BIN);
 80071f2:	f107 0320 	add.w	r3, r7, #32
 80071f6:	2200      	movs	r2, #0
 80071f8:	4619      	mov	r1, r3
 80071fa:	481b      	ldr	r0, [pc, #108]	; (8007268 <takvimGoster+0xd0>)
 80071fc:	f7fd fdad 	bl	8004d5a <HAL_RTC_GetDate>
	/* Display date Format : mm-dd-yy */
	sprintf(aShowDate, "%02d-%02d-%2d", sDateGet.Date, sDateGet.Month,
 8007200:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007204:	461a      	mov	r2, r3
 8007206:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800720a:	4619      	mov	r1, r3
			2000 + sDateGet.Year);
 800720c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
	sprintf(aShowDate, "%02d-%02d-%2d", sDateGet.Date, sDateGet.Month,
 8007210:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007214:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	460b      	mov	r3, r1
 800721c:	4915      	ldr	r1, [pc, #84]	; (8007274 <takvimGoster+0xdc>)
 800721e:	f000 fc77 	bl	8007b10 <siprintf>
	OLED_SetCursor(25, 40);
 8007222:	2128      	movs	r1, #40	; 0x28
 8007224:	2019      	movs	r0, #25
 8007226:	f7ff f9f9 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(aShowDate, Font_7x10, White);
 800722a:	4a13      	ldr	r2, [pc, #76]	; (8007278 <takvimGoster+0xe0>)
 800722c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8007230:	2301      	movs	r3, #1
 8007232:	ca06      	ldmia	r2, {r1, r2}
 8007234:	f7ff f9cc 	bl	80065d0 <OLED_WriteString>
	OLED_SetCursor(30, 53);
 8007238:	2135      	movs	r1, #53	; 0x35
 800723a:	201e      	movs	r0, #30
 800723c:	f7ff f9ee 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(weekDay[sDateGet.WeekDay-1], Font_7x10, White);  //
 8007240:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007244:	3b01      	subs	r3, #1
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800724c:	4413      	add	r3, r2
 800724e:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8007252:	4a09      	ldr	r2, [pc, #36]	; (8007278 <takvimGoster+0xe0>)
 8007254:	2301      	movs	r3, #1
 8007256:	ca06      	ldmia	r2, {r1, r2}
 8007258:	f7ff f9ba 	bl	80065d0 <OLED_WriteString>
}
 800725c:	bf00      	nop
 800725e:	3758      	adds	r7, #88	; 0x58
 8007260:	46bd      	mov	sp, r7
 8007262:	bdb0      	pop	{r4, r5, r7, pc}
 8007264:	080083c4 	.word	0x080083c4
 8007268:	20000990 	.word	0x20000990
 800726c:	08008400 	.word	0x08008400
 8007270:	20000014 	.word	0x20000014
 8007274:	08008410 	.word	0x08008410
 8007278:	2000000c 	.word	0x2000000c

0800727c <servoKontrol>:
#include "include_Ap.h"

void servoKontrol()
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
	extern uint16_t servoDeger;
	extern TIM_HandleTypeDef htim3;
		switch(Key)
 8007280:	4b27      	ldr	r3, [pc, #156]	; (8007320 <servoKontrol+0xa4>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2bb0      	cmp	r3, #176	; 0xb0
 8007286:	d034      	beq.n	80072f2 <servoKontrol+0x76>
 8007288:	2bb0      	cmp	r3, #176	; 0xb0
 800728a:	dc02      	bgt.n	8007292 <servoKontrol+0x16>
 800728c:	2b70      	cmp	r3, #112	; 0x70
 800728e:	d021      	beq.n	80072d4 <servoKontrol+0x58>
 8007290:	e03e      	b.n	8007310 <servoKontrol+0x94>
 8007292:	2bd0      	cmp	r3, #208	; 0xd0
 8007294:	d002      	beq.n	800729c <servoKontrol+0x20>
 8007296:	2be0      	cmp	r3, #224	; 0xe0
 8007298:	d00e      	beq.n	80072b8 <servoKontrol+0x3c>
 800729a:	e039      	b.n	8007310 <servoKontrol+0x94>
		{
		case T1DEGER:
			servoDeger=94;
 800729c:	4b21      	ldr	r3, [pc, #132]	; (8007324 <servoKontrol+0xa8>)
 800729e:	225e      	movs	r2, #94	; 0x5e
 80072a0:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 80072a2:	2114      	movs	r1, #20
 80072a4:	2000      	movs	r0, #0
 80072a6:	f7ff f9b9 	bl	800661c <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI :  0", Font_7x10, White);
 80072aa:	4a1f      	ldr	r2, [pc, #124]	; (8007328 <servoKontrol+0xac>)
 80072ac:	2301      	movs	r3, #1
 80072ae:	ca06      	ldmia	r2, {r1, r2}
 80072b0:	481e      	ldr	r0, [pc, #120]	; (800732c <servoKontrol+0xb0>)
 80072b2:	f7ff f98d 	bl	80065d0 <OLED_WriteString>

			break;
 80072b6:	e02b      	b.n	8007310 <servoKontrol+0x94>
		case T2DEGER:
			servoDeger=219;
 80072b8:	4b1a      	ldr	r3, [pc, #104]	; (8007324 <servoKontrol+0xa8>)
 80072ba:	22db      	movs	r2, #219	; 0xdb
 80072bc:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 80072be:	2114      	movs	r1, #20
 80072c0:	2000      	movs	r0, #0
 80072c2:	f7ff f9ab 	bl	800661c <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI : 90",  Font_7x10, White);
 80072c6:	4a18      	ldr	r2, [pc, #96]	; (8007328 <servoKontrol+0xac>)
 80072c8:	2301      	movs	r3, #1
 80072ca:	ca06      	ldmia	r2, {r1, r2}
 80072cc:	4818      	ldr	r0, [pc, #96]	; (8007330 <servoKontrol+0xb4>)
 80072ce:	f7ff f97f 	bl	80065d0 <OLED_WriteString>

			break;
 80072d2:	e01d      	b.n	8007310 <servoKontrol+0x94>
		case T3DEGER:
			servoDeger=344;
 80072d4:	4b13      	ldr	r3, [pc, #76]	; (8007324 <servoKontrol+0xa8>)
 80072d6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80072da:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 80072dc:	2114      	movs	r1, #20
 80072de:	2000      	movs	r0, #0
 80072e0:	f7ff f99c 	bl	800661c <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI :180",  Font_7x10, White);
 80072e4:	4a10      	ldr	r2, [pc, #64]	; (8007328 <servoKontrol+0xac>)
 80072e6:	2301      	movs	r3, #1
 80072e8:	ca06      	ldmia	r2, {r1, r2}
 80072ea:	4812      	ldr	r0, [pc, #72]	; (8007334 <servoKontrol+0xb8>)
 80072ec:	f7ff f970 	bl	80065d0 <OLED_WriteString>

			break;
 80072f0:	e00e      	b.n	8007310 <servoKontrol+0x94>
		case T4DEGER:
			servoDeger=469;
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <servoKontrol+0xa8>)
 80072f4:	f240 12d5 	movw	r2, #469	; 0x1d5
 80072f8:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 80072fa:	2114      	movs	r1, #20
 80072fc:	2000      	movs	r0, #0
 80072fe:	f7ff f98d 	bl	800661c <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI :270",  Font_7x10, White);
 8007302:	4a09      	ldr	r2, [pc, #36]	; (8007328 <servoKontrol+0xac>)
 8007304:	2301      	movs	r3, #1
 8007306:	ca06      	ldmia	r2, {r1, r2}
 8007308:	480b      	ldr	r0, [pc, #44]	; (8007338 <servoKontrol+0xbc>)
 800730a:	f7ff f961 	bl	80065d0 <OLED_WriteString>

			break;
 800730e:	bf00      	nop

		}

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,servoDeger);
 8007310:	4b04      	ldr	r3, [pc, #16]	; (8007324 <servoKontrol+0xa8>)
 8007312:	881a      	ldrh	r2, [r3, #0]
 8007314:	4b09      	ldr	r3, [pc, #36]	; (800733c <servoKontrol+0xc0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000a49 	.word	0x20000a49
 8007324:	20000a52 	.word	0x20000a52
 8007328:	2000000c 	.word	0x2000000c
 800732c:	08008420 	.word	0x08008420
 8007330:	08008434 	.word	0x08008434
 8007334:	08008448 	.word	0x08008448
 8007338:	0800845c 	.word	0x0800845c
 800733c:	20000808 	.word	0x20000808

08007340 <button_Read>:
//  HAL_GPIO_Init(GPIOD, &ButtonPed_InitStruct);

}

void button_Read(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin1, uint16_t GPIO_Pin2, uint16_t GPIO_Pin3, uint16_t GPIO_Pin4)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	4608      	mov	r0, r1
 800734a:	4611      	mov	r1, r2
 800734c:	461a      	mov	r2, r3
 800734e:	4603      	mov	r3, r0
 8007350:	817b      	strh	r3, [r7, #10]
 8007352:	460b      	mov	r3, r1
 8007354:	813b      	strh	r3, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	80fb      	strh	r3, [r7, #6]
  Key=(GPIOx->IDR & (GPIO_Pin1|GPIO_Pin2|GPIO_Pin3|GPIO_Pin4));
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	b2da      	uxtb	r2, r3
 8007360:	897b      	ldrh	r3, [r7, #10]
 8007362:	b2d9      	uxtb	r1, r3
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	430b      	orrs	r3, r1
 800736a:	b2d9      	uxtb	r1, r3
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	430b      	orrs	r3, r1
 8007372:	b2d9      	uxtb	r1, r3
 8007374:	8b3b      	ldrh	r3, [r7, #24]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	430b      	orrs	r3, r1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	4013      	ands	r3, r2
 800737e:	b2da      	uxtb	r2, r3
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <button_Read+0x60>)
 8007382:	701a      	strb	r2, [r3, #0]

  if(Key==T0DEGER)
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <button_Read+0x60>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2bf0      	cmp	r3, #240	; 0xf0
 800738a:	d102      	bne.n	8007392 <button_Read+0x52>
  {
	  durum=true;
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <button_Read+0x64>)
 800738e:	2201      	movs	r2, #1
 8007390:	701a      	strb	r2, [r3, #0]
  }
}
 8007392:	bf00      	nop
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20000a49 	.word	0x20000a49
 80073a4:	20000848 	.word	0x20000848

080073a8 <BuildMenu>:
	menulistTypeDef acKapaMenu	={"AC/KAPAT"	,"Ac"           ,"Kapat"};


void BuildMenu(menuLevelsTypeDef *currentNode, menulistTypeDef *menuNode,OLED_COLOR color1,OLED_COLOR color2,OLED_COLOR color3,OLED_COLOR color4,
				void (*DoWork)(void) , menuLevelsTypeDef *prevNode, menuLevelsTypeDef *nextNode,menuLevelsTypeDef *upNode,menuLevelsTypeDef *downNode)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	460b      	mov	r3, r1
 80073b8:	71fb      	strb	r3, [r7, #7]
 80073ba:	4613      	mov	r3, r2
 80073bc:	71bb      	strb	r3, [r7, #6]
	currentNode->menuPtr 	= menuNode;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	601a      	str	r2, [r3, #0]
    currentNode->color1		= color1;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	79fa      	ldrb	r2, [r7, #7]
 80073c8:	711a      	strb	r2, [r3, #4]
    currentNode->color2		= color2;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	79ba      	ldrb	r2, [r7, #6]
 80073ce:	715a      	strb	r2, [r3, #5]
    currentNode->color3		= color3;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	7e3a      	ldrb	r2, [r7, #24]
 80073d4:	719a      	strb	r2, [r3, #6]
    currentNode->color4		= color4;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	7f3a      	ldrb	r2, [r7, #28]
 80073da:	71da      	strb	r2, [r3, #7]
    currentNode->prev   	= prevNode;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e0:	60da      	str	r2, [r3, #12]
    currentNode->next   	= nextNode;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e6:	609a      	str	r2, [r3, #8]
    currentNode->up     	= upNode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ec:	615a      	str	r2, [r3, #20]
    currentNode->down   	= downNode;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f2:	611a      	str	r2, [r3, #16]
    currentNode->DoWork 	= DoWork;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a3a      	ldr	r2, [r7, #32]
 80073f8:	619a      	str	r2, [r3, #24]
}
 80073fa:	bf00      	nop
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <Next>:


void Next(menuLevelsTypeDef **currentNode)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->next != 0)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <Next+0x1c>
  (*currentNode) = (*currentNode)->next;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	601a      	str	r2, [r3, #0]
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <Prev>:

void Prev(menuLevelsTypeDef **currentNode)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  if((*currentNode)->prev != 0)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <Prev+0x1c>
  (*currentNode) = (*currentNode)->prev;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	601a      	str	r2, [r3, #0]
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <Up>:

void Up(menuLevelsTypeDef **currentNode)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  if((*currentNode)->up != 0)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d004      	beq.n	8007472 <Up+0x1c>
  (*currentNode) = (*currentNode)->up;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695a      	ldr	r2, [r3, #20]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	601a      	str	r2, [r3, #0]
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <Down>:

void Down(menuLevelsTypeDef **currentNode)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  if((*currentNode)->DoWork != 0)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <Down+0x1c>
    (*currentNode)->DoWork();
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	4798      	blx	r3
  else if((*currentNode)->down != 0)
    (*currentNode) = (*currentNode)->down;
}
 8007498:	e009      	b.n	80074ae <Down+0x30>
  else if((*currentNode)->down != 0)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <Down+0x30>
    (*currentNode) = (*currentNode)->down;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691a      	ldr	r2, [r3, #16]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <Build_Menu>:


void Build_Menu()
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af08      	add	r7, sp, #32
	//			secenek		menu					renk					fonksiyon			önceki		sonraki			üst			alt
	//-----------------------------------------------------------------------------------------------------------------------------------
	  BuildMenu(&menu1M,	&anaMenu		,Black,	White,	White,	White,		0, 				&exitM,	&ledlerM, 		0, 			&menu11M);
 80074be:	4b9a      	ldr	r3, [pc, #616]	; (8007728 <Build_Menu+0x270>)
 80074c0:	9306      	str	r3, [sp, #24]
 80074c2:	2300      	movs	r3, #0
 80074c4:	9305      	str	r3, [sp, #20]
 80074c6:	4b99      	ldr	r3, [pc, #612]	; (800772c <Build_Menu+0x274>)
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	4b99      	ldr	r3, [pc, #612]	; (8007730 <Build_Menu+0x278>)
 80074cc:	9303      	str	r3, [sp, #12]
 80074ce:	2300      	movs	r3, #0
 80074d0:	9302      	str	r3, [sp, #8]
 80074d2:	2301      	movs	r3, #1
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	2301      	movs	r3, #1
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	2301      	movs	r3, #1
 80074dc:	2200      	movs	r2, #0
 80074de:	4995      	ldr	r1, [pc, #596]	; (8007734 <Build_Menu+0x27c>)
 80074e0:	4895      	ldr	r0, [pc, #596]	; (8007738 <Build_Menu+0x280>)
 80074e2:	f7ff ff61 	bl	80073a8 <BuildMenu>

	  BuildMenu(&menu11M,	&beslemeMenu		,Black,	White,	White,	White,		KeyServoKontrol,&menu13M,	&menu12M, 		&menu1M, 	0);
 80074e6:	2300      	movs	r3, #0
 80074e8:	9306      	str	r3, [sp, #24]
 80074ea:	4b93      	ldr	r3, [pc, #588]	; (8007738 <Build_Menu+0x280>)
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	4b93      	ldr	r3, [pc, #588]	; (800773c <Build_Menu+0x284>)
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	4b93      	ldr	r3, [pc, #588]	; (8007740 <Build_Menu+0x288>)
 80074f4:	9303      	str	r3, [sp, #12]
 80074f6:	4b93      	ldr	r3, [pc, #588]	; (8007744 <Build_Menu+0x28c>)
 80074f8:	9302      	str	r3, [sp, #8]
 80074fa:	2301      	movs	r3, #1
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	2301      	movs	r3, #1
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	2301      	movs	r3, #1
 8007504:	2200      	movs	r2, #0
 8007506:	4990      	ldr	r1, [pc, #576]	; (8007748 <Build_Menu+0x290>)
 8007508:	4887      	ldr	r0, [pc, #540]	; (8007728 <Build_Menu+0x270>)
 800750a:	f7ff ff4d 	bl	80073a8 <BuildMenu>
	  BuildMenu(&menu12M,	&beslemeMenu		,White,	Black,	White,	White,		0, 				&menu11M,	&menu13M, 		&menu1M, 	0);
 800750e:	2300      	movs	r3, #0
 8007510:	9306      	str	r3, [sp, #24]
 8007512:	4b89      	ldr	r3, [pc, #548]	; (8007738 <Build_Menu+0x280>)
 8007514:	9305      	str	r3, [sp, #20]
 8007516:	4b8a      	ldr	r3, [pc, #552]	; (8007740 <Build_Menu+0x288>)
 8007518:	9304      	str	r3, [sp, #16]
 800751a:	4b83      	ldr	r3, [pc, #524]	; (8007728 <Build_Menu+0x270>)
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	2300      	movs	r3, #0
 8007520:	9302      	str	r3, [sp, #8]
 8007522:	2301      	movs	r3, #1
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	2301      	movs	r3, #1
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	2201      	movs	r2, #1
 800752e:	4986      	ldr	r1, [pc, #536]	; (8007748 <Build_Menu+0x290>)
 8007530:	4882      	ldr	r0, [pc, #520]	; (800773c <Build_Menu+0x284>)
 8007532:	f7ff ff39 	bl	80073a8 <BuildMenu>
	  BuildMenu(&menu13M,	&beslemeMenu		,White,	White,	Black,	White,		0,				&menu12M,	&menu11M,		&menu1M, 	0);
 8007536:	2300      	movs	r3, #0
 8007538:	9306      	str	r3, [sp, #24]
 800753a:	4b7f      	ldr	r3, [pc, #508]	; (8007738 <Build_Menu+0x280>)
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	4b7a      	ldr	r3, [pc, #488]	; (8007728 <Build_Menu+0x270>)
 8007540:	9304      	str	r3, [sp, #16]
 8007542:	4b7e      	ldr	r3, [pc, #504]	; (800773c <Build_Menu+0x284>)
 8007544:	9303      	str	r3, [sp, #12]
 8007546:	2300      	movs	r3, #0
 8007548:	9302      	str	r3, [sp, #8]
 800754a:	2301      	movs	r3, #1
 800754c:	9301      	str	r3, [sp, #4]
 800754e:	2300      	movs	r3, #0
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	2301      	movs	r3, #1
 8007554:	2201      	movs	r2, #1
 8007556:	497c      	ldr	r1, [pc, #496]	; (8007748 <Build_Menu+0x290>)
 8007558:	4879      	ldr	r0, [pc, #484]	; (8007740 <Build_Menu+0x288>)
 800755a:	f7ff ff25 	bl	80073a8 <BuildMenu>

	  BuildMenu(&ledlerM,	&anaMenu		,White,	Black,	White,	White, 		0, 				&menu1M,	&ayarlarM, 		0, 			&led1M);
 800755e:	4b7b      	ldr	r3, [pc, #492]	; (800774c <Build_Menu+0x294>)
 8007560:	9306      	str	r3, [sp, #24]
 8007562:	2300      	movs	r3, #0
 8007564:	9305      	str	r3, [sp, #20]
 8007566:	4b7a      	ldr	r3, [pc, #488]	; (8007750 <Build_Menu+0x298>)
 8007568:	9304      	str	r3, [sp, #16]
 800756a:	4b73      	ldr	r3, [pc, #460]	; (8007738 <Build_Menu+0x280>)
 800756c:	9303      	str	r3, [sp, #12]
 800756e:	2300      	movs	r3, #0
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	2301      	movs	r3, #1
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	2301      	movs	r3, #1
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	2300      	movs	r3, #0
 800757c:	2201      	movs	r2, #1
 800757e:	496d      	ldr	r1, [pc, #436]	; (8007734 <Build_Menu+0x27c>)
 8007580:	486a      	ldr	r0, [pc, #424]	; (800772c <Build_Menu+0x274>)
 8007582:	f7ff ff11 	bl	80073a8 <BuildMenu>

	  BuildMenu(&led1M,		&kontrollerMenu		,Black,	White,	White,	White,		0,				&led3M,		&led2M, 		&ledlerM, 	&on1M);
 8007586:	4b73      	ldr	r3, [pc, #460]	; (8007754 <Build_Menu+0x29c>)
 8007588:	9306      	str	r3, [sp, #24]
 800758a:	4b68      	ldr	r3, [pc, #416]	; (800772c <Build_Menu+0x274>)
 800758c:	9305      	str	r3, [sp, #20]
 800758e:	4b72      	ldr	r3, [pc, #456]	; (8007758 <Build_Menu+0x2a0>)
 8007590:	9304      	str	r3, [sp, #16]
 8007592:	4b72      	ldr	r3, [pc, #456]	; (800775c <Build_Menu+0x2a4>)
 8007594:	9303      	str	r3, [sp, #12]
 8007596:	2300      	movs	r3, #0
 8007598:	9302      	str	r3, [sp, #8]
 800759a:	2301      	movs	r3, #1
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	2301      	movs	r3, #1
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	2301      	movs	r3, #1
 80075a4:	2200      	movs	r2, #0
 80075a6:	496e      	ldr	r1, [pc, #440]	; (8007760 <Build_Menu+0x2a8>)
 80075a8:	4868      	ldr	r0, [pc, #416]	; (800774c <Build_Menu+0x294>)
 80075aa:	f7ff fefd 	bl	80073a8 <BuildMenu>
	  BuildMenu(&on1M,		&acKapaMenu		,Black,	White,	Black,	White, 		Led3_On,		&off1M,		&off1M, 		&led1M, 	0);
 80075ae:	2300      	movs	r3, #0
 80075b0:	9306      	str	r3, [sp, #24]
 80075b2:	4b66      	ldr	r3, [pc, #408]	; (800774c <Build_Menu+0x294>)
 80075b4:	9305      	str	r3, [sp, #20]
 80075b6:	4b6b      	ldr	r3, [pc, #428]	; (8007764 <Build_Menu+0x2ac>)
 80075b8:	9304      	str	r3, [sp, #16]
 80075ba:	4b6a      	ldr	r3, [pc, #424]	; (8007764 <Build_Menu+0x2ac>)
 80075bc:	9303      	str	r3, [sp, #12]
 80075be:	4b6a      	ldr	r3, [pc, #424]	; (8007768 <Build_Menu+0x2b0>)
 80075c0:	9302      	str	r3, [sp, #8]
 80075c2:	2301      	movs	r3, #1
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	2301      	movs	r3, #1
 80075cc:	2200      	movs	r2, #0
 80075ce:	4967      	ldr	r1, [pc, #412]	; (800776c <Build_Menu+0x2b4>)
 80075d0:	4860      	ldr	r0, [pc, #384]	; (8007754 <Build_Menu+0x29c>)
 80075d2:	f7ff fee9 	bl	80073a8 <BuildMenu>
	  BuildMenu(&off1M,		&acKapaMenu		,White,	Black,	Black,	White,		Led3_Off, 		&on1M, 		&on1M,			&led1M, 	0);
 80075d6:	2300      	movs	r3, #0
 80075d8:	9306      	str	r3, [sp, #24]
 80075da:	4b5c      	ldr	r3, [pc, #368]	; (800774c <Build_Menu+0x294>)
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	4b5d      	ldr	r3, [pc, #372]	; (8007754 <Build_Menu+0x29c>)
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	4b5c      	ldr	r3, [pc, #368]	; (8007754 <Build_Menu+0x29c>)
 80075e4:	9303      	str	r3, [sp, #12]
 80075e6:	4b62      	ldr	r3, [pc, #392]	; (8007770 <Build_Menu+0x2b8>)
 80075e8:	9302      	str	r3, [sp, #8]
 80075ea:	2301      	movs	r3, #1
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	2300      	movs	r3, #0
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	2300      	movs	r3, #0
 80075f4:	2201      	movs	r2, #1
 80075f6:	495d      	ldr	r1, [pc, #372]	; (800776c <Build_Menu+0x2b4>)
 80075f8:	485a      	ldr	r0, [pc, #360]	; (8007764 <Build_Menu+0x2ac>)
 80075fa:	f7ff fed5 	bl	80073a8 <BuildMenu>

	  BuildMenu(&led2M,		&kontrollerMenu		,White,	Black,	White,	White, 		0,			 	&led1M, 	&led3M, 		&ledlerM , 	&on2M);
 80075fe:	4b5d      	ldr	r3, [pc, #372]	; (8007774 <Build_Menu+0x2bc>)
 8007600:	9306      	str	r3, [sp, #24]
 8007602:	4b4a      	ldr	r3, [pc, #296]	; (800772c <Build_Menu+0x274>)
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	4b55      	ldr	r3, [pc, #340]	; (800775c <Build_Menu+0x2a4>)
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	4b50      	ldr	r3, [pc, #320]	; (800774c <Build_Menu+0x294>)
 800760c:	9303      	str	r3, [sp, #12]
 800760e:	2300      	movs	r3, #0
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	2301      	movs	r3, #1
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	2301      	movs	r3, #1
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	2300      	movs	r3, #0
 800761c:	2201      	movs	r2, #1
 800761e:	4950      	ldr	r1, [pc, #320]	; (8007760 <Build_Menu+0x2a8>)
 8007620:	484d      	ldr	r0, [pc, #308]	; (8007758 <Build_Menu+0x2a0>)
 8007622:	f7ff fec1 	bl	80073a8 <BuildMenu>
	  BuildMenu(&on2M,		&acKapaMenu		,Black,	White,	Black,	White, 		Led4_On,		&off2M,		&off2M, 		&led2M, 	0);
 8007626:	2300      	movs	r3, #0
 8007628:	9306      	str	r3, [sp, #24]
 800762a:	4b4b      	ldr	r3, [pc, #300]	; (8007758 <Build_Menu+0x2a0>)
 800762c:	9305      	str	r3, [sp, #20]
 800762e:	4b52      	ldr	r3, [pc, #328]	; (8007778 <Build_Menu+0x2c0>)
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	4b51      	ldr	r3, [pc, #324]	; (8007778 <Build_Menu+0x2c0>)
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	4b51      	ldr	r3, [pc, #324]	; (800777c <Build_Menu+0x2c4>)
 8007638:	9302      	str	r3, [sp, #8]
 800763a:	2301      	movs	r3, #1
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	2300      	movs	r3, #0
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	2301      	movs	r3, #1
 8007644:	2200      	movs	r2, #0
 8007646:	4949      	ldr	r1, [pc, #292]	; (800776c <Build_Menu+0x2b4>)
 8007648:	484a      	ldr	r0, [pc, #296]	; (8007774 <Build_Menu+0x2bc>)
 800764a:	f7ff fead 	bl	80073a8 <BuildMenu>
	  BuildMenu(&off2M,		&acKapaMenu		,White,	Black,	Black,	White, 		Led4_Off, 		&on2M, 		&on2M,			&led2M, 	0);
 800764e:	2300      	movs	r3, #0
 8007650:	9306      	str	r3, [sp, #24]
 8007652:	4b41      	ldr	r3, [pc, #260]	; (8007758 <Build_Menu+0x2a0>)
 8007654:	9305      	str	r3, [sp, #20]
 8007656:	4b47      	ldr	r3, [pc, #284]	; (8007774 <Build_Menu+0x2bc>)
 8007658:	9304      	str	r3, [sp, #16]
 800765a:	4b46      	ldr	r3, [pc, #280]	; (8007774 <Build_Menu+0x2bc>)
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	4b48      	ldr	r3, [pc, #288]	; (8007780 <Build_Menu+0x2c8>)
 8007660:	9302      	str	r3, [sp, #8]
 8007662:	2301      	movs	r3, #1
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	2300      	movs	r3, #0
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	2300      	movs	r3, #0
 800766c:	2201      	movs	r2, #1
 800766e:	493f      	ldr	r1, [pc, #252]	; (800776c <Build_Menu+0x2b4>)
 8007670:	4841      	ldr	r0, [pc, #260]	; (8007778 <Build_Menu+0x2c0>)
 8007672:	f7ff fe99 	bl	80073a8 <BuildMenu>

	  BuildMenu(&led3M,		&kontrollerMenu		,White,	White,	Black,	White, 		0,			 	&led2M, 	&led1M,			&ledlerM, 	&on3M);
 8007676:	4b43      	ldr	r3, [pc, #268]	; (8007784 <Build_Menu+0x2cc>)
 8007678:	9306      	str	r3, [sp, #24]
 800767a:	4b2c      	ldr	r3, [pc, #176]	; (800772c <Build_Menu+0x274>)
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	4b33      	ldr	r3, [pc, #204]	; (800774c <Build_Menu+0x294>)
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	4b35      	ldr	r3, [pc, #212]	; (8007758 <Build_Menu+0x2a0>)
 8007684:	9303      	str	r3, [sp, #12]
 8007686:	2300      	movs	r3, #0
 8007688:	9302      	str	r3, [sp, #8]
 800768a:	2301      	movs	r3, #1
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	2300      	movs	r3, #0
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	2301      	movs	r3, #1
 8007694:	2201      	movs	r2, #1
 8007696:	4932      	ldr	r1, [pc, #200]	; (8007760 <Build_Menu+0x2a8>)
 8007698:	4830      	ldr	r0, [pc, #192]	; (800775c <Build_Menu+0x2a4>)
 800769a:	f7ff fe85 	bl	80073a8 <BuildMenu>
	  BuildMenu(&on3M,		&acKapaMenu		,Black,	White,	Black,	White, 		Led5_On,		&off3M,		&off3M, 		&led3M, 	0);
 800769e:	2300      	movs	r3, #0
 80076a0:	9306      	str	r3, [sp, #24]
 80076a2:	4b2e      	ldr	r3, [pc, #184]	; (800775c <Build_Menu+0x2a4>)
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	4b38      	ldr	r3, [pc, #224]	; (8007788 <Build_Menu+0x2d0>)
 80076a8:	9304      	str	r3, [sp, #16]
 80076aa:	4b37      	ldr	r3, [pc, #220]	; (8007788 <Build_Menu+0x2d0>)
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	4b37      	ldr	r3, [pc, #220]	; (800778c <Build_Menu+0x2d4>)
 80076b0:	9302      	str	r3, [sp, #8]
 80076b2:	2301      	movs	r3, #1
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	2301      	movs	r3, #1
 80076bc:	2200      	movs	r2, #0
 80076be:	492b      	ldr	r1, [pc, #172]	; (800776c <Build_Menu+0x2b4>)
 80076c0:	4830      	ldr	r0, [pc, #192]	; (8007784 <Build_Menu+0x2cc>)
 80076c2:	f7ff fe71 	bl	80073a8 <BuildMenu>
	  BuildMenu(&off3M,		&acKapaMenu		,White,	Black,	Black,	White, 		Led5_Off, 		&on3M, 		&on3M,			&led3M, 	0);
 80076c6:	2300      	movs	r3, #0
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	4b24      	ldr	r3, [pc, #144]	; (800775c <Build_Menu+0x2a4>)
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	4b2d      	ldr	r3, [pc, #180]	; (8007784 <Build_Menu+0x2cc>)
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	4b2c      	ldr	r3, [pc, #176]	; (8007784 <Build_Menu+0x2cc>)
 80076d4:	9303      	str	r3, [sp, #12]
 80076d6:	4b2e      	ldr	r3, [pc, #184]	; (8007790 <Build_Menu+0x2d8>)
 80076d8:	9302      	str	r3, [sp, #8]
 80076da:	2301      	movs	r3, #1
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	2300      	movs	r3, #0
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	2300      	movs	r3, #0
 80076e4:	2201      	movs	r2, #1
 80076e6:	4921      	ldr	r1, [pc, #132]	; (800776c <Build_Menu+0x2b4>)
 80076e8:	4827      	ldr	r0, [pc, #156]	; (8007788 <Build_Menu+0x2d0>)
 80076ea:	f7ff fe5d 	bl	80073a8 <BuildMenu>

	  BuildMenu(&ayarlarM,	&anaMenu		,White,	White,	Black,	White,		0,				&ledlerM,	&exitM,		0, 			&saatM);
 80076ee:	4b29      	ldr	r3, [pc, #164]	; (8007794 <Build_Menu+0x2dc>)
 80076f0:	9306      	str	r3, [sp, #24]
 80076f2:	2300      	movs	r3, #0
 80076f4:	9305      	str	r3, [sp, #20]
 80076f6:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <Build_Menu+0x278>)
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <Build_Menu+0x274>)
 80076fc:	9303      	str	r3, [sp, #12]
 80076fe:	2300      	movs	r3, #0
 8007700:	9302      	str	r3, [sp, #8]
 8007702:	2301      	movs	r3, #1
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	2300      	movs	r3, #0
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	2301      	movs	r3, #1
 800770c:	2201      	movs	r2, #1
 800770e:	4909      	ldr	r1, [pc, #36]	; (8007734 <Build_Menu+0x27c>)
 8007710:	480f      	ldr	r0, [pc, #60]	; (8007750 <Build_Menu+0x298>)
 8007712:	f7ff fe49 	bl	80073a8 <BuildMenu>

	  BuildMenu(&saatM,		&menu3Menu	,Black,	White,	White,	White,		KeySaatiAyarlama, 	&alarmM,	&takvimM, 		&ayarlarM, 	0);
 8007716:	2300      	movs	r3, #0
 8007718:	9306      	str	r3, [sp, #24]
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <Build_Menu+0x298>)
 800771c:	9305      	str	r3, [sp, #20]
 800771e:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <Build_Menu+0x2e0>)
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	4b1e      	ldr	r3, [pc, #120]	; (800779c <Build_Menu+0x2e4>)
 8007724:	9303      	str	r3, [sp, #12]
 8007726:	e03b      	b.n	80077a0 <Build_Menu+0x2e8>
 8007728:	200007b0 	.word	0x200007b0
 800772c:	20000a0c 	.word	0x20000a0c
 8007730:	20000740 	.word	0x20000740
 8007734:	20000024 	.word	0x20000024
 8007738:	200009f0 	.word	0x200009f0
 800773c:	200005c0 	.word	0x200005c0
 8007740:	2000062c 	.word	0x2000062c
 8007744:	08006f01 	.word	0x08006f01
 8007748:	2000008c 	.word	0x2000008c
 800774c:	200008dc 	.word	0x200008dc
 8007750:	200007cc 	.word	0x200007cc
 8007754:	200005dc 	.word	0x200005dc
 8007758:	20000a2c 	.word	0x20000a2c
 800775c:	2000092c 	.word	0x2000092c
 8007760:	200000c0 	.word	0x200000c0
 8007764:	200009b0 	.word	0x200009b0
 8007768:	08007871 	.word	0x08007871
 800776c:	20000058 	.word	0x20000058
 8007770:	0800787f 	.word	0x0800787f
 8007774:	20000a54 	.word	0x20000a54
 8007778:	200008a4 	.word	0x200008a4
 800777c:	0800788d 	.word	0x0800788d
 8007780:	0800789b 	.word	0x0800789b
 8007784:	200007e8 	.word	0x200007e8
 8007788:	20000724 	.word	0x20000724
 800778c:	080078a9 	.word	0x080078a9
 8007790:	080078b7 	.word	0x080078b7
 8007794:	2000075c 	.word	0x2000075c
 8007798:	200008c0 	.word	0x200008c0
 800779c:	200009cc 	.word	0x200009cc
 80077a0:	4b26      	ldr	r3, [pc, #152]	; (800783c <Build_Menu+0x384>)
 80077a2:	9302      	str	r3, [sp, #8]
 80077a4:	2301      	movs	r3, #1
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	2301      	movs	r3, #1
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	2301      	movs	r3, #1
 80077ae:	2200      	movs	r2, #0
 80077b0:	4923      	ldr	r1, [pc, #140]	; (8007840 <Build_Menu+0x388>)
 80077b2:	4824      	ldr	r0, [pc, #144]	; (8007844 <Build_Menu+0x38c>)
 80077b4:	f7ff fdf8 	bl	80073a8 <BuildMenu>

	  BuildMenu(&takvimM,	&menu3Menu	,White,	Black,	White,	White,		KeyTakvimiAyarlama,	&saatM, 	&alarmM, 		&ayarlarM, 	0);
 80077b8:	2300      	movs	r3, #0
 80077ba:	9306      	str	r3, [sp, #24]
 80077bc:	4b22      	ldr	r3, [pc, #136]	; (8007848 <Build_Menu+0x390>)
 80077be:	9305      	str	r3, [sp, #20]
 80077c0:	4b22      	ldr	r3, [pc, #136]	; (800784c <Build_Menu+0x394>)
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	4b1f      	ldr	r3, [pc, #124]	; (8007844 <Build_Menu+0x38c>)
 80077c6:	9303      	str	r3, [sp, #12]
 80077c8:	4b21      	ldr	r3, [pc, #132]	; (8007850 <Build_Menu+0x398>)
 80077ca:	9302      	str	r3, [sp, #8]
 80077cc:	2301      	movs	r3, #1
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	2301      	movs	r3, #1
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	2300      	movs	r3, #0
 80077d6:	2201      	movs	r2, #1
 80077d8:	4919      	ldr	r1, [pc, #100]	; (8007840 <Build_Menu+0x388>)
 80077da:	481e      	ldr	r0, [pc, #120]	; (8007854 <Build_Menu+0x39c>)
 80077dc:	f7ff fde4 	bl	80073a8 <BuildMenu>

	  BuildMenu(&alarmM,	&menu3Menu	,White,	White,	Black,	White,		KeyAlarmAyarlama, 				&takvimM, 	&saatM,			&ayarlarM , 0);
 80077e0:	2300      	movs	r3, #0
 80077e2:	9306      	str	r3, [sp, #24]
 80077e4:	4b18      	ldr	r3, [pc, #96]	; (8007848 <Build_Menu+0x390>)
 80077e6:	9305      	str	r3, [sp, #20]
 80077e8:	4b16      	ldr	r3, [pc, #88]	; (8007844 <Build_Menu+0x38c>)
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	4b19      	ldr	r3, [pc, #100]	; (8007854 <Build_Menu+0x39c>)
 80077ee:	9303      	str	r3, [sp, #12]
 80077f0:	4b19      	ldr	r3, [pc, #100]	; (8007858 <Build_Menu+0x3a0>)
 80077f2:	9302      	str	r3, [sp, #8]
 80077f4:	2301      	movs	r3, #1
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	2300      	movs	r3, #0
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2301      	movs	r3, #1
 80077fe:	2201      	movs	r2, #1
 8007800:	490f      	ldr	r1, [pc, #60]	; (8007840 <Build_Menu+0x388>)
 8007802:	4812      	ldr	r0, [pc, #72]	; (800784c <Build_Menu+0x394>)
 8007804:	f7ff fdd0 	bl	80073a8 <BuildMenu>

	  BuildMenu(&exitM,		&anaMenu		,White,	White,	White,	Black,		menuExit, 		&ayarlarM,	&menu1M, 		0, 			0);
 8007808:	2300      	movs	r3, #0
 800780a:	9306      	str	r3, [sp, #24]
 800780c:	2300      	movs	r3, #0
 800780e:	9305      	str	r3, [sp, #20]
 8007810:	4b12      	ldr	r3, [pc, #72]	; (800785c <Build_Menu+0x3a4>)
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <Build_Menu+0x390>)
 8007816:	9303      	str	r3, [sp, #12]
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <Build_Menu+0x3a8>)
 800781a:	9302      	str	r3, [sp, #8]
 800781c:	2300      	movs	r3, #0
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	2301      	movs	r3, #1
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	2301      	movs	r3, #1
 8007826:	2201      	movs	r2, #1
 8007828:	490e      	ldr	r1, [pc, #56]	; (8007864 <Build_Menu+0x3ac>)
 800782a:	480f      	ldr	r0, [pc, #60]	; (8007868 <Build_Menu+0x3b0>)
 800782c:	f7ff fdbc 	bl	80073a8 <BuildMenu>



	  //Assign the current menu item the first item in the menu
	  currentM = &menu1M;
 8007830:	4b0e      	ldr	r3, [pc, #56]	; (800786c <Build_Menu+0x3b4>)
 8007832:	4a0a      	ldr	r2, [pc, #40]	; (800785c <Build_Menu+0x3a4>)
 8007834:	601a      	str	r2, [r3, #0]

}
 8007836:	bf00      	nop
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	08006ded 	.word	0x08006ded
 8007840:	200000f4 	.word	0x200000f4
 8007844:	2000075c 	.word	0x2000075c
 8007848:	200007cc 	.word	0x200007cc
 800784c:	200009cc 	.word	0x200009cc
 8007850:	08006ea1 	.word	0x08006ea1
 8007854:	200008c0 	.word	0x200008c0
 8007858:	08006e45 	.word	0x08006e45
 800785c:	200009f0 	.word	0x200009f0
 8007860:	08007035 	.word	0x08007035
 8007864:	20000024 	.word	0x20000024
 8007868:	20000740 	.word	0x20000740
 800786c:	200007ac 	.word	0x200007ac

08007870 <Led3_On>:



void Led3_On()
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
//HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,SET);
}
 8007874:	bf00      	nop
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <Led3_Off>:

void Led3_Off()
{
 800787e:	b480      	push	{r7}
 8007880:	af00      	add	r7, sp, #0
//HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,RESET);
}
 8007882:	bf00      	nop
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <Led4_On>:

void Led4_On()
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
//HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,SET);
}
 8007890:	bf00      	nop
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <Led4_Off>:

void Led4_Off()
{
 800789a:	b480      	push	{r7}
 800789c:	af00      	add	r7, sp, #0
//HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin,RESET);
}
 800789e:	bf00      	nop
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <Led5_On>:

void Led5_On()
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
//HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,SET);
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <Led5_Off>:

void Led5_Off()
{
 80078b6:	b480      	push	{r7}
 80078b8:	af00      	add	r7, sp, #0
//HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,RESET);
}
 80078ba:	bf00      	nop
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <ekranMenu>:


void ekranMenu(uint8_t y1)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	71fb      	strb	r3, [r7, #7]

	char ekranYer[16];
	OLED_Fill(Black);
 80078ce:	2000      	movs	r0, #0
 80078d0:	f7fe fc54 	bl	800617c <OLED_Fill>

	strcpy(ekranYer, currentM->menuPtr->menuAdi);
 80078d4:	4b42      	ldr	r3, [pc, #264]	; (80079e0 <ekranMenu+0x11c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	f107 0308 	add.w	r3, r7, #8
 80078e0:	4611      	mov	r1, r2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 f934 	bl	8007b50 <strcpy>
	OLED_SetCursor(30, y1);
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	4619      	mov	r1, r3
 80078ec:	201e      	movs	r0, #30
 80078ee:	f7fe fe95 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, White);
 80078f2:	4a3c      	ldr	r2, [pc, #240]	; (80079e4 <ekranMenu+0x120>)
 80078f4:	f107 0008 	add.w	r0, r7, #8
 80078f8:	2301      	movs	r3, #1
 80078fa:	ca06      	ldmia	r2, {r1, r2}
 80078fc:	f7fe fe68 	bl	80065d0 <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir1);
 8007900:	4b37      	ldr	r3, [pc, #220]	; (80079e0 <ekranMenu+0x11c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f103 020a 	add.w	r2, r3, #10
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	4611      	mov	r1, r2
 8007910:	4618      	mov	r0, r3
 8007912:	f000 f91d 	bl	8007b50 <strcpy>
	OLED_SetCursor(0, y1+15);
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	330f      	adds	r3, #15
 800791a:	b2db      	uxtb	r3, r3
 800791c:	4619      	mov	r1, r3
 800791e:	2000      	movs	r0, #0
 8007920:	f7fe fe7c 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color1);
 8007924:	4b2e      	ldr	r3, [pc, #184]	; (80079e0 <ekranMenu+0x11c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	791b      	ldrb	r3, [r3, #4]
 800792a:	4a2e      	ldr	r2, [pc, #184]	; (80079e4 <ekranMenu+0x120>)
 800792c:	f107 0008 	add.w	r0, r7, #8
 8007930:	ca06      	ldmia	r2, {r1, r2}
 8007932:	f7fe fe4d 	bl	80065d0 <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir2);
 8007936:	4b2a      	ldr	r3, [pc, #168]	; (80079e0 <ekranMenu+0x11c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f103 0214 	add.w	r2, r3, #20
 8007940:	f107 0308 	add.w	r3, r7, #8
 8007944:	4611      	mov	r1, r2
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f902 	bl	8007b50 <strcpy>
	OLED_SetCursor(0, y1+25);
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	3319      	adds	r3, #25
 8007950:	b2db      	uxtb	r3, r3
 8007952:	4619      	mov	r1, r3
 8007954:	2000      	movs	r0, #0
 8007956:	f7fe fe61 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color2);
 800795a:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <ekranMenu+0x11c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	795b      	ldrb	r3, [r3, #5]
 8007960:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <ekranMenu+0x120>)
 8007962:	f107 0008 	add.w	r0, r7, #8
 8007966:	ca06      	ldmia	r2, {r1, r2}
 8007968:	f7fe fe32 	bl	80065d0 <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir3);
 800796c:	4b1c      	ldr	r3, [pc, #112]	; (80079e0 <ekranMenu+0x11c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f103 021e 	add.w	r2, r3, #30
 8007976:	f107 0308 	add.w	r3, r7, #8
 800797a:	4611      	mov	r1, r2
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f8e7 	bl	8007b50 <strcpy>
	OLED_SetCursor(0, y1+35);
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	3323      	adds	r3, #35	; 0x23
 8007986:	b2db      	uxtb	r3, r3
 8007988:	4619      	mov	r1, r3
 800798a:	2000      	movs	r0, #0
 800798c:	f7fe fe46 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color3);
 8007990:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <ekranMenu+0x11c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	799b      	ldrb	r3, [r3, #6]
 8007996:	4a13      	ldr	r2, [pc, #76]	; (80079e4 <ekranMenu+0x120>)
 8007998:	f107 0008 	add.w	r0, r7, #8
 800799c:	ca06      	ldmia	r2, {r1, r2}
 800799e:	f7fe fe17 	bl	80065d0 <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir4);
 80079a2:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <ekranMenu+0x11c>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80079ac:	f107 0308 	add.w	r3, r7, #8
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f8cc 	bl	8007b50 <strcpy>
	OLED_SetCursor(0, y1+45);
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	332d      	adds	r3, #45	; 0x2d
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	4619      	mov	r1, r3
 80079c0:	2000      	movs	r0, #0
 80079c2:	f7fe fe2b 	bl	800661c <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color4);
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <ekranMenu+0x11c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	79db      	ldrb	r3, [r3, #7]
 80079cc:	4a05      	ldr	r2, [pc, #20]	; (80079e4 <ekranMenu+0x120>)
 80079ce:	f107 0008 	add.w	r0, r7, #8
 80079d2:	ca06      	ldmia	r2, {r1, r2}
 80079d4:	f7fe fdfc 	bl	80065d0 <OLED_WriteString>
}
 80079d8:	bf00      	nop
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	200007ac 	.word	0x200007ac
 80079e4:	2000000c 	.word	0x2000000c

080079e8 <menuSistemi>:

void menuSistemi(uint8_t y) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	4603      	mov	r3, r0
 80079f0:	71fb      	strb	r3, [r7, #7]

	if (durum) {
 80079f2:	4b2b      	ldr	r3, [pc, #172]	; (8007aa0 <menuSistemi+0xb8>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d04e      	beq.n	8007a98 <menuSistemi+0xb0>

		switch (Key) {
 80079fa:	4b2a      	ldr	r3, [pc, #168]	; (8007aa4 <menuSistemi+0xbc>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2bd0      	cmp	r3, #208	; 0xd0
 8007a00:	d00f      	beq.n	8007a22 <menuSistemi+0x3a>
 8007a02:	2bd0      	cmp	r3, #208	; 0xd0
 8007a04:	dc04      	bgt.n	8007a10 <menuSistemi+0x28>
 8007a06:	2b70      	cmp	r3, #112	; 0x70
 8007a08:	d021      	beq.n	8007a4e <menuSistemi+0x66>
 8007a0a:	2bb0      	cmp	r3, #176	; 0xb0
 8007a0c:	d02a      	beq.n	8007a64 <menuSistemi+0x7c>
 8007a0e:	e034      	b.n	8007a7a <menuSistemi+0x92>
 8007a10:	2be0      	cmp	r3, #224	; 0xe0
 8007a12:	d011      	beq.n	8007a38 <menuSistemi+0x50>
 8007a14:	2bf0      	cmp	r3, #240	; 0xf0
 8007a16:	d130      	bne.n	8007a7a <menuSistemi+0x92>
		case T0DEGER:
			ekranMenu(y);
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff ff52 	bl	80078c4 <ekranMenu>
			break;
 8007a20:	e02b      	b.n	8007a7a <menuSistemi+0x92>

		case T1DEGER:
			Next(&currentM); //Check if there is a next node and then go there
 8007a22:	4821      	ldr	r0, [pc, #132]	; (8007aa8 <menuSistemi+0xc0>)
 8007a24:	f7ff fcef 	bl	8007406 <Next>
			ekranMenu(y);
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff ff4a 	bl	80078c4 <ekranMenu>
			durum = false;
 8007a30:	4b1b      	ldr	r3, [pc, #108]	; (8007aa0 <menuSistemi+0xb8>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]
			break;
 8007a36:	e020      	b.n	8007a7a <menuSistemi+0x92>

		case T2DEGER:
			Prev(&currentM);
 8007a38:	481b      	ldr	r0, [pc, #108]	; (8007aa8 <menuSistemi+0xc0>)
 8007a3a:	f7ff fcf8 	bl	800742e <Prev>
			ekranMenu(y);
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff ff3f 	bl	80078c4 <ekranMenu>
			durum = false;
 8007a46:	4b16      	ldr	r3, [pc, #88]	; (8007aa0 <menuSistemi+0xb8>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
			break;
 8007a4c:	e015      	b.n	8007a7a <menuSistemi+0x92>

		case T3DEGER:
			Down(&currentM);
 8007a4e:	4816      	ldr	r0, [pc, #88]	; (8007aa8 <menuSistemi+0xc0>)
 8007a50:	f7ff fd15 	bl	800747e <Down>
			ekranMenu(y);
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff ff34 	bl	80078c4 <ekranMenu>
			durum = false;
 8007a5c:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <menuSistemi+0xb8>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	701a      	strb	r2, [r3, #0]
			break;
 8007a62:	e00a      	b.n	8007a7a <menuSistemi+0x92>

		case T4DEGER:
			Up(&currentM);
 8007a64:	4810      	ldr	r0, [pc, #64]	; (8007aa8 <menuSistemi+0xc0>)
 8007a66:	f7ff fcf6 	bl	8007456 <Up>
			ekranMenu(y);
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff ff29 	bl	80078c4 <ekranMenu>
			durum = false;
 8007a72:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <menuSistemi+0xb8>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]
			break;
 8007a78:	bf00      	nop
		default:
			;
		}
		OLED_DrawLine(0, y + 11, 110, y + 11, White);
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	330b      	adds	r3, #11
 8007a80:	b299      	uxth	r1, r3
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	330b      	adds	r3, #11
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	226e      	movs	r2, #110	; 0x6e
 8007a92:	2000      	movs	r0, #0
 8007a94:	f7fe fb8a 	bl	80061ac <OLED_DrawLine>
	}

}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20000848 	.word	0x20000848
 8007aa4:	20000a49 	.word	0x20000a49
 8007aa8:	200007ac 	.word	0x200007ac

08007aac <__errno>:
 8007aac:	4b01      	ldr	r3, [pc, #4]	; (8007ab4 <__errno+0x8>)
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20000128 	.word	0x20000128

08007ab8 <__libc_init_array>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	4e0d      	ldr	r6, [pc, #52]	; (8007af0 <__libc_init_array+0x38>)
 8007abc:	4c0d      	ldr	r4, [pc, #52]	; (8007af4 <__libc_init_array+0x3c>)
 8007abe:	1ba4      	subs	r4, r4, r6
 8007ac0:	10a4      	asrs	r4, r4, #2
 8007ac2:	2500      	movs	r5, #0
 8007ac4:	42a5      	cmp	r5, r4
 8007ac6:	d109      	bne.n	8007adc <__libc_init_array+0x24>
 8007ac8:	4e0b      	ldr	r6, [pc, #44]	; (8007af8 <__libc_init_array+0x40>)
 8007aca:	4c0c      	ldr	r4, [pc, #48]	; (8007afc <__libc_init_array+0x44>)
 8007acc:	f000 fc2e 	bl	800832c <_init>
 8007ad0:	1ba4      	subs	r4, r4, r6
 8007ad2:	10a4      	asrs	r4, r4, #2
 8007ad4:	2500      	movs	r5, #0
 8007ad6:	42a5      	cmp	r5, r4
 8007ad8:	d105      	bne.n	8007ae6 <__libc_init_array+0x2e>
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ae0:	4798      	blx	r3
 8007ae2:	3501      	adds	r5, #1
 8007ae4:	e7ee      	b.n	8007ac4 <__libc_init_array+0xc>
 8007ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007aea:	4798      	blx	r3
 8007aec:	3501      	adds	r5, #1
 8007aee:	e7f2      	b.n	8007ad6 <__libc_init_array+0x1e>
 8007af0:	080090c0 	.word	0x080090c0
 8007af4:	080090c0 	.word	0x080090c0
 8007af8:	080090c0 	.word	0x080090c0
 8007afc:	080090c4 	.word	0x080090c4

08007b00 <memset>:
 8007b00:	4402      	add	r2, r0
 8007b02:	4603      	mov	r3, r0
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d100      	bne.n	8007b0a <memset+0xa>
 8007b08:	4770      	bx	lr
 8007b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b0e:	e7f9      	b.n	8007b04 <memset+0x4>

08007b10 <siprintf>:
 8007b10:	b40e      	push	{r1, r2, r3}
 8007b12:	b500      	push	{lr}
 8007b14:	b09c      	sub	sp, #112	; 0x70
 8007b16:	ab1d      	add	r3, sp, #116	; 0x74
 8007b18:	9002      	str	r0, [sp, #8]
 8007b1a:	9006      	str	r0, [sp, #24]
 8007b1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b20:	4809      	ldr	r0, [pc, #36]	; (8007b48 <siprintf+0x38>)
 8007b22:	9107      	str	r1, [sp, #28]
 8007b24:	9104      	str	r1, [sp, #16]
 8007b26:	4909      	ldr	r1, [pc, #36]	; (8007b4c <siprintf+0x3c>)
 8007b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b2c:	9105      	str	r1, [sp, #20]
 8007b2e:	6800      	ldr	r0, [r0, #0]
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	a902      	add	r1, sp, #8
 8007b34:	f000 f86e 	bl	8007c14 <_svfiprintf_r>
 8007b38:	9b02      	ldr	r3, [sp, #8]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	b01c      	add	sp, #112	; 0x70
 8007b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b44:	b003      	add	sp, #12
 8007b46:	4770      	bx	lr
 8007b48:	20000128 	.word	0x20000128
 8007b4c:	ffff0208 	.word	0xffff0208

08007b50 <strcpy>:
 8007b50:	4603      	mov	r3, r0
 8007b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b56:	f803 2b01 	strb.w	r2, [r3], #1
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	d1f9      	bne.n	8007b52 <strcpy+0x2>
 8007b5e:	4770      	bx	lr

08007b60 <__ssputs_r>:
 8007b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b64:	688e      	ldr	r6, [r1, #8]
 8007b66:	429e      	cmp	r6, r3
 8007b68:	4682      	mov	sl, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	4690      	mov	r8, r2
 8007b6e:	4699      	mov	r9, r3
 8007b70:	d837      	bhi.n	8007be2 <__ssputs_r+0x82>
 8007b72:	898a      	ldrh	r2, [r1, #12]
 8007b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b78:	d031      	beq.n	8007bde <__ssputs_r+0x7e>
 8007b7a:	6825      	ldr	r5, [r4, #0]
 8007b7c:	6909      	ldr	r1, [r1, #16]
 8007b7e:	1a6f      	subs	r7, r5, r1
 8007b80:	6965      	ldr	r5, [r4, #20]
 8007b82:	2302      	movs	r3, #2
 8007b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b88:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b8c:	f109 0301 	add.w	r3, r9, #1
 8007b90:	443b      	add	r3, r7
 8007b92:	429d      	cmp	r5, r3
 8007b94:	bf38      	it	cc
 8007b96:	461d      	movcc	r5, r3
 8007b98:	0553      	lsls	r3, r2, #21
 8007b9a:	d530      	bpl.n	8007bfe <__ssputs_r+0x9e>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f000 fb2b 	bl	80081f8 <_malloc_r>
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	b950      	cbnz	r0, 8007bbc <__ssputs_r+0x5c>
 8007ba6:	230c      	movs	r3, #12
 8007ba8:	f8ca 3000 	str.w	r3, [sl]
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb2:	81a3      	strh	r3, [r4, #12]
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbc:	463a      	mov	r2, r7
 8007bbe:	6921      	ldr	r1, [r4, #16]
 8007bc0:	f000 faa8 	bl	8008114 <memcpy>
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bce:	81a3      	strh	r3, [r4, #12]
 8007bd0:	6126      	str	r6, [r4, #16]
 8007bd2:	6165      	str	r5, [r4, #20]
 8007bd4:	443e      	add	r6, r7
 8007bd6:	1bed      	subs	r5, r5, r7
 8007bd8:	6026      	str	r6, [r4, #0]
 8007bda:	60a5      	str	r5, [r4, #8]
 8007bdc:	464e      	mov	r6, r9
 8007bde:	454e      	cmp	r6, r9
 8007be0:	d900      	bls.n	8007be4 <__ssputs_r+0x84>
 8007be2:	464e      	mov	r6, r9
 8007be4:	4632      	mov	r2, r6
 8007be6:	4641      	mov	r1, r8
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	f000 fa9e 	bl	800812a <memmove>
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	1b9b      	subs	r3, r3, r6
 8007bf2:	60a3      	str	r3, [r4, #8]
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	441e      	add	r6, r3
 8007bf8:	6026      	str	r6, [r4, #0]
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e7dc      	b.n	8007bb8 <__ssputs_r+0x58>
 8007bfe:	462a      	mov	r2, r5
 8007c00:	f000 fb54 	bl	80082ac <_realloc_r>
 8007c04:	4606      	mov	r6, r0
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d1e2      	bne.n	8007bd0 <__ssputs_r+0x70>
 8007c0a:	6921      	ldr	r1, [r4, #16]
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	f000 faa5 	bl	800815c <_free_r>
 8007c12:	e7c8      	b.n	8007ba6 <__ssputs_r+0x46>

08007c14 <_svfiprintf_r>:
 8007c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c18:	461d      	mov	r5, r3
 8007c1a:	898b      	ldrh	r3, [r1, #12]
 8007c1c:	061f      	lsls	r7, r3, #24
 8007c1e:	b09d      	sub	sp, #116	; 0x74
 8007c20:	4680      	mov	r8, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	4616      	mov	r6, r2
 8007c26:	d50f      	bpl.n	8007c48 <_svfiprintf_r+0x34>
 8007c28:	690b      	ldr	r3, [r1, #16]
 8007c2a:	b96b      	cbnz	r3, 8007c48 <_svfiprintf_r+0x34>
 8007c2c:	2140      	movs	r1, #64	; 0x40
 8007c2e:	f000 fae3 	bl	80081f8 <_malloc_r>
 8007c32:	6020      	str	r0, [r4, #0]
 8007c34:	6120      	str	r0, [r4, #16]
 8007c36:	b928      	cbnz	r0, 8007c44 <_svfiprintf_r+0x30>
 8007c38:	230c      	movs	r3, #12
 8007c3a:	f8c8 3000 	str.w	r3, [r8]
 8007c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c42:	e0c8      	b.n	8007dd6 <_svfiprintf_r+0x1c2>
 8007c44:	2340      	movs	r3, #64	; 0x40
 8007c46:	6163      	str	r3, [r4, #20]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4c:	2320      	movs	r3, #32
 8007c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c52:	2330      	movs	r3, #48	; 0x30
 8007c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c58:	9503      	str	r5, [sp, #12]
 8007c5a:	f04f 0b01 	mov.w	fp, #1
 8007c5e:	4637      	mov	r7, r6
 8007c60:	463d      	mov	r5, r7
 8007c62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c66:	b10b      	cbz	r3, 8007c6c <_svfiprintf_r+0x58>
 8007c68:	2b25      	cmp	r3, #37	; 0x25
 8007c6a:	d13e      	bne.n	8007cea <_svfiprintf_r+0xd6>
 8007c6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007c70:	d00b      	beq.n	8007c8a <_svfiprintf_r+0x76>
 8007c72:	4653      	mov	r3, sl
 8007c74:	4632      	mov	r2, r6
 8007c76:	4621      	mov	r1, r4
 8007c78:	4640      	mov	r0, r8
 8007c7a:	f7ff ff71 	bl	8007b60 <__ssputs_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f000 80a4 	beq.w	8007dcc <_svfiprintf_r+0x1b8>
 8007c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c86:	4453      	add	r3, sl
 8007c88:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8a:	783b      	ldrb	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 809d 	beq.w	8007dcc <_svfiprintf_r+0x1b8>
 8007c92:	2300      	movs	r3, #0
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295
 8007c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	9307      	str	r3, [sp, #28]
 8007ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca6:	462f      	mov	r7, r5
 8007ca8:	2205      	movs	r2, #5
 8007caa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007cae:	4850      	ldr	r0, [pc, #320]	; (8007df0 <_svfiprintf_r+0x1dc>)
 8007cb0:	f7f8 fa8e 	bl	80001d0 <memchr>
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	b9d0      	cbnz	r0, 8007cee <_svfiprintf_r+0xda>
 8007cb8:	06d9      	lsls	r1, r3, #27
 8007cba:	bf44      	itt	mi
 8007cbc:	2220      	movmi	r2, #32
 8007cbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cc2:	071a      	lsls	r2, r3, #28
 8007cc4:	bf44      	itt	mi
 8007cc6:	222b      	movmi	r2, #43	; 0x2b
 8007cc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ccc:	782a      	ldrb	r2, [r5, #0]
 8007cce:	2a2a      	cmp	r2, #42	; 0x2a
 8007cd0:	d015      	beq.n	8007cfe <_svfiprintf_r+0xea>
 8007cd2:	9a07      	ldr	r2, [sp, #28]
 8007cd4:	462f      	mov	r7, r5
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	250a      	movs	r5, #10
 8007cda:	4639      	mov	r1, r7
 8007cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce0:	3b30      	subs	r3, #48	; 0x30
 8007ce2:	2b09      	cmp	r3, #9
 8007ce4:	d94d      	bls.n	8007d82 <_svfiprintf_r+0x16e>
 8007ce6:	b1b8      	cbz	r0, 8007d18 <_svfiprintf_r+0x104>
 8007ce8:	e00f      	b.n	8007d0a <_svfiprintf_r+0xf6>
 8007cea:	462f      	mov	r7, r5
 8007cec:	e7b8      	b.n	8007c60 <_svfiprintf_r+0x4c>
 8007cee:	4a40      	ldr	r2, [pc, #256]	; (8007df0 <_svfiprintf_r+0x1dc>)
 8007cf0:	1a80      	subs	r0, r0, r2
 8007cf2:	fa0b f000 	lsl.w	r0, fp, r0
 8007cf6:	4318      	orrs	r0, r3
 8007cf8:	9004      	str	r0, [sp, #16]
 8007cfa:	463d      	mov	r5, r7
 8007cfc:	e7d3      	b.n	8007ca6 <_svfiprintf_r+0x92>
 8007cfe:	9a03      	ldr	r2, [sp, #12]
 8007d00:	1d11      	adds	r1, r2, #4
 8007d02:	6812      	ldr	r2, [r2, #0]
 8007d04:	9103      	str	r1, [sp, #12]
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	db01      	blt.n	8007d0e <_svfiprintf_r+0xfa>
 8007d0a:	9207      	str	r2, [sp, #28]
 8007d0c:	e004      	b.n	8007d18 <_svfiprintf_r+0x104>
 8007d0e:	4252      	negs	r2, r2
 8007d10:	f043 0302 	orr.w	r3, r3, #2
 8007d14:	9207      	str	r2, [sp, #28]
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	783b      	ldrb	r3, [r7, #0]
 8007d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d1c:	d10c      	bne.n	8007d38 <_svfiprintf_r+0x124>
 8007d1e:	787b      	ldrb	r3, [r7, #1]
 8007d20:	2b2a      	cmp	r3, #42	; 0x2a
 8007d22:	d133      	bne.n	8007d8c <_svfiprintf_r+0x178>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	1d1a      	adds	r2, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	9203      	str	r2, [sp, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bfb8      	it	lt
 8007d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d34:	3702      	adds	r7, #2
 8007d36:	9305      	str	r3, [sp, #20]
 8007d38:	4d2e      	ldr	r5, [pc, #184]	; (8007df4 <_svfiprintf_r+0x1e0>)
 8007d3a:	7839      	ldrb	r1, [r7, #0]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f7f8 fa46 	bl	80001d0 <memchr>
 8007d44:	b138      	cbz	r0, 8007d56 <_svfiprintf_r+0x142>
 8007d46:	2340      	movs	r3, #64	; 0x40
 8007d48:	1b40      	subs	r0, r0, r5
 8007d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	4303      	orrs	r3, r0
 8007d52:	3701      	adds	r7, #1
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	7839      	ldrb	r1, [r7, #0]
 8007d58:	4827      	ldr	r0, [pc, #156]	; (8007df8 <_svfiprintf_r+0x1e4>)
 8007d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d5e:	2206      	movs	r2, #6
 8007d60:	1c7e      	adds	r6, r7, #1
 8007d62:	f7f8 fa35 	bl	80001d0 <memchr>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d038      	beq.n	8007ddc <_svfiprintf_r+0x1c8>
 8007d6a:	4b24      	ldr	r3, [pc, #144]	; (8007dfc <_svfiprintf_r+0x1e8>)
 8007d6c:	bb13      	cbnz	r3, 8007db4 <_svfiprintf_r+0x1a0>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	3307      	adds	r3, #7
 8007d72:	f023 0307 	bic.w	r3, r3, #7
 8007d76:	3308      	adds	r3, #8
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7c:	444b      	add	r3, r9
 8007d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d80:	e76d      	b.n	8007c5e <_svfiprintf_r+0x4a>
 8007d82:	fb05 3202 	mla	r2, r5, r2, r3
 8007d86:	2001      	movs	r0, #1
 8007d88:	460f      	mov	r7, r1
 8007d8a:	e7a6      	b.n	8007cda <_svfiprintf_r+0xc6>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	3701      	adds	r7, #1
 8007d90:	9305      	str	r3, [sp, #20]
 8007d92:	4619      	mov	r1, r3
 8007d94:	250a      	movs	r5, #10
 8007d96:	4638      	mov	r0, r7
 8007d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d9c:	3a30      	subs	r2, #48	; 0x30
 8007d9e:	2a09      	cmp	r2, #9
 8007da0:	d903      	bls.n	8007daa <_svfiprintf_r+0x196>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c8      	beq.n	8007d38 <_svfiprintf_r+0x124>
 8007da6:	9105      	str	r1, [sp, #20]
 8007da8:	e7c6      	b.n	8007d38 <_svfiprintf_r+0x124>
 8007daa:	fb05 2101 	mla	r1, r5, r1, r2
 8007dae:	2301      	movs	r3, #1
 8007db0:	4607      	mov	r7, r0
 8007db2:	e7f0      	b.n	8007d96 <_svfiprintf_r+0x182>
 8007db4:	ab03      	add	r3, sp, #12
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	4622      	mov	r2, r4
 8007dba:	4b11      	ldr	r3, [pc, #68]	; (8007e00 <_svfiprintf_r+0x1ec>)
 8007dbc:	a904      	add	r1, sp, #16
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	f3af 8000 	nop.w
 8007dc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007dc8:	4681      	mov	r9, r0
 8007dca:	d1d6      	bne.n	8007d7a <_svfiprintf_r+0x166>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	065b      	lsls	r3, r3, #25
 8007dd0:	f53f af35 	bmi.w	8007c3e <_svfiprintf_r+0x2a>
 8007dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd6:	b01d      	add	sp, #116	; 0x74
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	ab03      	add	r3, sp, #12
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	4622      	mov	r2, r4
 8007de2:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <_svfiprintf_r+0x1ec>)
 8007de4:	a904      	add	r1, sp, #16
 8007de6:	4640      	mov	r0, r8
 8007de8:	f000 f882 	bl	8007ef0 <_printf_i>
 8007dec:	e7ea      	b.n	8007dc4 <_svfiprintf_r+0x1b0>
 8007dee:	bf00      	nop
 8007df0:	0800908c 	.word	0x0800908c
 8007df4:	08009092 	.word	0x08009092
 8007df8:	08009096 	.word	0x08009096
 8007dfc:	00000000 	.word	0x00000000
 8007e00:	08007b61 	.word	0x08007b61

08007e04 <_printf_common>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	4691      	mov	r9, r2
 8007e0a:	461f      	mov	r7, r3
 8007e0c:	688a      	ldr	r2, [r1, #8]
 8007e0e:	690b      	ldr	r3, [r1, #16]
 8007e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	bfb8      	it	lt
 8007e18:	4613      	movlt	r3, r2
 8007e1a:	f8c9 3000 	str.w	r3, [r9]
 8007e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e22:	4606      	mov	r6, r0
 8007e24:	460c      	mov	r4, r1
 8007e26:	b112      	cbz	r2, 8007e2e <_printf_common+0x2a>
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f8c9 3000 	str.w	r3, [r9]
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	0699      	lsls	r1, r3, #26
 8007e32:	bf42      	ittt	mi
 8007e34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e38:	3302      	addmi	r3, #2
 8007e3a:	f8c9 3000 	strmi.w	r3, [r9]
 8007e3e:	6825      	ldr	r5, [r4, #0]
 8007e40:	f015 0506 	ands.w	r5, r5, #6
 8007e44:	d107      	bne.n	8007e56 <_printf_common+0x52>
 8007e46:	f104 0a19 	add.w	sl, r4, #25
 8007e4a:	68e3      	ldr	r3, [r4, #12]
 8007e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	42ab      	cmp	r3, r5
 8007e54:	dc28      	bgt.n	8007ea8 <_printf_common+0xa4>
 8007e56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e5a:	6822      	ldr	r2, [r4, #0]
 8007e5c:	3300      	adds	r3, #0
 8007e5e:	bf18      	it	ne
 8007e60:	2301      	movne	r3, #1
 8007e62:	0692      	lsls	r2, r2, #26
 8007e64:	d42d      	bmi.n	8007ec2 <_printf_common+0xbe>
 8007e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	47c0      	blx	r8
 8007e70:	3001      	adds	r0, #1
 8007e72:	d020      	beq.n	8007eb6 <_printf_common+0xb2>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	68e5      	ldr	r5, [r4, #12]
 8007e78:	f8d9 2000 	ldr.w	r2, [r9]
 8007e7c:	f003 0306 	and.w	r3, r3, #6
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	bf08      	it	eq
 8007e84:	1aad      	subeq	r5, r5, r2
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	6922      	ldr	r2, [r4, #16]
 8007e8a:	bf0c      	ite	eq
 8007e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e90:	2500      	movne	r5, #0
 8007e92:	4293      	cmp	r3, r2
 8007e94:	bfc4      	itt	gt
 8007e96:	1a9b      	subgt	r3, r3, r2
 8007e98:	18ed      	addgt	r5, r5, r3
 8007e9a:	f04f 0900 	mov.w	r9, #0
 8007e9e:	341a      	adds	r4, #26
 8007ea0:	454d      	cmp	r5, r9
 8007ea2:	d11a      	bne.n	8007eda <_printf_common+0xd6>
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	e008      	b.n	8007eba <_printf_common+0xb6>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4652      	mov	r2, sl
 8007eac:	4639      	mov	r1, r7
 8007eae:	4630      	mov	r0, r6
 8007eb0:	47c0      	blx	r8
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d103      	bne.n	8007ebe <_printf_common+0xba>
 8007eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebe:	3501      	adds	r5, #1
 8007ec0:	e7c3      	b.n	8007e4a <_printf_common+0x46>
 8007ec2:	18e1      	adds	r1, r4, r3
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	2030      	movs	r0, #48	; 0x30
 8007ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ecc:	4422      	add	r2, r4
 8007ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ed2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	e7c5      	b.n	8007e66 <_printf_common+0x62>
 8007eda:	2301      	movs	r3, #1
 8007edc:	4622      	mov	r2, r4
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	47c0      	blx	r8
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d0e6      	beq.n	8007eb6 <_printf_common+0xb2>
 8007ee8:	f109 0901 	add.w	r9, r9, #1
 8007eec:	e7d8      	b.n	8007ea0 <_printf_common+0x9c>
	...

08007ef0 <_printf_i>:
 8007ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ef4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ef8:	460c      	mov	r4, r1
 8007efa:	7e09      	ldrb	r1, [r1, #24]
 8007efc:	b085      	sub	sp, #20
 8007efe:	296e      	cmp	r1, #110	; 0x6e
 8007f00:	4617      	mov	r7, r2
 8007f02:	4606      	mov	r6, r0
 8007f04:	4698      	mov	r8, r3
 8007f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f08:	f000 80b3 	beq.w	8008072 <_printf_i+0x182>
 8007f0c:	d822      	bhi.n	8007f54 <_printf_i+0x64>
 8007f0e:	2963      	cmp	r1, #99	; 0x63
 8007f10:	d036      	beq.n	8007f80 <_printf_i+0x90>
 8007f12:	d80a      	bhi.n	8007f2a <_printf_i+0x3a>
 8007f14:	2900      	cmp	r1, #0
 8007f16:	f000 80b9 	beq.w	800808c <_printf_i+0x19c>
 8007f1a:	2958      	cmp	r1, #88	; 0x58
 8007f1c:	f000 8083 	beq.w	8008026 <_printf_i+0x136>
 8007f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f28:	e032      	b.n	8007f90 <_printf_i+0xa0>
 8007f2a:	2964      	cmp	r1, #100	; 0x64
 8007f2c:	d001      	beq.n	8007f32 <_printf_i+0x42>
 8007f2e:	2969      	cmp	r1, #105	; 0x69
 8007f30:	d1f6      	bne.n	8007f20 <_printf_i+0x30>
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	6813      	ldr	r3, [r2, #0]
 8007f36:	0605      	lsls	r5, r0, #24
 8007f38:	f103 0104 	add.w	r1, r3, #4
 8007f3c:	d52a      	bpl.n	8007f94 <_printf_i+0xa4>
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6011      	str	r1, [r2, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	da03      	bge.n	8007f4e <_printf_i+0x5e>
 8007f46:	222d      	movs	r2, #45	; 0x2d
 8007f48:	425b      	negs	r3, r3
 8007f4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f4e:	486f      	ldr	r0, [pc, #444]	; (800810c <_printf_i+0x21c>)
 8007f50:	220a      	movs	r2, #10
 8007f52:	e039      	b.n	8007fc8 <_printf_i+0xd8>
 8007f54:	2973      	cmp	r1, #115	; 0x73
 8007f56:	f000 809d 	beq.w	8008094 <_printf_i+0x1a4>
 8007f5a:	d808      	bhi.n	8007f6e <_printf_i+0x7e>
 8007f5c:	296f      	cmp	r1, #111	; 0x6f
 8007f5e:	d020      	beq.n	8007fa2 <_printf_i+0xb2>
 8007f60:	2970      	cmp	r1, #112	; 0x70
 8007f62:	d1dd      	bne.n	8007f20 <_printf_i+0x30>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	f043 0320 	orr.w	r3, r3, #32
 8007f6a:	6023      	str	r3, [r4, #0]
 8007f6c:	e003      	b.n	8007f76 <_printf_i+0x86>
 8007f6e:	2975      	cmp	r1, #117	; 0x75
 8007f70:	d017      	beq.n	8007fa2 <_printf_i+0xb2>
 8007f72:	2978      	cmp	r1, #120	; 0x78
 8007f74:	d1d4      	bne.n	8007f20 <_printf_i+0x30>
 8007f76:	2378      	movs	r3, #120	; 0x78
 8007f78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f7c:	4864      	ldr	r0, [pc, #400]	; (8008110 <_printf_i+0x220>)
 8007f7e:	e055      	b.n	800802c <_printf_i+0x13c>
 8007f80:	6813      	ldr	r3, [r2, #0]
 8007f82:	1d19      	adds	r1, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6011      	str	r1, [r2, #0]
 8007f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f90:	2301      	movs	r3, #1
 8007f92:	e08c      	b.n	80080ae <_printf_i+0x1be>
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6011      	str	r1, [r2, #0]
 8007f98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f9c:	bf18      	it	ne
 8007f9e:	b21b      	sxthne	r3, r3
 8007fa0:	e7cf      	b.n	8007f42 <_printf_i+0x52>
 8007fa2:	6813      	ldr	r3, [r2, #0]
 8007fa4:	6825      	ldr	r5, [r4, #0]
 8007fa6:	1d18      	adds	r0, r3, #4
 8007fa8:	6010      	str	r0, [r2, #0]
 8007faa:	0628      	lsls	r0, r5, #24
 8007fac:	d501      	bpl.n	8007fb2 <_printf_i+0xc2>
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	e002      	b.n	8007fb8 <_printf_i+0xc8>
 8007fb2:	0668      	lsls	r0, r5, #25
 8007fb4:	d5fb      	bpl.n	8007fae <_printf_i+0xbe>
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	4854      	ldr	r0, [pc, #336]	; (800810c <_printf_i+0x21c>)
 8007fba:	296f      	cmp	r1, #111	; 0x6f
 8007fbc:	bf14      	ite	ne
 8007fbe:	220a      	movne	r2, #10
 8007fc0:	2208      	moveq	r2, #8
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fc8:	6865      	ldr	r5, [r4, #4]
 8007fca:	60a5      	str	r5, [r4, #8]
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	f2c0 8095 	blt.w	80080fc <_printf_i+0x20c>
 8007fd2:	6821      	ldr	r1, [r4, #0]
 8007fd4:	f021 0104 	bic.w	r1, r1, #4
 8007fd8:	6021      	str	r1, [r4, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d13d      	bne.n	800805a <_printf_i+0x16a>
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	f040 808e 	bne.w	8008100 <_printf_i+0x210>
 8007fe4:	4665      	mov	r5, ip
 8007fe6:	2a08      	cmp	r2, #8
 8007fe8:	d10b      	bne.n	8008002 <_printf_i+0x112>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	07db      	lsls	r3, r3, #31
 8007fee:	d508      	bpl.n	8008002 <_printf_i+0x112>
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	6862      	ldr	r2, [r4, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	bfde      	ittt	le
 8007ff8:	2330      	movle	r3, #48	; 0x30
 8007ffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008002:	ebac 0305 	sub.w	r3, ip, r5
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	f8cd 8000 	str.w	r8, [sp]
 800800c:	463b      	mov	r3, r7
 800800e:	aa03      	add	r2, sp, #12
 8008010:	4621      	mov	r1, r4
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff fef6 	bl	8007e04 <_printf_common>
 8008018:	3001      	adds	r0, #1
 800801a:	d14d      	bne.n	80080b8 <_printf_i+0x1c8>
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	b005      	add	sp, #20
 8008022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008026:	4839      	ldr	r0, [pc, #228]	; (800810c <_printf_i+0x21c>)
 8008028:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800802c:	6813      	ldr	r3, [r2, #0]
 800802e:	6821      	ldr	r1, [r4, #0]
 8008030:	1d1d      	adds	r5, r3, #4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6015      	str	r5, [r2, #0]
 8008036:	060a      	lsls	r2, r1, #24
 8008038:	d50b      	bpl.n	8008052 <_printf_i+0x162>
 800803a:	07ca      	lsls	r2, r1, #31
 800803c:	bf44      	itt	mi
 800803e:	f041 0120 	orrmi.w	r1, r1, #32
 8008042:	6021      	strmi	r1, [r4, #0]
 8008044:	b91b      	cbnz	r3, 800804e <_printf_i+0x15e>
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	f022 0220 	bic.w	r2, r2, #32
 800804c:	6022      	str	r2, [r4, #0]
 800804e:	2210      	movs	r2, #16
 8008050:	e7b7      	b.n	8007fc2 <_printf_i+0xd2>
 8008052:	064d      	lsls	r5, r1, #25
 8008054:	bf48      	it	mi
 8008056:	b29b      	uxthmi	r3, r3
 8008058:	e7ef      	b.n	800803a <_printf_i+0x14a>
 800805a:	4665      	mov	r5, ip
 800805c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008060:	fb02 3311 	mls	r3, r2, r1, r3
 8008064:	5cc3      	ldrb	r3, [r0, r3]
 8008066:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800806a:	460b      	mov	r3, r1
 800806c:	2900      	cmp	r1, #0
 800806e:	d1f5      	bne.n	800805c <_printf_i+0x16c>
 8008070:	e7b9      	b.n	8007fe6 <_printf_i+0xf6>
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	6825      	ldr	r5, [r4, #0]
 8008076:	6961      	ldr	r1, [r4, #20]
 8008078:	1d18      	adds	r0, r3, #4
 800807a:	6010      	str	r0, [r2, #0]
 800807c:	0628      	lsls	r0, r5, #24
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	d501      	bpl.n	8008086 <_printf_i+0x196>
 8008082:	6019      	str	r1, [r3, #0]
 8008084:	e002      	b.n	800808c <_printf_i+0x19c>
 8008086:	066a      	lsls	r2, r5, #25
 8008088:	d5fb      	bpl.n	8008082 <_printf_i+0x192>
 800808a:	8019      	strh	r1, [r3, #0]
 800808c:	2300      	movs	r3, #0
 800808e:	6123      	str	r3, [r4, #16]
 8008090:	4665      	mov	r5, ip
 8008092:	e7b9      	b.n	8008008 <_printf_i+0x118>
 8008094:	6813      	ldr	r3, [r2, #0]
 8008096:	1d19      	adds	r1, r3, #4
 8008098:	6011      	str	r1, [r2, #0]
 800809a:	681d      	ldr	r5, [r3, #0]
 800809c:	6862      	ldr	r2, [r4, #4]
 800809e:	2100      	movs	r1, #0
 80080a0:	4628      	mov	r0, r5
 80080a2:	f7f8 f895 	bl	80001d0 <memchr>
 80080a6:	b108      	cbz	r0, 80080ac <_printf_i+0x1bc>
 80080a8:	1b40      	subs	r0, r0, r5
 80080aa:	6060      	str	r0, [r4, #4]
 80080ac:	6863      	ldr	r3, [r4, #4]
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	2300      	movs	r3, #0
 80080b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b6:	e7a7      	b.n	8008008 <_printf_i+0x118>
 80080b8:	6923      	ldr	r3, [r4, #16]
 80080ba:	462a      	mov	r2, r5
 80080bc:	4639      	mov	r1, r7
 80080be:	4630      	mov	r0, r6
 80080c0:	47c0      	blx	r8
 80080c2:	3001      	adds	r0, #1
 80080c4:	d0aa      	beq.n	800801c <_printf_i+0x12c>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	079b      	lsls	r3, r3, #30
 80080ca:	d413      	bmi.n	80080f4 <_printf_i+0x204>
 80080cc:	68e0      	ldr	r0, [r4, #12]
 80080ce:	9b03      	ldr	r3, [sp, #12]
 80080d0:	4298      	cmp	r0, r3
 80080d2:	bfb8      	it	lt
 80080d4:	4618      	movlt	r0, r3
 80080d6:	e7a3      	b.n	8008020 <_printf_i+0x130>
 80080d8:	2301      	movs	r3, #1
 80080da:	464a      	mov	r2, r9
 80080dc:	4639      	mov	r1, r7
 80080de:	4630      	mov	r0, r6
 80080e0:	47c0      	blx	r8
 80080e2:	3001      	adds	r0, #1
 80080e4:	d09a      	beq.n	800801c <_printf_i+0x12c>
 80080e6:	3501      	adds	r5, #1
 80080e8:	68e3      	ldr	r3, [r4, #12]
 80080ea:	9a03      	ldr	r2, [sp, #12]
 80080ec:	1a9b      	subs	r3, r3, r2
 80080ee:	42ab      	cmp	r3, r5
 80080f0:	dcf2      	bgt.n	80080d8 <_printf_i+0x1e8>
 80080f2:	e7eb      	b.n	80080cc <_printf_i+0x1dc>
 80080f4:	2500      	movs	r5, #0
 80080f6:	f104 0919 	add.w	r9, r4, #25
 80080fa:	e7f5      	b.n	80080e8 <_printf_i+0x1f8>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1ac      	bne.n	800805a <_printf_i+0x16a>
 8008100:	7803      	ldrb	r3, [r0, #0]
 8008102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008106:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800810a:	e76c      	b.n	8007fe6 <_printf_i+0xf6>
 800810c:	0800909d 	.word	0x0800909d
 8008110:	080090ae 	.word	0x080090ae

08008114 <memcpy>:
 8008114:	b510      	push	{r4, lr}
 8008116:	1e43      	subs	r3, r0, #1
 8008118:	440a      	add	r2, r1
 800811a:	4291      	cmp	r1, r2
 800811c:	d100      	bne.n	8008120 <memcpy+0xc>
 800811e:	bd10      	pop	{r4, pc}
 8008120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008128:	e7f7      	b.n	800811a <memcpy+0x6>

0800812a <memmove>:
 800812a:	4288      	cmp	r0, r1
 800812c:	b510      	push	{r4, lr}
 800812e:	eb01 0302 	add.w	r3, r1, r2
 8008132:	d807      	bhi.n	8008144 <memmove+0x1a>
 8008134:	1e42      	subs	r2, r0, #1
 8008136:	4299      	cmp	r1, r3
 8008138:	d00a      	beq.n	8008150 <memmove+0x26>
 800813a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800813e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008142:	e7f8      	b.n	8008136 <memmove+0xc>
 8008144:	4283      	cmp	r3, r0
 8008146:	d9f5      	bls.n	8008134 <memmove+0xa>
 8008148:	1881      	adds	r1, r0, r2
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	42d3      	cmn	r3, r2
 800814e:	d100      	bne.n	8008152 <memmove+0x28>
 8008150:	bd10      	pop	{r4, pc}
 8008152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008156:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800815a:	e7f7      	b.n	800814c <memmove+0x22>

0800815c <_free_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4605      	mov	r5, r0
 8008160:	2900      	cmp	r1, #0
 8008162:	d045      	beq.n	80081f0 <_free_r+0x94>
 8008164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008168:	1f0c      	subs	r4, r1, #4
 800816a:	2b00      	cmp	r3, #0
 800816c:	bfb8      	it	lt
 800816e:	18e4      	addlt	r4, r4, r3
 8008170:	f000 f8d2 	bl	8008318 <__malloc_lock>
 8008174:	4a1f      	ldr	r2, [pc, #124]	; (80081f4 <_free_r+0x98>)
 8008176:	6813      	ldr	r3, [r2, #0]
 8008178:	4610      	mov	r0, r2
 800817a:	b933      	cbnz	r3, 800818a <_free_r+0x2e>
 800817c:	6063      	str	r3, [r4, #4]
 800817e:	6014      	str	r4, [r2, #0]
 8008180:	4628      	mov	r0, r5
 8008182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008186:	f000 b8c8 	b.w	800831a <__malloc_unlock>
 800818a:	42a3      	cmp	r3, r4
 800818c:	d90c      	bls.n	80081a8 <_free_r+0x4c>
 800818e:	6821      	ldr	r1, [r4, #0]
 8008190:	1862      	adds	r2, r4, r1
 8008192:	4293      	cmp	r3, r2
 8008194:	bf04      	itt	eq
 8008196:	681a      	ldreq	r2, [r3, #0]
 8008198:	685b      	ldreq	r3, [r3, #4]
 800819a:	6063      	str	r3, [r4, #4]
 800819c:	bf04      	itt	eq
 800819e:	1852      	addeq	r2, r2, r1
 80081a0:	6022      	streq	r2, [r4, #0]
 80081a2:	6004      	str	r4, [r0, #0]
 80081a4:	e7ec      	b.n	8008180 <_free_r+0x24>
 80081a6:	4613      	mov	r3, r2
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	b10a      	cbz	r2, 80081b0 <_free_r+0x54>
 80081ac:	42a2      	cmp	r2, r4
 80081ae:	d9fa      	bls.n	80081a6 <_free_r+0x4a>
 80081b0:	6819      	ldr	r1, [r3, #0]
 80081b2:	1858      	adds	r0, r3, r1
 80081b4:	42a0      	cmp	r0, r4
 80081b6:	d10b      	bne.n	80081d0 <_free_r+0x74>
 80081b8:	6820      	ldr	r0, [r4, #0]
 80081ba:	4401      	add	r1, r0
 80081bc:	1858      	adds	r0, r3, r1
 80081be:	4282      	cmp	r2, r0
 80081c0:	6019      	str	r1, [r3, #0]
 80081c2:	d1dd      	bne.n	8008180 <_free_r+0x24>
 80081c4:	6810      	ldr	r0, [r2, #0]
 80081c6:	6852      	ldr	r2, [r2, #4]
 80081c8:	605a      	str	r2, [r3, #4]
 80081ca:	4401      	add	r1, r0
 80081cc:	6019      	str	r1, [r3, #0]
 80081ce:	e7d7      	b.n	8008180 <_free_r+0x24>
 80081d0:	d902      	bls.n	80081d8 <_free_r+0x7c>
 80081d2:	230c      	movs	r3, #12
 80081d4:	602b      	str	r3, [r5, #0]
 80081d6:	e7d3      	b.n	8008180 <_free_r+0x24>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	1821      	adds	r1, r4, r0
 80081dc:	428a      	cmp	r2, r1
 80081de:	bf04      	itt	eq
 80081e0:	6811      	ldreq	r1, [r2, #0]
 80081e2:	6852      	ldreq	r2, [r2, #4]
 80081e4:	6062      	str	r2, [r4, #4]
 80081e6:	bf04      	itt	eq
 80081e8:	1809      	addeq	r1, r1, r0
 80081ea:	6021      	streq	r1, [r4, #0]
 80081ec:	605c      	str	r4, [r3, #4]
 80081ee:	e7c7      	b.n	8008180 <_free_r+0x24>
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
 80081f2:	bf00      	nop
 80081f4:	200005b8 	.word	0x200005b8

080081f8 <_malloc_r>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	1ccd      	adds	r5, r1, #3
 80081fc:	f025 0503 	bic.w	r5, r5, #3
 8008200:	3508      	adds	r5, #8
 8008202:	2d0c      	cmp	r5, #12
 8008204:	bf38      	it	cc
 8008206:	250c      	movcc	r5, #12
 8008208:	2d00      	cmp	r5, #0
 800820a:	4606      	mov	r6, r0
 800820c:	db01      	blt.n	8008212 <_malloc_r+0x1a>
 800820e:	42a9      	cmp	r1, r5
 8008210:	d903      	bls.n	800821a <_malloc_r+0x22>
 8008212:	230c      	movs	r3, #12
 8008214:	6033      	str	r3, [r6, #0]
 8008216:	2000      	movs	r0, #0
 8008218:	bd70      	pop	{r4, r5, r6, pc}
 800821a:	f000 f87d 	bl	8008318 <__malloc_lock>
 800821e:	4a21      	ldr	r2, [pc, #132]	; (80082a4 <_malloc_r+0xac>)
 8008220:	6814      	ldr	r4, [r2, #0]
 8008222:	4621      	mov	r1, r4
 8008224:	b991      	cbnz	r1, 800824c <_malloc_r+0x54>
 8008226:	4c20      	ldr	r4, [pc, #128]	; (80082a8 <_malloc_r+0xb0>)
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	b91b      	cbnz	r3, 8008234 <_malloc_r+0x3c>
 800822c:	4630      	mov	r0, r6
 800822e:	f000 f863 	bl	80082f8 <_sbrk_r>
 8008232:	6020      	str	r0, [r4, #0]
 8008234:	4629      	mov	r1, r5
 8008236:	4630      	mov	r0, r6
 8008238:	f000 f85e 	bl	80082f8 <_sbrk_r>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d124      	bne.n	800828a <_malloc_r+0x92>
 8008240:	230c      	movs	r3, #12
 8008242:	6033      	str	r3, [r6, #0]
 8008244:	4630      	mov	r0, r6
 8008246:	f000 f868 	bl	800831a <__malloc_unlock>
 800824a:	e7e4      	b.n	8008216 <_malloc_r+0x1e>
 800824c:	680b      	ldr	r3, [r1, #0]
 800824e:	1b5b      	subs	r3, r3, r5
 8008250:	d418      	bmi.n	8008284 <_malloc_r+0x8c>
 8008252:	2b0b      	cmp	r3, #11
 8008254:	d90f      	bls.n	8008276 <_malloc_r+0x7e>
 8008256:	600b      	str	r3, [r1, #0]
 8008258:	50cd      	str	r5, [r1, r3]
 800825a:	18cc      	adds	r4, r1, r3
 800825c:	4630      	mov	r0, r6
 800825e:	f000 f85c 	bl	800831a <__malloc_unlock>
 8008262:	f104 000b 	add.w	r0, r4, #11
 8008266:	1d23      	adds	r3, r4, #4
 8008268:	f020 0007 	bic.w	r0, r0, #7
 800826c:	1ac3      	subs	r3, r0, r3
 800826e:	d0d3      	beq.n	8008218 <_malloc_r+0x20>
 8008270:	425a      	negs	r2, r3
 8008272:	50e2      	str	r2, [r4, r3]
 8008274:	e7d0      	b.n	8008218 <_malloc_r+0x20>
 8008276:	428c      	cmp	r4, r1
 8008278:	684b      	ldr	r3, [r1, #4]
 800827a:	bf16      	itet	ne
 800827c:	6063      	strne	r3, [r4, #4]
 800827e:	6013      	streq	r3, [r2, #0]
 8008280:	460c      	movne	r4, r1
 8008282:	e7eb      	b.n	800825c <_malloc_r+0x64>
 8008284:	460c      	mov	r4, r1
 8008286:	6849      	ldr	r1, [r1, #4]
 8008288:	e7cc      	b.n	8008224 <_malloc_r+0x2c>
 800828a:	1cc4      	adds	r4, r0, #3
 800828c:	f024 0403 	bic.w	r4, r4, #3
 8008290:	42a0      	cmp	r0, r4
 8008292:	d005      	beq.n	80082a0 <_malloc_r+0xa8>
 8008294:	1a21      	subs	r1, r4, r0
 8008296:	4630      	mov	r0, r6
 8008298:	f000 f82e 	bl	80082f8 <_sbrk_r>
 800829c:	3001      	adds	r0, #1
 800829e:	d0cf      	beq.n	8008240 <_malloc_r+0x48>
 80082a0:	6025      	str	r5, [r4, #0]
 80082a2:	e7db      	b.n	800825c <_malloc_r+0x64>
 80082a4:	200005b8 	.word	0x200005b8
 80082a8:	200005bc 	.word	0x200005bc

080082ac <_realloc_r>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	4607      	mov	r7, r0
 80082b0:	4614      	mov	r4, r2
 80082b2:	460e      	mov	r6, r1
 80082b4:	b921      	cbnz	r1, 80082c0 <_realloc_r+0x14>
 80082b6:	4611      	mov	r1, r2
 80082b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082bc:	f7ff bf9c 	b.w	80081f8 <_malloc_r>
 80082c0:	b922      	cbnz	r2, 80082cc <_realloc_r+0x20>
 80082c2:	f7ff ff4b 	bl	800815c <_free_r>
 80082c6:	4625      	mov	r5, r4
 80082c8:	4628      	mov	r0, r5
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082cc:	f000 f826 	bl	800831c <_malloc_usable_size_r>
 80082d0:	42a0      	cmp	r0, r4
 80082d2:	d20f      	bcs.n	80082f4 <_realloc_r+0x48>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4638      	mov	r0, r7
 80082d8:	f7ff ff8e 	bl	80081f8 <_malloc_r>
 80082dc:	4605      	mov	r5, r0
 80082de:	2800      	cmp	r0, #0
 80082e0:	d0f2      	beq.n	80082c8 <_realloc_r+0x1c>
 80082e2:	4631      	mov	r1, r6
 80082e4:	4622      	mov	r2, r4
 80082e6:	f7ff ff15 	bl	8008114 <memcpy>
 80082ea:	4631      	mov	r1, r6
 80082ec:	4638      	mov	r0, r7
 80082ee:	f7ff ff35 	bl	800815c <_free_r>
 80082f2:	e7e9      	b.n	80082c8 <_realloc_r+0x1c>
 80082f4:	4635      	mov	r5, r6
 80082f6:	e7e7      	b.n	80082c8 <_realloc_r+0x1c>

080082f8 <_sbrk_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4c06      	ldr	r4, [pc, #24]	; (8008314 <_sbrk_r+0x1c>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4605      	mov	r5, r0
 8008300:	4608      	mov	r0, r1
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	f7f8 fd9c 	bl	8000e40 <_sbrk>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_sbrk_r+0x1a>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	b103      	cbz	r3, 8008312 <_sbrk_r+0x1a>
 8008310:	602b      	str	r3, [r5, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20000a74 	.word	0x20000a74

08008318 <__malloc_lock>:
 8008318:	4770      	bx	lr

0800831a <__malloc_unlock>:
 800831a:	4770      	bx	lr

0800831c <_malloc_usable_size_r>:
 800831c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008320:	1f18      	subs	r0, r3, #4
 8008322:	2b00      	cmp	r3, #0
 8008324:	bfbc      	itt	lt
 8008326:	580b      	ldrlt	r3, [r1, r0]
 8008328:	18c0      	addlt	r0, r0, r3
 800832a:	4770      	bx	lr

0800832c <_init>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr

08008338 <_fini>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr
